// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Simple Queue Service
///
/// Client for invoking operations on Amazon Simple Queue Service. Each operation on Amazon Simple Queue Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_sqs::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_sqs::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_sqs::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AddPermission`](crate::client::fluent_builders::AddPermission) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::AddPermission::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::AddPermission::set_queue_url): <p>The URL of the Amazon SQS queue to which permissions are added.</p>  <p>Queue URLs and names are case-sensitive.</p>
    ///   - [`label(impl Into<String>)`](crate::client::fluent_builders::AddPermission::label) / [`set_label(Option<String>)`](crate::client::fluent_builders::AddPermission::set_label): <p>The unique identification of the permission you're setting (for example, <code>AliceSendMessage</code>). Maximum 80 characters. Allowed characters include alphanumeric characters, hyphens (<code>-</code>), and underscores (<code>_</code>).</p>
    ///   - [`aws_account_ids(Vec<String>)`](crate::client::fluent_builders::AddPermission::aws_account_ids) / [`set_aws_account_ids(Option<Vec<String>>)`](crate::client::fluent_builders::AddPermission::set_aws_account_ids): <p>The Amazon Web Services account numbers of the <a href="https://docs.aws.amazon.com/general/latest/gr/glos-chap.html#P">principals</a> who are to receive permission. For information about locating the Amazon Web Services account identification, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-making-api-requests.html#sqs-api-request-authentication">Your Amazon Web Services Identifiers</a> in the <i>Amazon SQS Developer Guide</i>.</p>
    ///   - [`actions(Vec<String>)`](crate::client::fluent_builders::AddPermission::actions) / [`set_actions(Option<Vec<String>>)`](crate::client::fluent_builders::AddPermission::set_actions): <p>The action the client wants to allow for the specified principal. Valid values: the name of any action or <code>*</code>.</p>  <p>For more information about these actions, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-overview-of-managing-access.html">Overview of Managing Access Permissions to Your Amazon Simple Queue Service Resource</a> in the <i>Amazon SQS Developer Guide</i>.</p>  <p>Specifying <code>SendMessage</code>, <code>DeleteMessage</code>, or <code>ChangeMessageVisibility</code> for <code>ActionName.n</code> also grants permissions for the corresponding batch versions of those actions: <code>SendMessageBatch</code>, <code>DeleteMessageBatch</code>, and <code>ChangeMessageVisibilityBatch</code>.</p>
    /// - On success, responds with [`AddPermissionOutput`](crate::output::AddPermissionOutput)

    /// - On failure, responds with [`SdkError<AddPermissionError>`](crate::error::AddPermissionError)
    pub fn add_permission(&self) -> crate::client::fluent_builders::AddPermission {
        crate::client::fluent_builders::AddPermission::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ChangeMessageVisibility`](crate::client::fluent_builders::ChangeMessageVisibility) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::ChangeMessageVisibility::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::ChangeMessageVisibility::set_queue_url): <p>The URL of the Amazon SQS queue whose message's visibility is changed.</p>  <p>Queue URLs and names are case-sensitive.</p>
    ///   - [`receipt_handle(impl Into<String>)`](crate::client::fluent_builders::ChangeMessageVisibility::receipt_handle) / [`set_receipt_handle(Option<String>)`](crate::client::fluent_builders::ChangeMessageVisibility::set_receipt_handle): <p>The receipt handle associated with the message whose visibility timeout is changed. This parameter is returned by the <code> <code>ReceiveMessage</code> </code> action.</p>
    ///   - [`visibility_timeout(i32)`](crate::client::fluent_builders::ChangeMessageVisibility::visibility_timeout) / [`set_visibility_timeout(i32)`](crate::client::fluent_builders::ChangeMessageVisibility::set_visibility_timeout): <p>The new value for the message's visibility timeout (in seconds). Values range: <code>0</code> to <code>43200</code>. Maximum: 12 hours.</p>
    /// - On success, responds with [`ChangeMessageVisibilityOutput`](crate::output::ChangeMessageVisibilityOutput)

    /// - On failure, responds with [`SdkError<ChangeMessageVisibilityError>`](crate::error::ChangeMessageVisibilityError)
    pub fn change_message_visibility(
        &self,
    ) -> crate::client::fluent_builders::ChangeMessageVisibility {
        crate::client::fluent_builders::ChangeMessageVisibility::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ChangeMessageVisibilityBatch`](crate::client::fluent_builders::ChangeMessageVisibilityBatch) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::ChangeMessageVisibilityBatch::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::ChangeMessageVisibilityBatch::set_queue_url): <p>The URL of the Amazon SQS queue whose messages' visibility is changed.</p>  <p>Queue URLs and names are case-sensitive.</p>
    ///   - [`entries(Vec<ChangeMessageVisibilityBatchRequestEntry>)`](crate::client::fluent_builders::ChangeMessageVisibilityBatch::entries) / [`set_entries(Option<Vec<ChangeMessageVisibilityBatchRequestEntry>>)`](crate::client::fluent_builders::ChangeMessageVisibilityBatch::set_entries): <p>A list of receipt handles of the messages for which the visibility timeout must be changed.</p>
    /// - On success, responds with [`ChangeMessageVisibilityBatchOutput`](crate::output::ChangeMessageVisibilityBatchOutput) with field(s):
    ///   - [`successful(Option<Vec<ChangeMessageVisibilityBatchResultEntry>>)`](crate::output::ChangeMessageVisibilityBatchOutput::successful): <p>A list of <code> <code>ChangeMessageVisibilityBatchResultEntry</code> </code> items.</p>
    ///   - [`failed(Option<Vec<BatchResultErrorEntry>>)`](crate::output::ChangeMessageVisibilityBatchOutput::failed): <p>A list of <code> <code>BatchResultErrorEntry</code> </code> items.</p>
    /// - On failure, responds with [`SdkError<ChangeMessageVisibilityBatchError>`](crate::error::ChangeMessageVisibilityBatchError)
    pub fn change_message_visibility_batch(
        &self,
    ) -> crate::client::fluent_builders::ChangeMessageVisibilityBatch {
        crate::client::fluent_builders::ChangeMessageVisibilityBatch::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateQueue`](crate::client::fluent_builders::CreateQueue) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_name(impl Into<String>)`](crate::client::fluent_builders::CreateQueue::queue_name) / [`set_queue_name(Option<String>)`](crate::client::fluent_builders::CreateQueue::set_queue_name): <p>The name of the new queue. The following limits apply to this name:</p>  <ul>   <li> <p>A queue name can have up to 80 characters.</p> </li>   <li> <p>Valid values: alphanumeric characters, hyphens (<code>-</code>), and underscores (<code>_</code>).</p> </li>   <li> <p>A FIFO queue name must end with the <code>.fifo</code> suffix.</p> </li>  </ul>  <p>Queue URLs and names are case-sensitive.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateQueue::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateQueue::set_tags): <p>Add cost allocation tags to the specified Amazon SQS queue. For an overview, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-tags.html">Tagging Your Amazon SQS Queues</a> in the <i>Amazon SQS Developer Guide</i>.</p>  <p>When you use queue tags, keep the following guidelines in mind:</p>  <ul>   <li> <p>Adding more than 50 tags to a queue isn't recommended.</p> </li>   <li> <p>Tags don't have any semantic meaning. Amazon SQS interprets tags as character strings.</p> </li>   <li> <p>Tags are case-sensitive.</p> </li>   <li> <p>A new tag with a key identical to that of an existing tag overwrites the existing tag.</p> </li>  </ul>  <p>For a full list of tag restrictions, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-limits.html#limits-queues">Quotas related to queues</a> in the <i>Amazon SQS Developer Guide</i>.</p> <note>   <p>To be able to tag a queue on creation, you must have the <code>sqs:CreateQueue</code> and <code>sqs:TagQueue</code> permissions.</p>   <p>Cross-account permissions don't apply to this action. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-customer-managed-policy-examples.html#grant-cross-account-permissions-to-role-and-user-name">Grant cross-account permissions to a role and a user name</a> in the <i>Amazon SQS Developer Guide</i>.</p>  </note>
    ///   - [`attributes(HashMap<QueueAttributeName, String>)`](crate::client::fluent_builders::CreateQueue::attributes) / [`set_attributes(Option<HashMap<QueueAttributeName, String>>)`](crate::client::fluent_builders::CreateQueue::set_attributes): <p>A map of attributes with their corresponding values.</p>  <p>The following lists the names, descriptions, and values of the special request parameters that the <code>CreateQueue</code> action uses:</p>  <ul>   <li> <p> <code>DelaySeconds</code> – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 seconds (15 minutes). Default: 0. </p> </li>   <li> <p> <code>MaximumMessageSize</code> – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB). </p> </li>   <li> <p> <code>MessageRetentionPeriod</code> – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer from 60 seconds (1 minute) to 1,209,600 seconds (14 days). Default: 345,600 (4 days). </p> </li>   <li> <p> <code>Policy</code> – The queue's policy. A valid Amazon Web Services policy. For more information about policy structure, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html">Overview of Amazon Web Services IAM Policies</a> in the <i>Amazon IAM User Guide</i>. </p> </li>   <li> <p> <code>ReceiveMessageWaitTimeSeconds</code> – The length of time, in seconds, for which a <code> <code>ReceiveMessage</code> </code> action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0. </p> </li>   <li> <p> <code>RedrivePolicy</code> – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. For more information about the redrive policy and dead-letter queues, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html">Using Amazon SQS Dead-Letter Queues</a> in the <i>Amazon SQS Developer Guide</i>.</p>    <ul>     <li> <p> <code>deadLetterTargetArn</code> – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of <code>maxReceiveCount</code> is exceeded.</p> </li>     <li> <p> <code>maxReceiveCount</code> – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. When the <code>ReceiveCount</code> for a message exceeds the <code>maxReceiveCount</code> for a queue, Amazon SQS moves the message to the dead-letter-queue.</p> </li>    </ul> <note>     <p>The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.</p>    </note> </li>   <li> <p> <code>VisibilityTimeout</code> – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">Visibility Timeout</a> in the <i>Amazon SQS Developer Guide</i>.</p> </li>  </ul>  <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html">server-side-encryption</a>:</p>  <ul>   <li> <p> <code>KmsMasterKeyId</code> – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms">Key Terms</a>. While the alias of the Amazon Web Services managed CMK for Amazon SQS is always <code>alias/aws/sqs</code>, the alias of a custom CMK can, for example, be <code>alias/<i>MyAlias</i> </code>. For more examples, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters">KeyId</a> in the <i>Key Management Service API Reference</i>. </p> </li>   <li> <p> <code>KmsDataKeyReusePeriodSeconds</code> – The length of time, in seconds, for which Amazon SQS can reuse a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys">data key</a> to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work">How Does the Data Key Reuse Period Work?</a>. </p> </li>   <li> <p> <code>SqsManagedSseEnabled</code> – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (e.g. <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html">SSE-KMS</a> or <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html">SSE-SQS</a>).</p> </li>  </ul>  <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html">FIFO (first-in-first-out) queues</a>:</p>  <ul>   <li> <p> <code>FifoQueue</code> – Designates a queue as FIFO. Valid values are <code>true</code> and <code>false</code>. If you don't specify the <code>FifoQueue</code> attribute, Amazon SQS creates a standard queue. You can provide this attribute only during queue creation. You can't change it for an existing queue. When you set this attribute, you must also provide the <code>MessageGroupId</code> for your messages explicitly.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-understanding-logic.html">FIFO queue logic</a> in the <i>Amazon SQS Developer Guide</i>.</p> </li>   <li> <p> <code>ContentBasedDeduplication</code> – Enables content-based deduplication. Valid values are <code>true</code> and <code>false</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html">Exactly-once processing</a> in the <i>Amazon SQS Developer Guide</i>. Note the following: </p>    <ul>     <li> <p>Every message must have a unique <code>MessageDeduplicationId</code>.</p>      <ul>       <li> <p>You may provide a <code>MessageDeduplicationId</code> explicitly.</p> </li>       <li> <p>If you aren't able to provide a <code>MessageDeduplicationId</code> and you enable <code>ContentBasedDeduplication</code> for your queue, Amazon SQS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using the body of the message (but not the attributes of the message). </p> </li>       <li> <p>If you don't provide a <code>MessageDeduplicationId</code> and the queue doesn't have <code>ContentBasedDeduplication</code> set, the action fails with an error.</p> </li>       <li> <p>If the queue has <code>ContentBasedDeduplication</code> set, your <code>MessageDeduplicationId</code> overrides the generated one.</p> </li>      </ul> </li>     <li> <p>When <code>ContentBasedDeduplication</code> is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.</p> </li>     <li> <p>If you send one message with <code>ContentBasedDeduplication</code> enabled and then another message with a <code>MessageDeduplicationId</code> that is the same as the one generated for the first <code>MessageDeduplicationId</code>, the two messages are treated as duplicates and only one copy of the message is delivered. </p> </li>    </ul> </li>  </ul>  <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html">high throughput for FIFO queues</a>:</p>  <ul>   <li> <p> <code>DeduplicationScope</code> – Specifies whether message deduplication occurs at the message group or queue level. Valid values are <code>messageGroup</code> and <code>queue</code>.</p> </li>   <li> <p> <code>FifoThroughputLimit</code> – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are <code>perQueue</code> and <code>perMessageGroupId</code>. The <code>perMessageGroupId</code> value is allowed only when the value for <code>DeduplicationScope</code> is <code>messageGroup</code>.</p> </li>  </ul>  <p>To enable high throughput for FIFO queues, do the following:</p>  <ul>   <li> <p>Set <code>DeduplicationScope</code> to <code>messageGroup</code>.</p> </li>   <li> <p>Set <code>FifoThroughputLimit</code> to <code>perMessageGroupId</code>.</p> </li>  </ul>  <p>If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified.</p>  <p>For information on throughput quotas, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html">Quotas related to messages</a> in the <i>Amazon SQS Developer Guide</i>.</p>
    /// - On success, responds with [`CreateQueueOutput`](crate::output::CreateQueueOutput) with field(s):
    ///   - [`queue_url(Option<String>)`](crate::output::CreateQueueOutput::queue_url): <p>The URL of the created Amazon SQS queue.</p>
    /// - On failure, responds with [`SdkError<CreateQueueError>`](crate::error::CreateQueueError)
    pub fn create_queue(&self) -> crate::client::fluent_builders::CreateQueue {
        crate::client::fluent_builders::CreateQueue::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteMessage`](crate::client::fluent_builders::DeleteMessage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::DeleteMessage::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::DeleteMessage::set_queue_url): <p>The URL of the Amazon SQS queue from which messages are deleted.</p>  <p>Queue URLs and names are case-sensitive.</p>
    ///   - [`receipt_handle(impl Into<String>)`](crate::client::fluent_builders::DeleteMessage::receipt_handle) / [`set_receipt_handle(Option<String>)`](crate::client::fluent_builders::DeleteMessage::set_receipt_handle): <p>The receipt handle associated with the message to delete.</p>
    /// - On success, responds with [`DeleteMessageOutput`](crate::output::DeleteMessageOutput)

    /// - On failure, responds with [`SdkError<DeleteMessageError>`](crate::error::DeleteMessageError)
    pub fn delete_message(&self) -> crate::client::fluent_builders::DeleteMessage {
        crate::client::fluent_builders::DeleteMessage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteMessageBatch`](crate::client::fluent_builders::DeleteMessageBatch) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::DeleteMessageBatch::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::DeleteMessageBatch::set_queue_url): <p>The URL of the Amazon SQS queue from which messages are deleted.</p>  <p>Queue URLs and names are case-sensitive.</p>
    ///   - [`entries(Vec<DeleteMessageBatchRequestEntry>)`](crate::client::fluent_builders::DeleteMessageBatch::entries) / [`set_entries(Option<Vec<DeleteMessageBatchRequestEntry>>)`](crate::client::fluent_builders::DeleteMessageBatch::set_entries): <p>A list of receipt handles for the messages to be deleted.</p>
    /// - On success, responds with [`DeleteMessageBatchOutput`](crate::output::DeleteMessageBatchOutput) with field(s):
    ///   - [`successful(Option<Vec<DeleteMessageBatchResultEntry>>)`](crate::output::DeleteMessageBatchOutput::successful): <p>A list of <code> <code>DeleteMessageBatchResultEntry</code> </code> items.</p>
    ///   - [`failed(Option<Vec<BatchResultErrorEntry>>)`](crate::output::DeleteMessageBatchOutput::failed): <p>A list of <code> <code>BatchResultErrorEntry</code> </code> items.</p>
    /// - On failure, responds with [`SdkError<DeleteMessageBatchError>`](crate::error::DeleteMessageBatchError)
    pub fn delete_message_batch(&self) -> crate::client::fluent_builders::DeleteMessageBatch {
        crate::client::fluent_builders::DeleteMessageBatch::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteQueue`](crate::client::fluent_builders::DeleteQueue) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::DeleteQueue::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::DeleteQueue::set_queue_url): <p>The URL of the Amazon SQS queue to delete.</p>  <p>Queue URLs and names are case-sensitive.</p>
    /// - On success, responds with [`DeleteQueueOutput`](crate::output::DeleteQueueOutput)

    /// - On failure, responds with [`SdkError<DeleteQueueError>`](crate::error::DeleteQueueError)
    pub fn delete_queue(&self) -> crate::client::fluent_builders::DeleteQueue {
        crate::client::fluent_builders::DeleteQueue::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetQueueAttributes`](crate::client::fluent_builders::GetQueueAttributes) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::GetQueueAttributes::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::GetQueueAttributes::set_queue_url): <p>The URL of the Amazon SQS queue whose attribute information is retrieved.</p>  <p>Queue URLs and names are case-sensitive.</p>
    ///   - [`attribute_names(Vec<QueueAttributeName>)`](crate::client::fluent_builders::GetQueueAttributes::attribute_names) / [`set_attribute_names(Option<Vec<QueueAttributeName>>)`](crate::client::fluent_builders::GetQueueAttributes::set_attribute_names): <p>A list of attributes for which to retrieve information.</p>  <p>The <code>AttributeName.N</code> parameter is optional, but if you don't specify values for this parameter, the request returns empty results.</p> <note>   <p>In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.</p>  </note>  <p>The following attributes are supported:</p> <important>   <p>The <code>ApproximateNumberOfMessagesDelayed</code>, <code>ApproximateNumberOfMessagesNotVisible</code>, and <code>ApproximateNumberOfMessagesVisible</code> metrics may not achieve consistency until at least 1 minute after the producers stop sending messages. This period is required for the queue metadata to reach eventual consistency. </p>  </important>  <ul>   <li> <p> <code>All</code> – Returns all values. </p> </li>   <li> <p> <code>ApproximateNumberOfMessages</code> – Returns the approximate number of messages available for retrieval from the queue.</p> </li>   <li> <p> <code>ApproximateNumberOfMessagesDelayed</code> – Returns the approximate number of messages in the queue that are delayed and not available for reading immediately. This can happen when the queue is configured as a delay queue or when a message has been sent with a delay parameter.</p> </li>   <li> <p> <code>ApproximateNumberOfMessagesNotVisible</code> – Returns the approximate number of messages that are in flight. Messages are considered to be <i>in flight</i> if they have been sent to a client but have not yet been deleted or have not yet reached the end of their visibility window. </p> </li>   <li> <p> <code>CreatedTimestamp</code> – Returns the time when the queue was created in seconds (<a href="http://en.wikipedia.org/wiki/Unix_time">epoch time</a>).</p> </li>   <li> <p> <code>DelaySeconds</code> – Returns the default delay on the queue in seconds.</p> </li>   <li> <p> <code>LastModifiedTimestamp</code> – Returns the time when the queue was last changed in seconds (<a href="http://en.wikipedia.org/wiki/Unix_time">epoch time</a>).</p> </li>   <li> <p> <code>MaximumMessageSize</code> – Returns the limit of how many bytes a message can contain before Amazon SQS rejects it.</p> </li>   <li> <p> <code>MessageRetentionPeriod</code> – Returns the length of time, in seconds, for which Amazon SQS retains a message.</p> </li>   <li> <p> <code>Policy</code> – Returns the policy of the queue.</p> </li>   <li> <p> <code>QueueArn</code> – Returns the Amazon resource name (ARN) of the queue.</p> </li>   <li> <p> <code>ReceiveMessageWaitTimeSeconds</code> – Returns the length of time, in seconds, for which the <code>ReceiveMessage</code> action waits for a message to arrive. </p> </li>   <li> <p> <code>RedrivePolicy</code> – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. For more information about the redrive policy and dead-letter queues, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html">Using Amazon SQS Dead-Letter Queues</a> in the <i>Amazon SQS Developer Guide</i>.</p>    <ul>     <li> <p> <code>deadLetterTargetArn</code> – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of <code>maxReceiveCount</code> is exceeded.</p> </li>     <li> <p> <code>maxReceiveCount</code> – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. When the <code>ReceiveCount</code> for a message exceeds the <code>maxReceiveCount</code> for a queue, Amazon SQS moves the message to the dead-letter-queue.</p> </li>    </ul> </li>   <li> <p> <code>VisibilityTimeout</code> – Returns the visibility timeout for the queue. For more information about the visibility timeout, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">Visibility Timeout</a> in the <i>Amazon SQS Developer Guide</i>. </p> </li>  </ul>  <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html">server-side-encryption</a>:</p>  <ul>   <li> <p> <code>KmsMasterKeyId</code> – Returns the ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms">Key Terms</a>. </p> </li>   <li> <p> <code>KmsDataKeyReusePeriodSeconds</code> – Returns the length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling KMS again. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work">How Does the Data Key Reuse Period Work?</a>. </p> </li>   <li> <p> <code>SqsManagedSseEnabled</code> – Returns information about whether the queue is using SSE-SQS encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (e.g. <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html">SSE-KMS</a> or <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html">SSE-SQS</a>).</p> </li>  </ul>  <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html">FIFO (first-in-first-out) queues</a>:</p>  <ul>   <li> <p> <code>FifoQueue</code> – Returns information about whether the queue is FIFO. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-understanding-logic.html">FIFO queue logic</a> in the <i>Amazon SQS Developer Guide</i>.</p> <note>     <p>To determine whether a queue is <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html">FIFO</a>, you can check whether <code>QueueName</code> ends with the <code>.fifo</code> suffix.</p>    </note> </li>   <li> <p> <code>ContentBasedDeduplication</code> – Returns whether content-based deduplication is enabled for the queue. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html">Exactly-once processing</a> in the <i>Amazon SQS Developer Guide</i>. </p> </li>  </ul>  <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html">high throughput for FIFO queues</a>:</p>  <ul>   <li> <p> <code>DeduplicationScope</code> – Specifies whether message deduplication occurs at the message group or queue level. Valid values are <code>messageGroup</code> and <code>queue</code>.</p> </li>   <li> <p> <code>FifoThroughputLimit</code> – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are <code>perQueue</code> and <code>perMessageGroupId</code>. The <code>perMessageGroupId</code> value is allowed only when the value for <code>DeduplicationScope</code> is <code>messageGroup</code>.</p> </li>  </ul>  <p>To enable high throughput for FIFO queues, do the following:</p>  <ul>   <li> <p>Set <code>DeduplicationScope</code> to <code>messageGroup</code>.</p> </li>   <li> <p>Set <code>FifoThroughputLimit</code> to <code>perMessageGroupId</code>.</p> </li>  </ul>  <p>If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified.</p>  <p>For information on throughput quotas, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html">Quotas related to messages</a> in the <i>Amazon SQS Developer Guide</i>.</p>
    /// - On success, responds with [`GetQueueAttributesOutput`](crate::output::GetQueueAttributesOutput) with field(s):
    ///   - [`attributes(Option<HashMap<QueueAttributeName, String>>)`](crate::output::GetQueueAttributesOutput::attributes): <p>A map of attributes to their respective values.</p>
    /// - On failure, responds with [`SdkError<GetQueueAttributesError>`](crate::error::GetQueueAttributesError)
    pub fn get_queue_attributes(&self) -> crate::client::fluent_builders::GetQueueAttributes {
        crate::client::fluent_builders::GetQueueAttributes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetQueueUrl`](crate::client::fluent_builders::GetQueueUrl) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_name(impl Into<String>)`](crate::client::fluent_builders::GetQueueUrl::queue_name) / [`set_queue_name(Option<String>)`](crate::client::fluent_builders::GetQueueUrl::set_queue_name): <p>The name of the queue whose URL must be fetched. Maximum 80 characters. Valid values: alphanumeric characters, hyphens (<code>-</code>), and underscores (<code>_</code>).</p>  <p>Queue URLs and names are case-sensitive.</p>
    ///   - [`queue_owner_aws_account_id(impl Into<String>)`](crate::client::fluent_builders::GetQueueUrl::queue_owner_aws_account_id) / [`set_queue_owner_aws_account_id(Option<String>)`](crate::client::fluent_builders::GetQueueUrl::set_queue_owner_aws_account_id): <p>The Amazon Web Services account ID of the account that created the queue.</p>
    /// - On success, responds with [`GetQueueUrlOutput`](crate::output::GetQueueUrlOutput) with field(s):
    ///   - [`queue_url(Option<String>)`](crate::output::GetQueueUrlOutput::queue_url): <p>The URL of the queue.</p>
    /// - On failure, responds with [`SdkError<GetQueueUrlError>`](crate::error::GetQueueUrlError)
    pub fn get_queue_url(&self) -> crate::client::fluent_builders::GetQueueUrl {
        crate::client::fluent_builders::GetQueueUrl::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDeadLetterSourceQueues`](crate::client::fluent_builders::ListDeadLetterSourceQueues) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDeadLetterSourceQueues::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::ListDeadLetterSourceQueues::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::ListDeadLetterSourceQueues::set_queue_url): <p>The URL of a dead-letter queue.</p>  <p>Queue URLs and names are case-sensitive.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDeadLetterSourceQueues::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDeadLetterSourceQueues::set_next_token): <p>Pagination token to request the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDeadLetterSourceQueues::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDeadLetterSourceQueues::set_max_results): <p>Maximum number of results to include in the response. Value range is 1 to 1000. You must set <code>MaxResults</code> to receive a value for <code>NextToken</code> in the response.</p>
    /// - On success, responds with [`ListDeadLetterSourceQueuesOutput`](crate::output::ListDeadLetterSourceQueuesOutput) with field(s):
    ///   - [`queue_urls(Option<Vec<String>>)`](crate::output::ListDeadLetterSourceQueuesOutput::queue_urls): <p>A list of source queue URLs that have the <code>RedrivePolicy</code> queue attribute configured with a dead-letter queue.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDeadLetterSourceQueuesOutput::next_token): <p>Pagination token to include in the next request. Token value is <code>null</code> if there are no additional results to request, or if you did not set <code>MaxResults</code> in the request.</p>
    /// - On failure, responds with [`SdkError<ListDeadLetterSourceQueuesError>`](crate::error::ListDeadLetterSourceQueuesError)
    pub fn list_dead_letter_source_queues(
        &self,
    ) -> crate::client::fluent_builders::ListDeadLetterSourceQueues {
        crate::client::fluent_builders::ListDeadLetterSourceQueues::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListQueues`](crate::client::fluent_builders::ListQueues) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListQueues::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_name_prefix(impl Into<String>)`](crate::client::fluent_builders::ListQueues::queue_name_prefix) / [`set_queue_name_prefix(Option<String>)`](crate::client::fluent_builders::ListQueues::set_queue_name_prefix): <p>A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned.</p>  <p>Queue URLs and names are case-sensitive.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListQueues::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListQueues::set_next_token): <p>Pagination token to request the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListQueues::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListQueues::set_max_results): <p>Maximum number of results to include in the response. Value range is 1 to 1000. You must set <code>MaxResults</code> to receive a value for <code>NextToken</code> in the response.</p>
    /// - On success, responds with [`ListQueuesOutput`](crate::output::ListQueuesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListQueuesOutput::next_token): <p>Pagination token to include in the next request. Token value is <code>null</code> if there are no additional results to request, or if you did not set <code>MaxResults</code> in the request.</p>
    ///   - [`queue_urls(Option<Vec<String>>)`](crate::output::ListQueuesOutput::queue_urls): <p>A list of queue URLs, up to 1,000 entries, or the value of MaxResults that you sent in the request.</p>
    /// - On failure, responds with [`SdkError<ListQueuesError>`](crate::error::ListQueuesError)
    pub fn list_queues(&self) -> crate::client::fluent_builders::ListQueues {
        crate::client::fluent_builders::ListQueues::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListQueueTags`](crate::client::fluent_builders::ListQueueTags) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::ListQueueTags::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::ListQueueTags::set_queue_url): <p>The URL of the queue.</p>
    /// - On success, responds with [`ListQueueTagsOutput`](crate::output::ListQueueTagsOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListQueueTagsOutput::tags): <p>The list of all tags added to the specified queue.</p>
    /// - On failure, responds with [`SdkError<ListQueueTagsError>`](crate::error::ListQueueTagsError)
    pub fn list_queue_tags(&self) -> crate::client::fluent_builders::ListQueueTags {
        crate::client::fluent_builders::ListQueueTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PurgeQueue`](crate::client::fluent_builders::PurgeQueue) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::PurgeQueue::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::PurgeQueue::set_queue_url): <p>The URL of the queue from which the <code>PurgeQueue</code> action deletes messages.</p>  <p>Queue URLs and names are case-sensitive.</p>
    /// - On success, responds with [`PurgeQueueOutput`](crate::output::PurgeQueueOutput)

    /// - On failure, responds with [`SdkError<PurgeQueueError>`](crate::error::PurgeQueueError)
    pub fn purge_queue(&self) -> crate::client::fluent_builders::PurgeQueue {
        crate::client::fluent_builders::PurgeQueue::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ReceiveMessage`](crate::client::fluent_builders::ReceiveMessage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::ReceiveMessage::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::ReceiveMessage::set_queue_url): <p>The URL of the Amazon SQS queue from which messages are received.</p>  <p>Queue URLs and names are case-sensitive.</p>
    ///   - [`attribute_names(Vec<QueueAttributeName>)`](crate::client::fluent_builders::ReceiveMessage::attribute_names) / [`set_attribute_names(Option<Vec<QueueAttributeName>>)`](crate::client::fluent_builders::ReceiveMessage::set_attribute_names): <p>A list of attributes that need to be returned along with each message. These attributes include:</p>  <ul>   <li> <p> <code>All</code> – Returns all values.</p> </li>   <li> <p> <code>ApproximateFirstReceiveTimestamp</code> – Returns the time the message was first received from the queue (<a href="http://en.wikipedia.org/wiki/Unix_time">epoch time</a> in milliseconds).</p> </li>   <li> <p> <code>ApproximateReceiveCount</code> – Returns the number of times a message has been received across all queues but not deleted.</p> </li>   <li> <p> <code>AWSTraceHeader</code> – Returns the X-Ray trace header string. </p> </li>   <li> <p> <code>SenderId</code> </p>    <ul>     <li> <p>For an IAM user, returns the IAM user ID, for example <code>ABCDEFGHI1JKLMNOPQ23R</code>.</p> </li>     <li> <p>For an IAM role, returns the IAM role ID, for example <code>ABCDE1F2GH3I4JK5LMNOP:i-a123b456</code>.</p> </li>    </ul> </li>   <li> <p> <code>SentTimestamp</code> – Returns the time the message was sent to the queue (<a href="http://en.wikipedia.org/wiki/Unix_time">epoch time</a> in milliseconds).</p> </li>   <li> <p> <code>SqsManagedSseEnabled</code> – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (e.g. <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html">SSE-KMS</a> or <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html">SSE-SQS</a>).</p> </li>   <li> <p> <code>MessageDeduplicationId</code> – Returns the value provided by the producer that calls the <code> <code>SendMessage</code> </code> action.</p> </li>   <li> <p> <code>MessageGroupId</code> – Returns the value provided by the producer that calls the <code> <code>SendMessage</code> </code> action. Messages with the same <code>MessageGroupId</code> are returned in sequence.</p> </li>   <li> <p> <code>SequenceNumber</code> – Returns the value provided by Amazon SQS.</p> </li>  </ul>
    ///   - [`message_attribute_names(Vec<String>)`](crate::client::fluent_builders::ReceiveMessage::message_attribute_names) / [`set_message_attribute_names(Option<Vec<String>>)`](crate::client::fluent_builders::ReceiveMessage::set_message_attribute_names): <p>The name of the message attribute, where <i>N</i> is the index.</p>  <ul>   <li> <p>The name can contain alphanumeric characters and the underscore (<code>_</code>), hyphen (<code>-</code>), and period (<code>.</code>).</p> </li>   <li> <p>The name is case-sensitive and must be unique among all attribute names for the message.</p> </li>   <li> <p>The name must not start with AWS-reserved prefixes such as <code>AWS.</code> or <code>Amazon.</code> (or any casing variants).</p> </li>   <li> <p>The name must not start or end with a period (<code>.</code>), and it should not have periods in succession (<code>..</code>).</p> </li>   <li> <p>The name can be up to 256 characters long.</p> </li>  </ul>  <p>When using <code>ReceiveMessage</code>, you can send a list of attribute names to receive, or you can return all of the attributes by specifying <code>All</code> or <code>.*</code> in your request. You can also use all message attributes starting with a prefix, for example <code>bar.*</code>.</p>
    ///   - [`max_number_of_messages(i32)`](crate::client::fluent_builders::ReceiveMessage::max_number_of_messages) / [`set_max_number_of_messages(i32)`](crate::client::fluent_builders::ReceiveMessage::set_max_number_of_messages): <p>The maximum number of messages to return. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10. Default: 1.</p>
    ///   - [`visibility_timeout(i32)`](crate::client::fluent_builders::ReceiveMessage::visibility_timeout) / [`set_visibility_timeout(i32)`](crate::client::fluent_builders::ReceiveMessage::set_visibility_timeout): <p>The duration (in seconds) that the received messages are hidden from subsequent retrieve requests after being retrieved by a <code>ReceiveMessage</code> request.</p>
    ///   - [`wait_time_seconds(i32)`](crate::client::fluent_builders::ReceiveMessage::wait_time_seconds) / [`set_wait_time_seconds(i32)`](crate::client::fluent_builders::ReceiveMessage::set_wait_time_seconds): <p>The duration (in seconds) for which the call waits for a message to arrive in the queue before returning. If a message is available, the call returns sooner than <code>WaitTimeSeconds</code>. If no messages are available and the wait time expires, the call returns successfully with an empty list of messages.</p> <important>   <p>To avoid HTTP errors, ensure that the HTTP response timeout for <code>ReceiveMessage</code> requests is longer than the <code>WaitTimeSeconds</code> parameter. For example, with the Java SDK, you can set HTTP transport settings using the <a href="https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/nio/netty/NettyNioAsyncHttpClient.html"> NettyNioAsyncHttpClient</a> for asynchronous clients, or the <a href="https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/http/apache/ApacheHttpClient.html"> ApacheHttpClient</a> for synchronous clients. </p>  </important>
    ///   - [`receive_request_attempt_id(impl Into<String>)`](crate::client::fluent_builders::ReceiveMessage::receive_request_attempt_id) / [`set_receive_request_attempt_id(Option<String>)`](crate::client::fluent_builders::ReceiveMessage::set_receive_request_attempt_id): <p>This parameter applies only to FIFO (first-in-first-out) queues.</p>  <p>The token used for deduplication of <code>ReceiveMessage</code> calls. If a networking issue occurs after a <code>ReceiveMessage</code> action, and instead of a response you receive a generic error, it is possible to retry the same action with an identical <code>ReceiveRequestAttemptId</code> to retrieve the same set of messages, even if their visibility timeout has not yet expired.</p>  <ul>   <li> <p>You can use <code>ReceiveRequestAttemptId</code> only for 5 minutes after a <code>ReceiveMessage</code> action.</p> </li>   <li> <p>When you set <code>FifoQueue</code>, a caller of the <code>ReceiveMessage</code> action can provide a <code>ReceiveRequestAttemptId</code> explicitly.</p> </li>   <li> <p>If a caller of the <code>ReceiveMessage</code> action doesn't provide a <code>ReceiveRequestAttemptId</code>, Amazon SQS generates a <code>ReceiveRequestAttemptId</code>.</p> </li>   <li> <p>It is possible to retry the <code>ReceiveMessage</code> action with the same <code>ReceiveRequestAttemptId</code> if none of the messages have been modified (deleted or had their visibility changes).</p> </li>   <li> <p>During a visibility timeout, subsequent calls with the same <code>ReceiveRequestAttemptId</code> return the same messages and receipt handles. If a retry occurs within the deduplication interval, it resets the visibility timeout. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">Visibility Timeout</a> in the <i>Amazon SQS Developer Guide</i>.</p> <important>     <p>If a caller of the <code>ReceiveMessage</code> action still processes messages when the visibility timeout expires and messages become visible, another worker consuming from the same queue can receive the same messages and therefore process duplicates. Also, if a consumer whose message processing time is longer than the visibility timeout tries to delete the processed messages, the action fails with an error.</p>     <p>To mitigate this effect, ensure that your application observes a safe threshold before the visibility timeout expires and extend the visibility timeout as necessary.</p>    </important> </li>   <li> <p>While messages with a particular <code>MessageGroupId</code> are invisible, no more messages belonging to the same <code>MessageGroupId</code> are returned until the visibility timeout expires. You can still receive messages with another <code>MessageGroupId</code> as long as it is also visible.</p> </li>   <li> <p>If a caller of <code>ReceiveMessage</code> can't track the <code>ReceiveRequestAttemptId</code>, no retries work until the original visibility timeout expires. As a result, delays might occur but the messages in the queue remain in a strict order.</p> </li>  </ul>  <p>The maximum length of <code>ReceiveRequestAttemptId</code> is 128 characters. <code>ReceiveRequestAttemptId</code> can contain alphanumeric characters (<code>a-z</code>, <code>A-Z</code>, <code>0-9</code>) and punctuation (<code>!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~</code>).</p>  <p>For best practices of using <code>ReceiveRequestAttemptId</code>, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-receiverequestattemptid-request-parameter.html">Using the ReceiveRequestAttemptId Request Parameter</a> in the <i>Amazon SQS Developer Guide</i>.</p>
    /// - On success, responds with [`ReceiveMessageOutput`](crate::output::ReceiveMessageOutput) with field(s):
    ///   - [`messages(Option<Vec<Message>>)`](crate::output::ReceiveMessageOutput::messages): <p>A list of messages.</p>
    /// - On failure, responds with [`SdkError<ReceiveMessageError>`](crate::error::ReceiveMessageError)
    pub fn receive_message(&self) -> crate::client::fluent_builders::ReceiveMessage {
        crate::client::fluent_builders::ReceiveMessage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RemovePermission`](crate::client::fluent_builders::RemovePermission) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::RemovePermission::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::RemovePermission::set_queue_url): <p>The URL of the Amazon SQS queue from which permissions are removed.</p>  <p>Queue URLs and names are case-sensitive.</p>
    ///   - [`label(impl Into<String>)`](crate::client::fluent_builders::RemovePermission::label) / [`set_label(Option<String>)`](crate::client::fluent_builders::RemovePermission::set_label): <p>The identification of the permission to remove. This is the label added using the <code> <code>AddPermission</code> </code> action.</p>
    /// - On success, responds with [`RemovePermissionOutput`](crate::output::RemovePermissionOutput)

    /// - On failure, responds with [`SdkError<RemovePermissionError>`](crate::error::RemovePermissionError)
    pub fn remove_permission(&self) -> crate::client::fluent_builders::RemovePermission {
        crate::client::fluent_builders::RemovePermission::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SendMessage`](crate::client::fluent_builders::SendMessage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::SendMessage::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::SendMessage::set_queue_url): <p>The URL of the Amazon SQS queue to which a message is sent.</p>  <p>Queue URLs and names are case-sensitive.</p>
    ///   - [`message_body(impl Into<String>)`](crate::client::fluent_builders::SendMessage::message_body) / [`set_message_body(Option<String>)`](crate::client::fluent_builders::SendMessage::set_message_body): <p>The message to send. The minimum size is one character. The maximum size is 256 KB.</p> <important>   <p>A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:</p>   <p> <code>#x9</code> | <code>#xA</code> | <code>#xD</code> | <code>#x20</code> to <code>#xD7FF</code> | <code>#xE000</code> to <code>#xFFFD</code> | <code>#x10000</code> to <code>#x10FFFF</code> </p>   <p>Any characters not included in this list will be rejected. For more information, see the <a href="http://www.w3.org/TR/REC-xml/#charsets">W3C specification for characters</a>.</p>  </important>
    ///   - [`delay_seconds(i32)`](crate::client::fluent_builders::SendMessage::delay_seconds) / [`set_delay_seconds(i32)`](crate::client::fluent_builders::SendMessage::set_delay_seconds): <p> The length of time, in seconds, for which to delay a specific message. Valid values: 0 to 900. Maximum: 15 minutes. Messages with a positive <code>DelaySeconds</code> value become available for processing after the delay period is finished. If you don't specify a value, the default value for the queue applies. </p> <note>   <p>When you set <code>FifoQueue</code>, you can't set <code>DelaySeconds</code> per message. You can set this parameter only on a queue level.</p>  </note>
    ///   - [`message_attributes(HashMap<String, MessageAttributeValue>)`](crate::client::fluent_builders::SendMessage::message_attributes) / [`set_message_attributes(Option<HashMap<String, MessageAttributeValue>>)`](crate::client::fluent_builders::SendMessage::set_message_attributes): <p>Each message attribute consists of a <code>Name</code>, <code>Type</code>, and <code>Value</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-message-metadata.html#sqs-message-attributes">Amazon SQS message attributes</a> in the <i>Amazon SQS Developer Guide</i>.</p>
    ///   - [`message_system_attributes(HashMap<MessageSystemAttributeNameForSends, MessageSystemAttributeValue>)`](crate::client::fluent_builders::SendMessage::message_system_attributes) / [`set_message_system_attributes(Option<HashMap<MessageSystemAttributeNameForSends, MessageSystemAttributeValue>>)`](crate::client::fluent_builders::SendMessage::set_message_system_attributes): <p>The message system attribute to send. Each message system attribute consists of a <code>Name</code>, <code>Type</code>, and <code>Value</code>.</p> <important>   <ul>    <li> <p>Currently, the only supported message system attribute is <code>AWSTraceHeader</code>. Its type must be <code>String</code> and its value must be a correctly formatted X-Ray trace header string.</p> </li>    <li> <p>The size of a message system attribute doesn't count towards the total size of a message.</p> </li>   </ul>  </important>
    ///   - [`message_deduplication_id(impl Into<String>)`](crate::client::fluent_builders::SendMessage::message_deduplication_id) / [`set_message_deduplication_id(Option<String>)`](crate::client::fluent_builders::SendMessage::set_message_deduplication_id): <p>This parameter applies only to FIFO (first-in-first-out) queues.</p>  <p>The token used for deduplication of sent messages. If a message with a particular <code>MessageDeduplicationId</code> is sent successfully, any messages sent with the same <code>MessageDeduplicationId</code> are accepted successfully but aren't delivered during the 5-minute deduplication interval. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html"> Exactly-once processing</a> in the <i>Amazon SQS Developer Guide</i>.</p>  <ul>   <li> <p>Every message must have a unique <code>MessageDeduplicationId</code>,</p>    <ul>     <li> <p>You may provide a <code>MessageDeduplicationId</code> explicitly.</p> </li>     <li> <p>If you aren't able to provide a <code>MessageDeduplicationId</code> and you enable <code>ContentBasedDeduplication</code> for your queue, Amazon SQS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using the body of the message (but not the attributes of the message). </p> </li>     <li> <p>If you don't provide a <code>MessageDeduplicationId</code> and the queue doesn't have <code>ContentBasedDeduplication</code> set, the action fails with an error.</p> </li>     <li> <p>If the queue has <code>ContentBasedDeduplication</code> set, your <code>MessageDeduplicationId</code> overrides the generated one.</p> </li>    </ul> </li>   <li> <p>When <code>ContentBasedDeduplication</code> is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.</p> </li>   <li> <p>If you send one message with <code>ContentBasedDeduplication</code> enabled and then another message with a <code>MessageDeduplicationId</code> that is the same as the one generated for the first <code>MessageDeduplicationId</code>, the two messages are treated as duplicates and only one copy of the message is delivered. </p> </li>  </ul> <note>   <p>The <code>MessageDeduplicationId</code> is available to the consumer of the message (this can be useful for troubleshooting delivery issues).</p>   <p>If a message is sent successfully but the acknowledgement is lost and the message is resent with the same <code>MessageDeduplicationId</code> after the deduplication interval, Amazon SQS can't detect duplicate messages.</p>   <p>Amazon SQS continues to keep track of the message deduplication ID even after the message is received and deleted.</p>  </note>  <p>The maximum length of <code>MessageDeduplicationId</code> is 128 characters. <code>MessageDeduplicationId</code> can contain alphanumeric characters (<code>a-z</code>, <code>A-Z</code>, <code>0-9</code>) and punctuation (<code>!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~</code>).</p>  <p>For best practices of using <code>MessageDeduplicationId</code>, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html">Using the MessageDeduplicationId Property</a> in the <i>Amazon SQS Developer Guide</i>.</p>
    ///   - [`message_group_id(impl Into<String>)`](crate::client::fluent_builders::SendMessage::message_group_id) / [`set_message_group_id(Option<String>)`](crate::client::fluent_builders::SendMessage::set_message_group_id): <p>This parameter applies only to FIFO (first-in-first-out) queues.</p>  <p>The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). To interleave multiple ordered streams within a single queue, use <code>MessageGroupId</code> values (for example, session data for multiple users). In this scenario, multiple consumers can process the queue, but the session data of each user is processed in a FIFO fashion.</p>  <ul>   <li> <p>You must associate a non-empty <code>MessageGroupId</code> with a message. If you don't provide a <code>MessageGroupId</code>, the action fails.</p> </li>   <li> <p> <code>ReceiveMessage</code> might return messages with multiple <code>MessageGroupId</code> values. For each <code>MessageGroupId</code>, the messages are sorted by time sent. The caller can't specify a <code>MessageGroupId</code>.</p> </li>  </ul>  <p>The length of <code>MessageGroupId</code> is 128 characters. Valid values: alphanumeric characters and punctuation <code>(!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~)</code>.</p>  <p>For best practices of using <code>MessageGroupId</code>, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagegroupid-property.html">Using the MessageGroupId Property</a> in the <i>Amazon SQS Developer Guide</i>.</p> <important>   <p> <code>MessageGroupId</code> is required for FIFO queues. You can't use it for Standard queues.</p>  </important>
    /// - On success, responds with [`SendMessageOutput`](crate::output::SendMessageOutput) with field(s):
    ///   - [`md5_of_message_body(Option<String>)`](crate::output::SendMessageOutput::md5_of_message_body): <p>An MD5 digest of the non-URL-encoded message body string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see <a href="https://www.ietf.org/rfc/rfc1321.txt">RFC1321</a>.</p>
    ///   - [`md5_of_message_attributes(Option<String>)`](crate::output::SendMessageOutput::md5_of_message_attributes): <p>An MD5 digest of the non-URL-encoded message attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see <a href="https://www.ietf.org/rfc/rfc1321.txt">RFC1321</a>.</p>
    ///   - [`md5_of_message_system_attributes(Option<String>)`](crate::output::SendMessageOutput::md5_of_message_system_attributes): <p>An MD5 digest of the non-URL-encoded message system attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest.</p>
    ///   - [`message_id(Option<String>)`](crate::output::SendMessageOutput::message_id): <p>An attribute containing the <code>MessageId</code> of the message sent to the queue. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-queue-message-identifiers.html">Queue and Message Identifiers</a> in the <i>Amazon SQS Developer Guide</i>. </p>
    ///   - [`sequence_number(Option<String>)`](crate::output::SendMessageOutput::sequence_number): <p>This parameter applies only to FIFO (first-in-first-out) queues.</p>  <p>The large, non-consecutive number that Amazon SQS assigns to each message.</p>  <p>The length of <code>SequenceNumber</code> is 128 bits. <code>SequenceNumber</code> continues to increase for a particular <code>MessageGroupId</code>.</p>
    /// - On failure, responds with [`SdkError<SendMessageError>`](crate::error::SendMessageError)
    pub fn send_message(&self) -> crate::client::fluent_builders::SendMessage {
        crate::client::fluent_builders::SendMessage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SendMessageBatch`](crate::client::fluent_builders::SendMessageBatch) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::SendMessageBatch::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::SendMessageBatch::set_queue_url): <p>The URL of the Amazon SQS queue to which batched messages are sent.</p>  <p>Queue URLs and names are case-sensitive.</p>
    ///   - [`entries(Vec<SendMessageBatchRequestEntry>)`](crate::client::fluent_builders::SendMessageBatch::entries) / [`set_entries(Option<Vec<SendMessageBatchRequestEntry>>)`](crate::client::fluent_builders::SendMessageBatch::set_entries): <p>A list of <code> <code>SendMessageBatchRequestEntry</code> </code> items.</p>
    /// - On success, responds with [`SendMessageBatchOutput`](crate::output::SendMessageBatchOutput) with field(s):
    ///   - [`successful(Option<Vec<SendMessageBatchResultEntry>>)`](crate::output::SendMessageBatchOutput::successful): <p>A list of <code> <code>SendMessageBatchResultEntry</code> </code> items.</p>
    ///   - [`failed(Option<Vec<BatchResultErrorEntry>>)`](crate::output::SendMessageBatchOutput::failed): <p>A list of <code> <code>BatchResultErrorEntry</code> </code> items with error details about each message that can't be enqueued.</p>
    /// - On failure, responds with [`SdkError<SendMessageBatchError>`](crate::error::SendMessageBatchError)
    pub fn send_message_batch(&self) -> crate::client::fluent_builders::SendMessageBatch {
        crate::client::fluent_builders::SendMessageBatch::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`SetQueueAttributes`](crate::client::fluent_builders::SetQueueAttributes) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::SetQueueAttributes::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::SetQueueAttributes::set_queue_url): <p>The URL of the Amazon SQS queue whose attributes are set.</p>  <p>Queue URLs and names are case-sensitive.</p>
    ///   - [`attributes(HashMap<QueueAttributeName, String>)`](crate::client::fluent_builders::SetQueueAttributes::attributes) / [`set_attributes(Option<HashMap<QueueAttributeName, String>>)`](crate::client::fluent_builders::SetQueueAttributes::set_attributes): <p>A map of attributes to set.</p>  <p>The following lists the names, descriptions, and values of the special request parameters that the <code>SetQueueAttributes</code> action uses:</p>  <ul>   <li> <p> <code>DelaySeconds</code> – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 (15 minutes). Default: 0. </p> </li>   <li> <p> <code>MaximumMessageSize</code> – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) up to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB). </p> </li>   <li> <p> <code>MessageRetentionPeriod</code> – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer representing seconds, from 60 (1 minute) to 1,209,600 (14 days). Default: 345,600 (4 days). </p> </li>   <li> <p> <code>Policy</code> – The queue's policy. A valid Amazon Web Services policy. For more information about policy structure, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PoliciesOverview.html">Overview of Amazon Web Services IAM Policies</a> in the <i>Identity and Access Management User Guide</i>. </p> </li>   <li> <p> <code>ReceiveMessageWaitTimeSeconds</code> – The length of time, in seconds, for which a <code> <code>ReceiveMessage</code> </code> action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0. </p> </li>   <li> <p> <code>RedrivePolicy</code> – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. For more information about the redrive policy and dead-letter queues, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html">Using Amazon SQS Dead-Letter Queues</a> in the <i>Amazon SQS Developer Guide</i>.</p>    <ul>     <li> <p> <code>deadLetterTargetArn</code> – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of <code>maxReceiveCount</code> is exceeded.</p> </li>     <li> <p> <code>maxReceiveCount</code> – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. When the <code>ReceiveCount</code> for a message exceeds the <code>maxReceiveCount</code> for a queue, Amazon SQS moves the message to the dead-letter-queue.</p> </li>    </ul> <note>     <p>The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.</p>    </note> </li>   <li> <p> <code>VisibilityTimeout</code> – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-visibility-timeout.html">Visibility Timeout</a> in the <i>Amazon SQS Developer Guide</i>.</p> </li>  </ul>  <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html">server-side-encryption</a>:</p>  <ul>   <li> <p> <code>KmsMasterKeyId</code> – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-sse-key-terms">Key Terms</a>. While the alias of the AWS-managed CMK for Amazon SQS is always <code>alias/aws/sqs</code>, the alias of a custom CMK can, for example, be <code>alias/<i>MyAlias</i> </code>. For more examples, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters">KeyId</a> in the <i>Key Management Service API Reference</i>. </p> </li>   <li> <p> <code>KmsDataKeyReusePeriodSeconds</code> – The length of time, in seconds, for which Amazon SQS can reuse a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#data-keys">data key</a> to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html#sqs-how-does-the-data-key-reuse-period-work">How Does the Data Key Reuse Period Work?</a>. </p> </li>   <li> <p> <code>SqsManagedSseEnabled</code> – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (e.g. <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html">SSE-KMS</a> or <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sqs-sse-queue.html">SSE-SQS</a>).</p> </li>  </ul>  <p>The following attribute applies only to <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html">FIFO (first-in-first-out) queues</a>:</p>  <ul>   <li> <p> <code>ContentBasedDeduplication</code> – Enables content-based deduplication. For more information, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues-exactly-once-processing.html">Exactly-once processing</a> in the <i>Amazon SQS Developer Guide</i>. Note the following: </p>    <ul>     <li> <p>Every message must have a unique <code>MessageDeduplicationId</code>.</p>      <ul>       <li> <p>You may provide a <code>MessageDeduplicationId</code> explicitly.</p> </li>       <li> <p>If you aren't able to provide a <code>MessageDeduplicationId</code> and you enable <code>ContentBasedDeduplication</code> for your queue, Amazon SQS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using the body of the message (but not the attributes of the message). </p> </li>       <li> <p>If you don't provide a <code>MessageDeduplicationId</code> and the queue doesn't have <code>ContentBasedDeduplication</code> set, the action fails with an error.</p> </li>       <li> <p>If the queue has <code>ContentBasedDeduplication</code> set, your <code>MessageDeduplicationId</code> overrides the generated one.</p> </li>      </ul> </li>     <li> <p>When <code>ContentBasedDeduplication</code> is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.</p> </li>     <li> <p>If you send one message with <code>ContentBasedDeduplication</code> enabled and then another message with a <code>MessageDeduplicationId</code> that is the same as the one generated for the first <code>MessageDeduplicationId</code>, the two messages are treated as duplicates and only one copy of the message is delivered. </p> </li>    </ul> </li>  </ul>  <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/high-throughput-fifo.html">high throughput for FIFO queues</a>:</p>  <ul>   <li> <p> <code>DeduplicationScope</code> – Specifies whether message deduplication occurs at the message group or queue level. Valid values are <code>messageGroup</code> and <code>queue</code>.</p> </li>   <li> <p> <code>FifoThroughputLimit</code> – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are <code>perQueue</code> and <code>perMessageGroupId</code>. The <code>perMessageGroupId</code> value is allowed only when the value for <code>DeduplicationScope</code> is <code>messageGroup</code>.</p> </li>  </ul>  <p>To enable high throughput for FIFO queues, do the following:</p>  <ul>   <li> <p>Set <code>DeduplicationScope</code> to <code>messageGroup</code>.</p> </li>   <li> <p>Set <code>FifoThroughputLimit</code> to <code>perMessageGroupId</code>.</p> </li>  </ul>  <p>If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified.</p>  <p>For information on throughput quotas, see <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html">Quotas related to messages</a> in the <i>Amazon SQS Developer Guide</i>.</p>
    /// - On success, responds with [`SetQueueAttributesOutput`](crate::output::SetQueueAttributesOutput)

    /// - On failure, responds with [`SdkError<SetQueueAttributesError>`](crate::error::SetQueueAttributesError)
    pub fn set_queue_attributes(&self) -> crate::client::fluent_builders::SetQueueAttributes {
        crate::client::fluent_builders::SetQueueAttributes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagQueue`](crate::client::fluent_builders::TagQueue) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::TagQueue::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::TagQueue::set_queue_url): <p>The URL of the queue.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagQueue::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagQueue::set_tags): <p>The list of tags to be added to the specified queue.</p>
    /// - On success, responds with [`TagQueueOutput`](crate::output::TagQueueOutput)

    /// - On failure, responds with [`SdkError<TagQueueError>`](crate::error::TagQueueError)
    pub fn tag_queue(&self) -> crate::client::fluent_builders::TagQueue {
        crate::client::fluent_builders::TagQueue::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagQueue`](crate::client::fluent_builders::UntagQueue) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::client::fluent_builders::UntagQueue::queue_url) / [`set_queue_url(Option<String>)`](crate::client::fluent_builders::UntagQueue::set_queue_url): <p>The URL of the queue.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagQueue::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagQueue::set_tag_keys): <p>The list of tags to be removed from the specified queue.</p>
    /// - On success, responds with [`UntagQueueOutput`](crate::output::UntagQueueOutput)

    /// - On failure, responds with [`SdkError<UntagQueueError>`](crate::error::UntagQueueError)
    pub fn untag_queue(&self) -> crate::client::fluent_builders::UntagQueue {
        crate::client::fluent_builders::UntagQueue::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
