// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SendMessageBatchInput {
    /// <p>The URL of the Amazon SQS queue to which batched messages are sent.</p>
    /// <p>Queue URLs and names are case-sensitive.</p>
    pub queue_url: ::std::option::Option<::std::string::String>,
    /// <p>A list of <code> <code>SendMessageBatchRequestEntry</code> </code> items.</p>
    pub entries: ::std::option::Option<::std::vec::Vec<crate::types::SendMessageBatchRequestEntry>>,
}
impl SendMessageBatchInput {
    /// <p>The URL of the Amazon SQS queue to which batched messages are sent.</p>
    /// <p>Queue URLs and names are case-sensitive.</p>
    pub fn queue_url(&self) -> ::std::option::Option<&str> {
        self.queue_url.as_deref()
    }
    /// <p>A list of <code> <code>SendMessageBatchRequestEntry</code> </code> items.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.entries.is_none()`.
    pub fn entries(&self) -> &[crate::types::SendMessageBatchRequestEntry] {
        self.entries.as_deref().unwrap_or_default()
    }
}
impl SendMessageBatchInput {
    /// Creates a new builder-style object to manufacture [`SendMessageBatchInput`](crate::operation::send_message_batch::SendMessageBatchInput).
    pub fn builder() -> crate::operation::send_message_batch::builders::SendMessageBatchInputBuilder {
        crate::operation::send_message_batch::builders::SendMessageBatchInputBuilder::default()
    }
}

/// A builder for [`SendMessageBatchInput`](crate::operation::send_message_batch::SendMessageBatchInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SendMessageBatchInputBuilder {
    pub(crate) queue_url: ::std::option::Option<::std::string::String>,
    pub(crate) entries: ::std::option::Option<::std::vec::Vec<crate::types::SendMessageBatchRequestEntry>>,
}
impl SendMessageBatchInputBuilder {
    /// <p>The URL of the Amazon SQS queue to which batched messages are sent.</p>
    /// <p>Queue URLs and names are case-sensitive.</p>
    /// This field is required.
    pub fn queue_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.queue_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL of the Amazon SQS queue to which batched messages are sent.</p>
    /// <p>Queue URLs and names are case-sensitive.</p>
    pub fn set_queue_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.queue_url = input;
        self
    }
    /// <p>The URL of the Amazon SQS queue to which batched messages are sent.</p>
    /// <p>Queue URLs and names are case-sensitive.</p>
    pub fn get_queue_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.queue_url
    }
    /// Appends an item to `entries`.
    ///
    /// To override the contents of this collection use [`set_entries`](Self::set_entries).
    ///
    /// <p>A list of <code> <code>SendMessageBatchRequestEntry</code> </code> items.</p>
    pub fn entries(mut self, input: crate::types::SendMessageBatchRequestEntry) -> Self {
        let mut v = self.entries.unwrap_or_default();
        v.push(input);
        self.entries = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code> <code>SendMessageBatchRequestEntry</code> </code> items.</p>
    pub fn set_entries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SendMessageBatchRequestEntry>>) -> Self {
        self.entries = input;
        self
    }
    /// <p>A list of <code> <code>SendMessageBatchRequestEntry</code> </code> items.</p>
    pub fn get_entries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SendMessageBatchRequestEntry>> {
        &self.entries
    }
    /// Consumes the builder and constructs a [`SendMessageBatchInput`](crate::operation::send_message_batch::SendMessageBatchInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::send_message_batch::SendMessageBatchInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::send_message_batch::SendMessageBatchInput {
            queue_url: self.queue_url,
            entries: self.entries,
        })
    }
}
