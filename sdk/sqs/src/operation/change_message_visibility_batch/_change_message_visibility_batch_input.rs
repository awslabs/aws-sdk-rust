// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ChangeMessageVisibilityBatchInput {
    /// <p>The URL of the Amazon SQS queue whose messages' visibility is changed.</p>
    /// <p>Queue URLs and names are case-sensitive.</p>
    #[doc(hidden)]
    pub queue_url: std::option::Option<std::string::String>,
    /// <p>A list of receipt handles of the messages for which the visibility timeout must be changed.</p>
    #[doc(hidden)]
    pub entries:
        std::option::Option<std::vec::Vec<crate::types::ChangeMessageVisibilityBatchRequestEntry>>,
}
impl ChangeMessageVisibilityBatchInput {
    /// <p>The URL of the Amazon SQS queue whose messages' visibility is changed.</p>
    /// <p>Queue URLs and names are case-sensitive.</p>
    pub fn queue_url(&self) -> std::option::Option<&str> {
        self.queue_url.as_deref()
    }
    /// <p>A list of receipt handles of the messages for which the visibility timeout must be changed.</p>
    pub fn entries(
        &self,
    ) -> std::option::Option<&[crate::types::ChangeMessageVisibilityBatchRequestEntry]> {
        self.entries.as_deref()
    }
}
impl ChangeMessageVisibilityBatchInput {
    /// Creates a new builder-style object to manufacture [`ChangeMessageVisibilityBatchInput`](crate::operation::change_message_visibility_batch::ChangeMessageVisibilityBatchInput).
    pub fn builder() -> crate::operation::change_message_visibility_batch::builders::ChangeMessageVisibilityBatchInputBuilder{
        crate::operation::change_message_visibility_batch::builders::ChangeMessageVisibilityBatchInputBuilder::default()
    }
}

/// A builder for [`ChangeMessageVisibilityBatchInput`](crate::operation::change_message_visibility_batch::ChangeMessageVisibilityBatchInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChangeMessageVisibilityBatchInputBuilder {
    pub(crate) queue_url: std::option::Option<std::string::String>,
    pub(crate) entries:
        std::option::Option<std::vec::Vec<crate::types::ChangeMessageVisibilityBatchRequestEntry>>,
}
impl ChangeMessageVisibilityBatchInputBuilder {
    /// <p>The URL of the Amazon SQS queue whose messages' visibility is changed.</p>
    /// <p>Queue URLs and names are case-sensitive.</p>
    pub fn queue_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.queue_url = Some(input.into());
        self
    }
    /// <p>The URL of the Amazon SQS queue whose messages' visibility is changed.</p>
    /// <p>Queue URLs and names are case-sensitive.</p>
    pub fn set_queue_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.queue_url = input;
        self
    }
    /// Appends an item to `entries`.
    ///
    /// To override the contents of this collection use [`set_entries`](Self::set_entries).
    ///
    /// <p>A list of receipt handles of the messages for which the visibility timeout must be changed.</p>
    pub fn entries(
        mut self,
        input: crate::types::ChangeMessageVisibilityBatchRequestEntry,
    ) -> Self {
        let mut v = self.entries.unwrap_or_default();
        v.push(input);
        self.entries = Some(v);
        self
    }
    /// <p>A list of receipt handles of the messages for which the visibility timeout must be changed.</p>
    pub fn set_entries(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::ChangeMessageVisibilityBatchRequestEntry>,
        >,
    ) -> Self {
        self.entries = input;
        self
    }
    /// Consumes the builder and constructs a [`ChangeMessageVisibilityBatchInput`](crate::operation::change_message_visibility_batch::ChangeMessageVisibilityBatchInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::change_message_visibility_batch::ChangeMessageVisibilityBatchInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::change_message_visibility_batch::ChangeMessageVisibilityBatchInput {
                queue_url: self.queue_url,
                entries: self.entries,
            },
        )
    }
}
