// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn parse_generic_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<smithy_types::Error, smithy_xml::decode::XmlError> {
    crate::rest_xml_wrapped_errors::parse_generic_error(response.body().as_ref())
}

#[allow(unused_mut)]
pub fn over_limit(
    inp: &[u8],
    mut builder: crate::error::over_limit::Builder,
) -> Result<crate::error::over_limit::Builder, smithy_xml::decode::XmlError> {
    let _ = inp;
    Ok(builder)
}

#[allow(unused_mut)]
pub fn message_not_inflight(
    inp: &[u8],
    mut builder: crate::error::message_not_inflight::Builder,
) -> Result<crate::error::message_not_inflight::Builder, smithy_xml::decode::XmlError> {
    let _ = inp;
    Ok(builder)
}

#[allow(unused_mut)]
pub fn receipt_handle_is_invalid(
    inp: &[u8],
    mut builder: crate::error::receipt_handle_is_invalid::Builder,
) -> Result<crate::error::receipt_handle_is_invalid::Builder, smithy_xml::decode::XmlError> {
    let _ = inp;
    Ok(builder)
}

#[allow(unused_mut)]
pub fn batch_entry_ids_not_distinct(
    inp: &[u8],
    mut builder: crate::error::batch_entry_ids_not_distinct::Builder,
) -> Result<crate::error::batch_entry_ids_not_distinct::Builder, smithy_xml::decode::XmlError> {
    let _ = inp;
    Ok(builder)
}

#[allow(unused_mut)]
pub fn empty_batch_request(
    inp: &[u8],
    mut builder: crate::error::empty_batch_request::Builder,
) -> Result<crate::error::empty_batch_request::Builder, smithy_xml::decode::XmlError> {
    let _ = inp;
    Ok(builder)
}

#[allow(unused_mut)]
pub fn invalid_batch_entry_id(
    inp: &[u8],
    mut builder: crate::error::invalid_batch_entry_id::Builder,
) -> Result<crate::error::invalid_batch_entry_id::Builder, smithy_xml::decode::XmlError> {
    let _ = inp;
    Ok(builder)
}

#[allow(unused_mut)]
pub fn too_many_entries_in_batch_request(
    inp: &[u8],
    mut builder: crate::error::too_many_entries_in_batch_request::Builder,
) -> Result<crate::error::too_many_entries_in_batch_request::Builder, smithy_xml::decode::XmlError>
{
    let _ = inp;
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_change_message_visibility_batch(
    inp: &[u8],
    mut builder: crate::output::change_message_visibility_batch_output::Builder,
) -> Result<
    crate::output::change_message_visibility_batch_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ChangeMessageVisibilityBatchResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ChangeMessageVisibilityBatchResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ChangeMessageVisibilityBatchResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ChangeMessageVisibilityBatchResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("ChangeMessageVisibilityBatchResultEntry") /* Successful com.amazonaws.sqs#ChangeMessageVisibilityBatchOutput$Successful */ =>  {
                let var_1 =
                    Some(
                        Result::<std::vec::Vec<crate::model::ChangeMessageVisibilityBatchResultEntry>, smithy_xml::decode::XmlError>::Ok({
                            let mut list_2 = builder.successful.take().unwrap_or_default();
                            list_2.push(
                                crate::xml_deser::change_message_visibility_batch_result_entry_inner(&mut tag)
                                ?
                            );
                            list_2
                        })
                        ?
                    )
                ;
                builder = builder.set_successful(var_1);
            }
            ,
            s if s.matches("BatchResultErrorEntry") /* Failed com.amazonaws.sqs#ChangeMessageVisibilityBatchOutput$Failed */ =>  {
                let var_3 =
                    Some(
                        Result::<std::vec::Vec<crate::model::BatchResultErrorEntry>, smithy_xml::decode::XmlError>::Ok({
                            let mut list_4 = builder.failed.take().unwrap_or_default();
                            list_4.push(
                                crate::xml_deser::batch_result_error_entry_inner(&mut tag)
                                ?
                            );
                            list_4
                        })
                        ?
                    )
                ;
                builder = builder.set_failed(var_3);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ChangeMessageVisibilityBatchResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn queue_deleted_recently(
    inp: &[u8],
    mut builder: crate::error::queue_deleted_recently::Builder,
) -> Result<crate::error::queue_deleted_recently::Builder, smithy_xml::decode::XmlError> {
    let _ = inp;
    Ok(builder)
}

#[allow(unused_mut)]
pub fn queue_name_exists(
    inp: &[u8],
    mut builder: crate::error::queue_name_exists::Builder,
) -> Result<crate::error::queue_name_exists::Builder, smithy_xml::decode::XmlError> {
    let _ = inp;
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_create_queue(
    inp: &[u8],
    mut builder: crate::output::create_queue_output::Builder,
) -> Result<crate::output::create_queue_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("CreateQueueResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected CreateQueueResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("CreateQueueResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected CreateQueueResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("QueueUrl") /* QueueUrl com.amazonaws.sqs#CreateQueueOutput$QueueUrl */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_queue_url(var_5);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected CreateQueueResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn invalid_id_format(
    inp: &[u8],
    mut builder: crate::error::invalid_id_format::Builder,
) -> Result<crate::error::invalid_id_format::Builder, smithy_xml::decode::XmlError> {
    let _ = inp;
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_delete_message_batch(
    inp: &[u8],
    mut builder: crate::output::delete_message_batch_output::Builder,
) -> Result<crate::output::delete_message_batch_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DeleteMessageBatchResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DeleteMessageBatchResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DeleteMessageBatchResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DeleteMessageBatchResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DeleteMessageBatchResultEntry") /* Successful com.amazonaws.sqs#DeleteMessageBatchOutput$Successful */ =>  {
                let var_6 =
                    Some(
                        Result::<std::vec::Vec<crate::model::DeleteMessageBatchResultEntry>, smithy_xml::decode::XmlError>::Ok({
                            let mut list_7 = builder.successful.take().unwrap_or_default();
                            list_7.push(
                                crate::xml_deser::delete_message_batch_result_entry_inner(&mut tag)
                                ?
                            );
                            list_7
                        })
                        ?
                    )
                ;
                builder = builder.set_successful(var_6);
            }
            ,
            s if s.matches("BatchResultErrorEntry") /* Failed com.amazonaws.sqs#DeleteMessageBatchOutput$Failed */ =>  {
                let var_8 =
                    Some(
                        Result::<std::vec::Vec<crate::model::BatchResultErrorEntry>, smithy_xml::decode::XmlError>::Ok({
                            let mut list_9 = builder.failed.take().unwrap_or_default();
                            list_9.push(
                                crate::xml_deser::batch_result_error_entry_inner(&mut tag)
                                ?
                            );
                            list_9
                        })
                        ?
                    )
                ;
                builder = builder.set_failed(var_8);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DeleteMessageBatchResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn invalid_attribute_name(
    inp: &[u8],
    mut builder: crate::error::invalid_attribute_name::Builder,
) -> Result<crate::error::invalid_attribute_name::Builder, smithy_xml::decode::XmlError> {
    let _ = inp;
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_queue_attributes(
    inp: &[u8],
    mut builder: crate::output::get_queue_attributes_output::Builder,
) -> Result<crate::output::get_queue_attributes_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetQueueAttributesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetQueueAttributesResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("GetQueueAttributesResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected GetQueueAttributesResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Attribute") /* Attributes com.amazonaws.sqs#GetQueueAttributesOutput$Attributes */ =>  {
                let var_10 =
                    Some(
                        Result::<std::collections::HashMap<crate::model::QueueAttributeName, std::string::String>, smithy_xml::decode::XmlError>::Ok({
                            let mut map_11 = builder.attributes.take().unwrap_or_default();
                                        crate::xml_deser::queue_attribute_map_entry(&mut tag, &mut map_11)?;
                                        map_11
                        })
                        ?
                    )
                ;
                builder = builder.set_attributes(var_10);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected GetQueueAttributesResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn queue_does_not_exist(
    inp: &[u8],
    mut builder: crate::error::queue_does_not_exist::Builder,
) -> Result<crate::error::queue_does_not_exist::Builder, smithy_xml::decode::XmlError> {
    let _ = inp;
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_queue_url(
    inp: &[u8],
    mut builder: crate::output::get_queue_url_output::Builder,
) -> Result<crate::output::get_queue_url_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetQueueUrlResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetQueueUrlResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("GetQueueUrlResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected GetQueueUrlResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("QueueUrl") /* QueueUrl com.amazonaws.sqs#GetQueueUrlOutput$QueueUrl */ =>  {
                let var_12 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_queue_url(var_12);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected GetQueueUrlResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_dead_letter_source_queues(
    inp: &[u8],
    mut builder: crate::output::list_dead_letter_source_queues_output::Builder,
) -> Result<
    crate::output::list_dead_letter_source_queues_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListDeadLetterSourceQueuesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListDeadLetterSourceQueuesResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListDeadLetterSourceQueuesResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ListDeadLetterSourceQueuesResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("QueueUrl") /* queueUrls com.amazonaws.sqs#ListDeadLetterSourceQueuesOutput$queueUrls */ =>  {
                let var_13 =
                    Some(
                        Result::<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError>::Ok({
                            let mut list_14 = builder.queue_urls.take().unwrap_or_default();
                            list_14.push(
                                Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                                    smithy_xml::decode::try_data(&mut tag)?.as_ref()
                                    .into()
                                )
                                ?
                            );
                            list_14
                        })
                        ?
                    )
                ;
                builder = builder.set_queue_urls(var_13);
            }
            ,
            s if s.matches("NextToken") /* NextToken com.amazonaws.sqs#ListDeadLetterSourceQueuesOutput$NextToken */ =>  {
                let var_15 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_15);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ListDeadLetterSourceQueuesResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_queues(
    inp: &[u8],
    mut builder: crate::output::list_queues_output::Builder,
) -> Result<crate::output::list_queues_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListQueuesResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListQueuesResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListQueuesResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ListQueuesResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("NextToken") /* NextToken com.amazonaws.sqs#ListQueuesOutput$NextToken */ =>  {
                let var_16 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_token(var_16);
            }
            ,
            s if s.matches("QueueUrl") /* QueueUrls com.amazonaws.sqs#ListQueuesOutput$QueueUrls */ =>  {
                let var_17 =
                    Some(
                        Result::<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError>::Ok({
                            let mut list_18 = builder.queue_urls.take().unwrap_or_default();
                            list_18.push(
                                Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                                    smithy_xml::decode::try_data(&mut tag)?.as_ref()
                                    .into()
                                )
                                ?
                            );
                            list_18
                        })
                        ?
                    )
                ;
                builder = builder.set_queue_urls(var_17);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ListQueuesResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_list_queue_tags(
    inp: &[u8],
    mut builder: crate::output::list_queue_tags_output::Builder,
) -> Result<crate::output::list_queue_tags_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ListQueueTagsResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ListQueueTagsResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ListQueueTagsResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ListQueueTagsResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Tag") /* Tags com.amazonaws.sqs#ListQueueTagsOutput$Tags */ =>  {
                let var_19 =
                    Some(
                        Result::<std::collections::HashMap<std::string::String, std::string::String>, smithy_xml::decode::XmlError>::Ok({
                            let mut map_20 = builder.tags.take().unwrap_or_default();
                                        crate::xml_deser::tag_map_entry(&mut tag, &mut map_20)?;
                                        map_20
                        })
                        ?
                    )
                ;
                builder = builder.set_tags(var_19);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ListQueueTagsResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn purge_queue_in_progress(
    inp: &[u8],
    mut builder: crate::error::purge_queue_in_progress::Builder,
) -> Result<crate::error::purge_queue_in_progress::Builder, smithy_xml::decode::XmlError> {
    let _ = inp;
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_receive_message(
    inp: &[u8],
    mut builder: crate::output::receive_message_output::Builder,
) -> Result<crate::output::receive_message_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("ReceiveMessageResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected ReceiveMessageResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("ReceiveMessageResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected ReceiveMessageResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Message") /* Messages com.amazonaws.sqs#ReceiveMessageOutput$Messages */ =>  {
                let var_21 =
                    Some(
                        Result::<std::vec::Vec<crate::model::Message>, smithy_xml::decode::XmlError>::Ok({
                            let mut list_22 = builder.messages.take().unwrap_or_default();
                            list_22.push(
                                crate::xml_deser::message_inner(&mut tag)
                                ?
                            );
                            list_22
                        })
                        ?
                    )
                ;
                builder = builder.set_messages(var_21);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected ReceiveMessageResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn invalid_message_contents(
    inp: &[u8],
    mut builder: crate::error::invalid_message_contents::Builder,
) -> Result<crate::error::invalid_message_contents::Builder, smithy_xml::decode::XmlError> {
    let _ = inp;
    Ok(builder)
}

#[allow(unused_mut)]
pub fn unsupported_operation(
    inp: &[u8],
    mut builder: crate::error::unsupported_operation::Builder,
) -> Result<crate::error::unsupported_operation::Builder, smithy_xml::decode::XmlError> {
    let _ = inp;
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_send_message(
    inp: &[u8],
    mut builder: crate::output::send_message_output::Builder,
) -> Result<crate::output::send_message_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("SendMessageResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected SendMessageResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("SendMessageResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected SendMessageResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("MD5OfMessageBody") /* MD5OfMessageBody com.amazonaws.sqs#SendMessageOutput$MD5OfMessageBody */ =>  {
                let var_23 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_md5_of_message_body(var_23);
            }
            ,
            s if s.matches("MD5OfMessageAttributes") /* MD5OfMessageAttributes com.amazonaws.sqs#SendMessageOutput$MD5OfMessageAttributes */ =>  {
                let var_24 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_md5_of_message_attributes(var_24);
            }
            ,
            s if s.matches("MD5OfMessageSystemAttributes") /* MD5OfMessageSystemAttributes com.amazonaws.sqs#SendMessageOutput$MD5OfMessageSystemAttributes */ =>  {
                let var_25 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_md5_of_message_system_attributes(var_25);
            }
            ,
            s if s.matches("MessageId") /* MessageId com.amazonaws.sqs#SendMessageOutput$MessageId */ =>  {
                let var_26 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message_id(var_26);
            }
            ,
            s if s.matches("SequenceNumber") /* SequenceNumber com.amazonaws.sqs#SendMessageOutput$SequenceNumber */ =>  {
                let var_27 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_sequence_number(var_27);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected SendMessageResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn batch_request_too_long(
    inp: &[u8],
    mut builder: crate::error::batch_request_too_long::Builder,
) -> Result<crate::error::batch_request_too_long::Builder, smithy_xml::decode::XmlError> {
    let _ = inp;
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_send_message_batch(
    inp: &[u8],
    mut builder: crate::output::send_message_batch_output::Builder,
) -> Result<crate::output::send_message_batch_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("SendMessageBatchResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected SendMessageBatchResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("SendMessageBatchResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected SendMessageBatchResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("SendMessageBatchResultEntry") /* Successful com.amazonaws.sqs#SendMessageBatchOutput$Successful */ =>  {
                let var_28 =
                    Some(
                        Result::<std::vec::Vec<crate::model::SendMessageBatchResultEntry>, smithy_xml::decode::XmlError>::Ok({
                            let mut list_29 = builder.successful.take().unwrap_or_default();
                            list_29.push(
                                crate::xml_deser::send_message_batch_result_entry_inner(&mut tag)
                                ?
                            );
                            list_29
                        })
                        ?
                    )
                ;
                builder = builder.set_successful(var_28);
            }
            ,
            s if s.matches("BatchResultErrorEntry") /* Failed com.amazonaws.sqs#SendMessageBatchOutput$Failed */ =>  {
                let var_30 =
                    Some(
                        Result::<std::vec::Vec<crate::model::BatchResultErrorEntry>, smithy_xml::decode::XmlError>::Ok({
                            let mut list_31 = builder.failed.take().unwrap_or_default();
                            list_31.push(
                                crate::xml_deser::batch_result_error_entry_inner(&mut tag)
                                ?
                            );
                            list_31
                        })
                        ?
                    )
                ;
                builder = builder.set_failed(var_30);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected SendMessageBatchResult tag",
        ));
    };
    Ok(builder)
}

pub fn change_message_visibility_batch_result_entry_inner(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::ChangeMessageVisibilityBatchResultEntry, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::ChangeMessageVisibilityBatchResultEntry::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.sqs#ChangeMessageVisibilityBatchResultEntry$Id */ =>  {
                let var_32 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_32);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn batch_result_error_entry_inner(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::BatchResultErrorEntry, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::BatchResultErrorEntry::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.sqs#BatchResultErrorEntry$Id */ =>  {
                let var_33 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_33);
            }
            ,
            s if s.matches("SenderFault") /* SenderFault com.amazonaws.sqs#BatchResultErrorEntry$SenderFault */ =>  {
                let var_34 =
                     {
                        use std::str::FromStr;
                        bool::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (boolean: `com.amazonaws.sqs#Boolean`)"))
                    }
                    ?
                ;
                builder = builder.set_sender_fault(var_34);
            }
            ,
            s if s.matches("Code") /* Code com.amazonaws.sqs#BatchResultErrorEntry$Code */ =>  {
                let var_35 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_code(var_35);
            }
            ,
            s if s.matches("Message") /* Message com.amazonaws.sqs#BatchResultErrorEntry$Message */ =>  {
                let var_36 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_36);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn delete_message_batch_result_entry_inner(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::DeleteMessageBatchResultEntry, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::DeleteMessageBatchResultEntry::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.sqs#DeleteMessageBatchResultEntry$Id */ =>  {
                let var_37 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_37);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn queue_attribute_map_entry(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
    out: &mut std::collections::HashMap<crate::model::QueueAttributeName, std::string::String>,
) -> Result<(), smithy_xml::decode::XmlError> {
    let mut k: Option<crate::model::QueueAttributeName> = None;
    let mut v: Option<std::string::String> = None;
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* key com.amazonaws.sqs#QueueAttributeMap$key */ =>  {
                k = Some(
                    Result::<crate::model::QueueAttributeName, smithy_xml::decode::XmlError>::Ok(
                        crate::model::QueueAttributeName::from(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                )
            }
            ,
            s if s.matches("Value") /* value com.amazonaws.sqs#QueueAttributeMap$value */ =>  {
                v = Some(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                )
            }
            ,
            _ => {}
        }
    }
    let k = k.ok_or_else(|| smithy_xml::decode::XmlError::custom("missing key map entry"))?;
    let v = v.ok_or_else(|| smithy_xml::decode::XmlError::custom("missing value map entry"))?;
    out.insert(k, v);
    Ok(())
}

pub fn tag_map_entry(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
    out: &mut std::collections::HashMap<std::string::String, std::string::String>,
) -> Result<(), smithy_xml::decode::XmlError> {
    let mut k: Option<std::string::String> = None;
    let mut v: Option<std::string::String> = None;
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Key") /* key com.amazonaws.sqs#TagMap$key */ =>  {
                k = Some(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                )
            }
            ,
            s if s.matches("Value") /* value com.amazonaws.sqs#TagMap$value */ =>  {
                v = Some(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                )
            }
            ,
            _ => {}
        }
    }
    let k = k.ok_or_else(|| smithy_xml::decode::XmlError::custom("missing key map entry"))?;
    let v = v.ok_or_else(|| smithy_xml::decode::XmlError::custom("missing value map entry"))?;
    out.insert(k, v);
    Ok(())
}

pub fn message_inner(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Message, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Message::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("MessageId") /* MessageId com.amazonaws.sqs#Message$MessageId */ =>  {
                let var_38 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message_id(var_38);
            }
            ,
            s if s.matches("ReceiptHandle") /* ReceiptHandle com.amazonaws.sqs#Message$ReceiptHandle */ =>  {
                let var_39 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_receipt_handle(var_39);
            }
            ,
            s if s.matches("MD5OfBody") /* MD5OfBody com.amazonaws.sqs#Message$MD5OfBody */ =>  {
                let var_40 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_md5_of_body(var_40);
            }
            ,
            s if s.matches("Body") /* Body com.amazonaws.sqs#Message$Body */ =>  {
                let var_41 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_body(var_41);
            }
            ,
            s if s.matches("Attribute") /* Attributes com.amazonaws.sqs#Message$Attributes */ =>  {
                let var_42 =
                    Some(
                        Result::<std::collections::HashMap<crate::model::MessageSystemAttributeName, std::string::String>, smithy_xml::decode::XmlError>::Ok({
                            let mut map_43 = builder.attributes.take().unwrap_or_default();
                                        crate::xml_deser::message_system_attribute_map_entry(&mut tag, &mut map_43)?;
                                        map_43
                        })
                        ?
                    )
                ;
                builder = builder.set_attributes(var_42);
            }
            ,
            s if s.matches("MD5OfMessageAttributes") /* MD5OfMessageAttributes com.amazonaws.sqs#Message$MD5OfMessageAttributes */ =>  {
                let var_44 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_md5_of_message_attributes(var_44);
            }
            ,
            s if s.matches("MessageAttribute") /* MessageAttributes com.amazonaws.sqs#Message$MessageAttributes */ =>  {
                let var_45 =
                    Some(
                        Result::<std::collections::HashMap<std::string::String, crate::model::MessageAttributeValue>, smithy_xml::decode::XmlError>::Ok({
                            let mut map_46 = builder.message_attributes.take().unwrap_or_default();
                                        crate::xml_deser::message_body_attribute_map_entry(&mut tag, &mut map_46)?;
                                        map_46
                        })
                        ?
                    )
                ;
                builder = builder.set_message_attributes(var_45);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn send_message_batch_result_entry_inner(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::SendMessageBatchResultEntry, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::SendMessageBatchResultEntry::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.sqs#SendMessageBatchResultEntry$Id */ =>  {
                let var_47 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_47);
            }
            ,
            s if s.matches("MessageId") /* MessageId com.amazonaws.sqs#SendMessageBatchResultEntry$MessageId */ =>  {
                let var_48 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message_id(var_48);
            }
            ,
            s if s.matches("MD5OfMessageBody") /* MD5OfMessageBody com.amazonaws.sqs#SendMessageBatchResultEntry$MD5OfMessageBody */ =>  {
                let var_49 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_md5_of_message_body(var_49);
            }
            ,
            s if s.matches("MD5OfMessageAttributes") /* MD5OfMessageAttributes com.amazonaws.sqs#SendMessageBatchResultEntry$MD5OfMessageAttributes */ =>  {
                let var_50 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_md5_of_message_attributes(var_50);
            }
            ,
            s if s.matches("MD5OfMessageSystemAttributes") /* MD5OfMessageSystemAttributes com.amazonaws.sqs#SendMessageBatchResultEntry$MD5OfMessageSystemAttributes */ =>  {
                let var_51 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_md5_of_message_system_attributes(var_51);
            }
            ,
            s if s.matches("SequenceNumber") /* SequenceNumber com.amazonaws.sqs#SendMessageBatchResultEntry$SequenceNumber */ =>  {
                let var_52 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_sequence_number(var_52);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn message_system_attribute_map_entry(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
    out: &mut std::collections::HashMap<
        crate::model::MessageSystemAttributeName,
        std::string::String,
    >,
) -> Result<(), smithy_xml::decode::XmlError> {
    let mut k: Option<crate::model::MessageSystemAttributeName> = None;
    let mut v: Option<std::string::String> = None;
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* key com.amazonaws.sqs#MessageSystemAttributeMap$key */ =>  {
                k = Some(
                    Result::<crate::model::MessageSystemAttributeName, smithy_xml::decode::XmlError>::Ok(
                        crate::model::MessageSystemAttributeName::from(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                    )
                    ?
                )
            }
            ,
            s if s.matches("Value") /* value com.amazonaws.sqs#MessageSystemAttributeMap$value */ =>  {
                v = Some(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                )
            }
            ,
            _ => {}
        }
    }
    let k = k.ok_or_else(|| smithy_xml::decode::XmlError::custom("missing key map entry"))?;
    let v = v.ok_or_else(|| smithy_xml::decode::XmlError::custom("missing value map entry"))?;
    out.insert(k, v);
    Ok(())
}

pub fn message_body_attribute_map_entry(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
    out: &mut std::collections::HashMap<std::string::String, crate::model::MessageAttributeValue>,
) -> Result<(), smithy_xml::decode::XmlError> {
    let mut k: Option<std::string::String> = None;
    let mut v: Option<crate::model::MessageAttributeValue> = None;
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* key com.amazonaws.sqs#MessageBodyAttributeMap$key */ =>  {
                k = Some(
                    Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                        smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        .into()
                    )
                    ?
                )
            }
            ,
            s if s.matches("Value") /* value com.amazonaws.sqs#MessageBodyAttributeMap$value */ =>  {
                v = Some(
                    crate::xml_deser::message_attribute_value_inner(&mut tag)
                    ?
                )
            }
            ,
            _ => {}
        }
    }
    let k = k.ok_or_else(|| smithy_xml::decode::XmlError::custom("missing key map entry"))?;
    let v = v.ok_or_else(|| smithy_xml::decode::XmlError::custom("missing value map entry"))?;
    out.insert(k, v);
    Ok(())
}

pub fn message_attribute_value_inner(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::MessageAttributeValue, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::MessageAttributeValue::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StringValue") /* StringValue com.amazonaws.sqs#MessageAttributeValue$StringValue */ =>  {
                let var_53 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_string_value(var_53);
            }
            ,
            s if s.matches("BinaryValue") /* BinaryValue com.amazonaws.sqs#MessageAttributeValue$BinaryValue */ =>  {
                let var_54 =
                    Some(
                        smithy_http::base64::decode(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                        .map_err(|err|smithy_xml::decode::XmlError::custom(format!("invalid base64: {:?}", err))).map(smithy_types::Blob::new)
                        ?
                    )
                ;
                builder = builder.set_binary_value(var_54);
            }
            ,
            s if s.matches("StringListValue") /* StringListValues com.amazonaws.sqs#MessageAttributeValue$StringListValues */ =>  {
                let var_55 =
                    Some(
                        Result::<std::vec::Vec<std::string::String>, smithy_xml::decode::XmlError>::Ok({
                            let mut list_56 = builder.string_list_values.take().unwrap_or_default();
                            list_56.push(
                                Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                                    smithy_xml::decode::try_data(&mut tag)?.as_ref()
                                    .into()
                                )
                                ?
                            );
                            list_56
                        })
                        ?
                    )
                ;
                builder = builder.set_string_list_values(var_55);
            }
            ,
            s if s.matches("BinaryListValue") /* BinaryListValues com.amazonaws.sqs#MessageAttributeValue$BinaryListValues */ =>  {
                let var_57 =
                    Some(
                        Result::<std::vec::Vec<smithy_types::Blob>, smithy_xml::decode::XmlError>::Ok({
                            let mut list_58 = builder.binary_list_values.take().unwrap_or_default();
                            list_58.push(
                                smithy_http::base64::decode(
                                    smithy_xml::decode::try_data(&mut tag)?.as_ref()
                                )
                                .map_err(|err|smithy_xml::decode::XmlError::custom(format!("invalid base64: {:?}", err))).map(smithy_types::Blob::new)
                                ?
                            );
                            list_58
                        })
                        ?
                    )
                ;
                builder = builder.set_binary_list_values(var_57);
            }
            ,
            s if s.matches("DataType") /* DataType com.amazonaws.sqs#MessageAttributeValue$DataType */ =>  {
                let var_59 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_data_type(var_59);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
