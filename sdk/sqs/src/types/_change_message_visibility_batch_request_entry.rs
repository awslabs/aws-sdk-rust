// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Encloses a receipt handle and an entry ID for each message in <code> <code>ChangeMessageVisibilityBatch</code>.</code> </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChangeMessageVisibilityBatchRequestEntry {
    /// <p>An identifier for this particular receipt handle used to communicate the result.</p> <note>
    /// <p>The <code>Id</code>s of a batch request need to be unique within a request.</p>
    /// <p>This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).</p>
    /// </note>
    pub id: ::std::string::String,
    /// <p>A receipt handle.</p>
    pub receipt_handle: ::std::string::String,
    /// <p>The new value (in seconds) for the message's visibility timeout.</p>
    pub visibility_timeout: i32,
}
impl ChangeMessageVisibilityBatchRequestEntry {
    /// <p>An identifier for this particular receipt handle used to communicate the result.</p> <note>
    /// <p>The <code>Id</code>s of a batch request need to be unique within a request.</p>
    /// <p>This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).</p>
    /// </note>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>A receipt handle.</p>
    pub fn receipt_handle(&self) -> &str {
        use std::ops::Deref;
        self.receipt_handle.deref()
    }
    /// <p>The new value (in seconds) for the message's visibility timeout.</p>
    pub fn visibility_timeout(&self) -> i32 {
        self.visibility_timeout
    }
}
impl ChangeMessageVisibilityBatchRequestEntry {
    /// Creates a new builder-style object to manufacture [`ChangeMessageVisibilityBatchRequestEntry`](crate::types::ChangeMessageVisibilityBatchRequestEntry).
    pub fn builder() -> crate::types::builders::ChangeMessageVisibilityBatchRequestEntryBuilder {
        crate::types::builders::ChangeMessageVisibilityBatchRequestEntryBuilder::default()
    }
}

/// A builder for [`ChangeMessageVisibilityBatchRequestEntry`](crate::types::ChangeMessageVisibilityBatchRequestEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ChangeMessageVisibilityBatchRequestEntryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) receipt_handle: ::std::option::Option<::std::string::String>,
    pub(crate) visibility_timeout: ::std::option::Option<i32>,
}
impl ChangeMessageVisibilityBatchRequestEntryBuilder {
    /// <p>An identifier for this particular receipt handle used to communicate the result.</p> <note>
    /// <p>The <code>Id</code>s of a batch request need to be unique within a request.</p>
    /// <p>This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).</p>
    /// </note>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An identifier for this particular receipt handle used to communicate the result.</p> <note>
    /// <p>The <code>Id</code>s of a batch request need to be unique within a request.</p>
    /// <p>This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).</p>
    /// </note>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>An identifier for this particular receipt handle used to communicate the result.</p> <note>
    /// <p>The <code>Id</code>s of a batch request need to be unique within a request.</p>
    /// <p>This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).</p>
    /// </note>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>A receipt handle.</p>
    /// This field is required.
    pub fn receipt_handle(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.receipt_handle = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A receipt handle.</p>
    pub fn set_receipt_handle(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.receipt_handle = input;
        self
    }
    /// <p>A receipt handle.</p>
    pub fn get_receipt_handle(&self) -> &::std::option::Option<::std::string::String> {
        &self.receipt_handle
    }
    /// <p>The new value (in seconds) for the message's visibility timeout.</p>
    pub fn visibility_timeout(mut self, input: i32) -> Self {
        self.visibility_timeout = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new value (in seconds) for the message's visibility timeout.</p>
    pub fn set_visibility_timeout(mut self, input: ::std::option::Option<i32>) -> Self {
        self.visibility_timeout = input;
        self
    }
    /// <p>The new value (in seconds) for the message's visibility timeout.</p>
    pub fn get_visibility_timeout(&self) -> &::std::option::Option<i32> {
        &self.visibility_timeout
    }
    /// Consumes the builder and constructs a [`ChangeMessageVisibilityBatchRequestEntry`](crate::types::ChangeMessageVisibilityBatchRequestEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::ChangeMessageVisibilityBatchRequestEntryBuilder::id)
    /// - [`receipt_handle`](crate::types::builders::ChangeMessageVisibilityBatchRequestEntryBuilder::receipt_handle)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ChangeMessageVisibilityBatchRequestEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ChangeMessageVisibilityBatchRequestEntry {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ChangeMessageVisibilityBatchRequestEntry",
                )
            })?,
            receipt_handle: self.receipt_handle.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "receipt_handle",
                    "receipt_handle was not specified but it is required when building ChangeMessageVisibilityBatchRequestEntry",
                )
            })?,
            visibility_timeout: self.visibility_timeout.unwrap_or_default(),
        })
    }
}
