// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Encloses a receipt handle and an identifier for it.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteMessageBatchRequestEntry {
    /// <p>An identifier for this particular receipt handle. This is used to communicate the result.</p> <note>
    /// <p>The <code>Id</code>s of a batch request need to be unique within a request.</p>
    /// <p>This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).</p>
    /// </note>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>A receipt handle.</p>
    #[doc(hidden)]
    pub receipt_handle: std::option::Option<std::string::String>,
}
impl DeleteMessageBatchRequestEntry {
    /// <p>An identifier for this particular receipt handle. This is used to communicate the result.</p> <note>
    /// <p>The <code>Id</code>s of a batch request need to be unique within a request.</p>
    /// <p>This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).</p>
    /// </note>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A receipt handle.</p>
    pub fn receipt_handle(&self) -> std::option::Option<&str> {
        self.receipt_handle.as_deref()
    }
}
impl DeleteMessageBatchRequestEntry {
    /// Creates a new builder-style object to manufacture [`DeleteMessageBatchRequestEntry`](crate::types::DeleteMessageBatchRequestEntry).
    pub fn builder() -> crate::types::builders::DeleteMessageBatchRequestEntryBuilder {
        crate::types::builders::DeleteMessageBatchRequestEntryBuilder::default()
    }
}

/// A builder for [`DeleteMessageBatchRequestEntry`](crate::types::DeleteMessageBatchRequestEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteMessageBatchRequestEntryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) receipt_handle: std::option::Option<std::string::String>,
}
impl DeleteMessageBatchRequestEntryBuilder {
    /// <p>An identifier for this particular receipt handle. This is used to communicate the result.</p> <note>
    /// <p>The <code>Id</code>s of a batch request need to be unique within a request.</p>
    /// <p>This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).</p>
    /// </note>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>An identifier for this particular receipt handle. This is used to communicate the result.</p> <note>
    /// <p>The <code>Id</code>s of a batch request need to be unique within a request.</p>
    /// <p>This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).</p>
    /// </note>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A receipt handle.</p>
    pub fn receipt_handle(mut self, input: impl Into<std::string::String>) -> Self {
        self.receipt_handle = Some(input.into());
        self
    }
    /// <p>A receipt handle.</p>
    pub fn set_receipt_handle(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.receipt_handle = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteMessageBatchRequestEntry`](crate::types::DeleteMessageBatchRequestEntry).
    pub fn build(self) -> crate::types::DeleteMessageBatchRequestEntry {
        crate::types::DeleteMessageBatchRequestEntry {
            id: self.id,
            receipt_handle: self.receipt_handle,
        }
    }
}
