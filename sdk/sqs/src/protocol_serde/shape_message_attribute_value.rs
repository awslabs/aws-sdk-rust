// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_message_attribute_value(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::MessageAttributeValue,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("StringValue");
    if let Some(var_2) = &input.string_value {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("BinaryValue");
    if let Some(var_4) = &input.binary_value {
        scope_3.string(&::aws_smithy_types::base64::encode(var_4));
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("StringListValue");
    if let Some(var_6) = &input.string_list_values {
        let mut list_8 = scope_5.start_list(true, Some("StringListValue"));
        for item_7 in var_6 {
            #[allow(unused_mut)]
            let mut entry_9 = list_8.entry();
            entry_9.string(item_7);
        }
        list_8.finish();
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("BinaryListValue");
    if let Some(var_11) = &input.binary_list_values {
        let mut list_13 = scope_10.start_list(true, Some("BinaryListValue"));
        for item_12 in var_11 {
            #[allow(unused_mut)]
            let mut entry_14 = list_13.entry();
            entry_14.string(&::aws_smithy_types::base64::encode(item_12));
        }
        list_13.finish();
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("DataType");
    {
        scope_15.string(&input.data_type);
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_message_attribute_value(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::MessageAttributeValue, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::MessageAttributeValue::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("StringValue") /* StringValue com.amazonaws.sqs#MessageAttributeValue$StringValue */ =>  {
                let var_16 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_string_value(var_16);
            }
            ,
            s if s.matches("BinaryValue") /* BinaryValue com.amazonaws.sqs#MessageAttributeValue$BinaryValue */ =>  {
                let var_17 =
                    Some(
                        ::aws_smithy_types::base64::decode(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                        )
                        .map_err(|err|::aws_smithy_xml::decode::XmlDecodeError::custom(format!("invalid base64: {:?}", err))).map(::aws_smithy_types::Blob::new)
                        ?
                    )
                ;
                builder = builder.set_binary_value(var_17);
            }
            ,
            s if s.matches("StringListValue") /* StringListValues com.amazonaws.sqs#MessageAttributeValue$StringListValues */ =>  {
                let var_18 =
                    Some(
                        Result::<::std::vec::Vec::<::std::string::String>, ::aws_smithy_xml::decode::XmlDecodeError>::Ok({
                            let mut list_19 = builder.string_list_values.take().unwrap_or_default();
                            list_19.push(
                                Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                                    ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                                    .into()
                                )
                                ?
                            );
                            list_19
                        })
                        ?
                    )
                ;
                builder = builder.set_string_list_values(var_18);
            }
            ,
            s if s.matches("BinaryListValue") /* BinaryListValues com.amazonaws.sqs#MessageAttributeValue$BinaryListValues */ =>  {
                let var_20 =
                    Some(
                        Result::<::std::vec::Vec::<::aws_smithy_types::Blob>, ::aws_smithy_xml::decode::XmlDecodeError>::Ok({
                            let mut list_21 = builder.binary_list_values.take().unwrap_or_default();
                            list_21.push(
                                ::aws_smithy_types::base64::decode(
                                    ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                                )
                                .map_err(|err|::aws_smithy_xml::decode::XmlDecodeError::custom(format!("invalid base64: {:?}", err))).map(::aws_smithy_types::Blob::new)
                                ?
                            );
                            list_21
                        })
                        ?
                    )
                ;
                builder = builder.set_binary_list_values(var_20);
            }
            ,
            s if s.matches("DataType") /* DataType com.amazonaws.sqs#MessageAttributeValue$DataType */ =>  {
                let var_22 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_data_type(var_22);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::message_attribute_value_correct_errors(builder)
        .build()
        .map_err(|_| ::aws_smithy_xml::decode::XmlDecodeError::custom("missing field"))?)
}
