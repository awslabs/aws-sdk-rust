// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_send_message_batch_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::send_message_batch::SendMessageBatchOutput,
    crate::operation::send_message_batch::SendMessageBatchError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::send_message_batch::SendMessageBatchError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::send_message_batch::SendMessageBatchError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AWS.SimpleQueueService.BatchEntryIdsNotDistinct" => crate::operation::send_message_batch::SendMessageBatchError::BatchEntryIdsNotDistinct({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::BatchEntryIdsNotDistinctBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_batch_entry_ids_not_distinct::de_batch_entry_ids_not_distinct_xml_err(response.body().as_ref(), output).map_err(crate::operation::send_message_batch::SendMessageBatchError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "AWS.SimpleQueueService.BatchRequestTooLong" => crate::operation::send_message_batch::SendMessageBatchError::BatchRequestTooLong({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::BatchRequestTooLongBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_batch_request_too_long::de_batch_request_too_long_xml_err(response.body().as_ref(), output).map_err(crate::operation::send_message_batch::SendMessageBatchError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "AWS.SimpleQueueService.EmptyBatchRequest" => crate::operation::send_message_batch::SendMessageBatchError::EmptyBatchRequest({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EmptyBatchRequestBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_empty_batch_request::de_empty_batch_request_xml_err(response.body().as_ref(), output).map_err(crate::operation::send_message_batch::SendMessageBatchError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "AWS.SimpleQueueService.InvalidBatchEntryId" => crate::operation::send_message_batch::SendMessageBatchError::InvalidBatchEntryId({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidBatchEntryIdBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_batch_entry_id::de_invalid_batch_entry_id_xml_err(response.body().as_ref(), output).map_err(crate::operation::send_message_batch::SendMessageBatchError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "AWS.SimpleQueueService.TooManyEntriesInBatchRequest" => crate::operation::send_message_batch::SendMessageBatchError::TooManyEntriesInBatchRequest({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::TooManyEntriesInBatchRequestBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_too_many_entries_in_batch_request::de_too_many_entries_in_batch_request_xml_err(response.body().as_ref(), output).map_err(crate::operation::send_message_batch::SendMessageBatchError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "AWS.SimpleQueueService.UnsupportedOperation" => crate::operation::send_message_batch::SendMessageBatchError::UnsupportedOperation({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::UnsupportedOperationBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_unsupported_operation::de_unsupported_operation_xml_err(response.body().as_ref(), output).map_err(crate::operation::send_message_batch::SendMessageBatchError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::send_message_batch::SendMessageBatchError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_send_message_batch_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::send_message_batch::SendMessageBatchOutput,
    crate::operation::send_message_batch::SendMessageBatchError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::send_message_batch::builders::SendMessageBatchOutputBuilder::default(
            );
        let _ = response;
        output = crate::protocol_serde::shape_send_message_batch::de_send_message_batch(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::operation::send_message_batch::SendMessageBatchError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_send_message_batch(
    inp: &[u8],
    mut builder: crate::operation::send_message_batch::builders::SendMessageBatchOutputBuilder,
) -> Result<
    crate::operation::send_message_batch::builders::SendMessageBatchOutputBuilder,
    aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("SendMessageBatchResponse")) {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected SendMessageBatchResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("SendMessageBatchResult")) {
            return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
                "invalid result, expected SendMessageBatchResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("SendMessageBatchResultEntry") /* Successful com.amazonaws.sqs.synthetic#SendMessageBatchOutput$Successful */ =>  {
                let var_1 =
                    Some(
                        Result::<std::vec::Vec<crate::types::SendMessageBatchResultEntry>, aws_smithy_xml::decode::XmlDecodeError>::Ok({
                            let mut list_2 = builder.successful.take().unwrap_or_default();
                            list_2.push(
                                crate::protocol_serde::shape_send_message_batch_result_entry::de_send_message_batch_result_entry(&mut tag)
                                ?
                            );
                            list_2
                        })
                        ?
                    )
                ;
                builder = builder.set_successful(var_1);
            }
            ,
            s if s.matches("BatchResultErrorEntry") /* Failed com.amazonaws.sqs.synthetic#SendMessageBatchOutput$Failed */ =>  {
                let var_3 =
                    Some(
                        Result::<std::vec::Vec<crate::types::BatchResultErrorEntry>, aws_smithy_xml::decode::XmlDecodeError>::Ok({
                            let mut list_4 = builder.failed.take().unwrap_or_default();
                            list_4.push(
                                crate::protocol_serde::shape_batch_result_error_entry::de_batch_result_error_entry(&mut tag)
                                ?
                            );
                            list_4
                        })
                        ?
                    )
                ;
                builder = builder.set_failed(var_3);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(
            "expected SendMessageBatchResult tag",
        ));
    };
    Ok(builder)
}
