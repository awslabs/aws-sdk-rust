// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_send_message_input_input(
    input: &crate::operation::send_message::SendMessageInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "SendMessage", "2012-11-05");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("QueueUrl");
    if let Some(var_2) = &input.queue_url {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("MessageBody");
    if let Some(var_4) = &input.message_body {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("DelaySeconds");
    if let Some(var_6) = &input.delay_seconds {
        scope_5.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("MessageAttribute");
    if let Some(var_8) = &input.message_attributes {
        let mut map_9 = scope_7.start_map(true, "Name", "Value");
        for (key_10, value_11) in var_8 {
            #[allow(unused_mut)]
            let mut entry_12 = map_9.entry(key_10);
            {
                crate::protocol_serde::shape_message_attribute_value::ser_message_attribute_value(entry_12, value_11)?;
            }
        }
        map_9.finish();
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("MessageSystemAttribute");
    if let Some(var_14) = &input.message_system_attributes {
        let mut map_15 = scope_13.start_map(true, "Name", "Value");
        for (key_16, value_17) in var_14 {
            #[allow(unused_mut)]
            let mut entry_18 = map_15.entry(key_16.as_str());
            {
                crate::protocol_serde::shape_message_system_attribute_value::ser_message_system_attribute_value(entry_18, value_17)?;
            }
        }
        map_15.finish();
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("MessageDeduplicationId");
    if let Some(var_20) = &input.message_deduplication_id {
        scope_19.string(var_20);
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("MessageGroupId");
    if let Some(var_22) = &input.message_group_id {
        scope_21.string(var_22);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
