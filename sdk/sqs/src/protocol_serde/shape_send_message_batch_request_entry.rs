// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_send_message_batch_request_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::types::SendMessageBatchRequestEntry,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Id");
    if let Some(var_2) = &input.id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("MessageBody");
    if let Some(var_4) = &input.message_body {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("DelaySeconds");
    if input.delay_seconds != 0 {
        scope_5.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.delay_seconds).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("MessageAttribute");
    if let Some(var_7) = &input.message_attributes {
        let mut map_8 = scope_6.start_map(true, "Name", "Value");
        for (key_9, value_10) in var_7 {
            #[allow(unused_mut)]
            let mut entry_11 = map_8.entry(key_9);
            {
                crate::protocol_serde::shape_message_attribute_value::ser_message_attribute_value(
                    entry_11, value_10,
                )?;
            }
        }
        map_8.finish();
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("MessageSystemAttribute");
    if let Some(var_13) = &input.message_system_attributes {
        let mut map_14 = scope_12.start_map(true, "Name", "Value");
        for (key_15, value_16) in var_13 {
            #[allow(unused_mut)]
            let mut entry_17 = map_14.entry(key_15.as_str());
            {
                crate::protocol_serde::shape_message_system_attribute_value::ser_message_system_attribute_value(entry_17, value_16)?;
            }
        }
        map_14.finish();
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("MessageDeduplicationId");
    if let Some(var_19) = &input.message_deduplication_id {
        scope_18.string(var_19);
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("MessageGroupId");
    if let Some(var_21) = &input.message_group_id {
        scope_20.string(var_21);
    }
    Ok(())
}
