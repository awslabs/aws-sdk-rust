// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> ::std::result::Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_create_centralization_rule_for_organization;

pub(crate) mod shape_create_telemetry_rule;

pub(crate) mod shape_create_telemetry_rule_for_organization;

pub(crate) mod shape_delete_centralization_rule_for_organization;

pub(crate) mod shape_delete_telemetry_rule;

pub(crate) mod shape_delete_telemetry_rule_for_organization;

pub(crate) mod shape_get_centralization_rule_for_organization;

pub(crate) mod shape_get_telemetry_enrichment_status;

pub(crate) mod shape_get_telemetry_evaluation_status;

pub(crate) mod shape_get_telemetry_evaluation_status_for_organization;

pub(crate) mod shape_get_telemetry_rule;

pub(crate) mod shape_get_telemetry_rule_for_organization;

pub(crate) mod shape_list_centralization_rules_for_organization;

pub(crate) mod shape_list_resource_telemetry;

pub(crate) mod shape_list_resource_telemetry_for_organization;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_list_telemetry_rules;

pub(crate) mod shape_list_telemetry_rules_for_organization;

pub(crate) mod shape_start_telemetry_enrichment;

pub(crate) mod shape_start_telemetry_evaluation;

pub(crate) mod shape_start_telemetry_evaluation_for_organization;

pub(crate) mod shape_stop_telemetry_enrichment;

pub(crate) mod shape_stop_telemetry_evaluation;

pub(crate) mod shape_stop_telemetry_evaluation_for_organization;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_centralization_rule_for_organization;

pub(crate) mod shape_update_telemetry_rule;

pub(crate) mod shape_update_telemetry_rule_for_organization;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_centralization_rule_for_organization_input;

pub(crate) mod shape_create_telemetry_rule_for_organization_input;

pub(crate) mod shape_create_telemetry_rule_input;

pub(crate) mod shape_delete_centralization_rule_for_organization_input;

pub(crate) mod shape_delete_telemetry_rule_for_organization_input;

pub(crate) mod shape_delete_telemetry_rule_input;

pub(crate) mod shape_get_centralization_rule_for_organization_input;

pub(crate) mod shape_get_telemetry_rule_for_organization_input;

pub(crate) mod shape_get_telemetry_rule_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_list_centralization_rules_for_organization_input;

pub(crate) mod shape_list_resource_telemetry_for_organization_input;

pub(crate) mod shape_list_resource_telemetry_input;

pub(crate) mod shape_list_tags_for_resource_input;

pub(crate) mod shape_list_telemetry_rules_for_organization_input;

pub(crate) mod shape_list_telemetry_rules_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_too_many_requests_exception;

pub(crate) mod shape_untag_resource_input;

pub(crate) mod shape_update_centralization_rule_for_organization_input;

pub(crate) mod shape_update_telemetry_rule_for_organization_input;

pub(crate) mod shape_update_telemetry_rule_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_centralization_rule;

pub(crate) mod shape_centralization_rule_summaries;

pub(crate) mod shape_tag_map_output;

pub(crate) mod shape_telemetry_configurations;

pub(crate) mod shape_telemetry_rule;

pub(crate) mod shape_telemetry_rule_summaries;

pub(crate) mod shape_centralization_rule_destination;

pub(crate) mod shape_centralization_rule_source;

pub(crate) mod shape_centralization_rule_summary;

pub(crate) mod shape_telemetry_configuration;

pub(crate) mod shape_telemetry_destination_configuration;

pub(crate) mod shape_telemetry_rule_summary;

pub(crate) mod shape_destination_logs_configuration;

pub(crate) mod shape_regions;

pub(crate) mod shape_source_logs_configuration;

pub(crate) mod shape_telemetry_configuration_state;

pub(crate) mod shape_vpc_flow_log_parameters;

pub(crate) mod shape_logs_backup_configuration;

pub(crate) mod shape_logs_encryption_configuration;
