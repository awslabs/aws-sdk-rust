// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The input text was not in valid UTF-8 character encoding. Check your text then retry your request.</p>
    InvalidEncodingException(crate::error::InvalidEncodingException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p> The Comprehend Medical; service is temporarily unavailable. Please wait and then retry your request. </p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// <p> The size of the text you submitted exceeds the size limit. Reduce the size of the text or use a smaller document and then retry your request. </p>
    TextSizeLimitExceededException(crate::error::TextSizeLimitExceededException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// <p>The filter that you specified for the operation is invalid. Check the filter values that you entered and try your request again.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidEncodingException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::TextSizeLimitExceededException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeEntitiesDetectionV2JobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeEntitiesDetectionV2JobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEntitiesDetectionV2JobError> for Error {
    fn from(err: crate::error::DescribeEntitiesDetectionV2JobError) -> Self {
        match err {
            crate::error::DescribeEntitiesDetectionV2JobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeEntitiesDetectionV2JobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeEntitiesDetectionV2JobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeEntitiesDetectionV2JobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeEntitiesDetectionV2JobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeICD10CMInferenceJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeICD10CMInferenceJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeICD10CMInferenceJobError> for Error {
    fn from(err: crate::error::DescribeICD10CMInferenceJobError) -> Self {
        match err {
            crate::error::DescribeICD10CMInferenceJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeICD10CMInferenceJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeICD10CMInferenceJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeICD10CMInferenceJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeICD10CMInferenceJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePHIDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribePHIDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePHIDetectionJobError> for Error {
    fn from(err: crate::error::DescribePHIDetectionJobError) -> Self {
        match err {
            crate::error::DescribePHIDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribePHIDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribePHIDetectionJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribePHIDetectionJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribePHIDetectionJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRxNormInferenceJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeRxNormInferenceJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRxNormInferenceJobError> for Error {
    fn from(err: crate::error::DescribeRxNormInferenceJobError) -> Self {
        match err {
            crate::error::DescribeRxNormInferenceJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeRxNormInferenceJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeRxNormInferenceJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeRxNormInferenceJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeRxNormInferenceJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSNOMEDCTInferenceJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSNOMEDCTInferenceJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSNOMEDCTInferenceJobError> for Error {
    fn from(err: crate::error::DescribeSNOMEDCTInferenceJobError) -> Self {
        match err {
            crate::error::DescribeSNOMEDCTInferenceJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeSNOMEDCTInferenceJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeSNOMEDCTInferenceJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeSNOMEDCTInferenceJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeSNOMEDCTInferenceJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetectEntitiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DetectEntitiesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetectEntitiesError> for Error {
    fn from(err: crate::error::DetectEntitiesError) -> Self {
        match err {
            crate::error::DetectEntitiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DetectEntitiesError::InvalidEncodingException(inner) => {
                Error::InvalidEncodingException(inner)
            }
            crate::error::DetectEntitiesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DetectEntitiesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DetectEntitiesError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::DetectEntitiesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DetectEntitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetectEntitiesV2Error, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DetectEntitiesV2Error, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetectEntitiesV2Error> for Error {
    fn from(err: crate::error::DetectEntitiesV2Error) -> Self {
        match err {
            crate::error::DetectEntitiesV2Error::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DetectEntitiesV2Error::InvalidEncodingException(inner) => {
                Error::InvalidEncodingException(inner)
            }
            crate::error::DetectEntitiesV2Error::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DetectEntitiesV2Error::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DetectEntitiesV2Error::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::DetectEntitiesV2Error::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DetectEntitiesV2Error::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetectPHIError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DetectPHIError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetectPHIError> for Error {
    fn from(err: crate::error::DetectPHIError) -> Self {
        match err {
            crate::error::DetectPHIError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DetectPHIError::InvalidEncodingException(inner) => {
                Error::InvalidEncodingException(inner)
            }
            crate::error::DetectPHIError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DetectPHIError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DetectPHIError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::DetectPHIError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DetectPHIError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::InferICD10CMError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::InferICD10CMError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::InferICD10CMError> for Error {
    fn from(err: crate::error::InferICD10CMError) -> Self {
        match err {
            crate::error::InferICD10CMError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::InferICD10CMError::InvalidEncodingException(inner) => {
                Error::InvalidEncodingException(inner)
            }
            crate::error::InferICD10CMError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::InferICD10CMError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::InferICD10CMError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::InferICD10CMError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::InferICD10CMError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::InferRxNormError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::InferRxNormError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::InferRxNormError> for Error {
    fn from(err: crate::error::InferRxNormError) -> Self {
        match err {
            crate::error::InferRxNormError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::InferRxNormError::InvalidEncodingException(inner) => {
                Error::InvalidEncodingException(inner)
            }
            crate::error::InferRxNormError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::InferRxNormError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::InferRxNormError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::InferRxNormError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::InferRxNormError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::InferSNOMEDCTError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::InferSNOMEDCTError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::InferSNOMEDCTError> for Error {
    fn from(err: crate::error::InferSNOMEDCTError) -> Self {
        match err {
            crate::error::InferSNOMEDCTError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::InferSNOMEDCTError::InvalidEncodingException(inner) => {
                Error::InvalidEncodingException(inner)
            }
            crate::error::InferSNOMEDCTError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::InferSNOMEDCTError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::InferSNOMEDCTError::TextSizeLimitExceededException(inner) => {
                Error::TextSizeLimitExceededException(inner)
            }
            crate::error::InferSNOMEDCTError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::InferSNOMEDCTError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEntitiesDetectionV2JobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListEntitiesDetectionV2JobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEntitiesDetectionV2JobsError> for Error {
    fn from(err: crate::error::ListEntitiesDetectionV2JobsError) -> Self {
        match err {
            crate::error::ListEntitiesDetectionV2JobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListEntitiesDetectionV2JobsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListEntitiesDetectionV2JobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListEntitiesDetectionV2JobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListEntitiesDetectionV2JobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListICD10CMInferenceJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListICD10CMInferenceJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListICD10CMInferenceJobsError> for Error {
    fn from(err: crate::error::ListICD10CMInferenceJobsError) -> Self {
        match err {
            crate::error::ListICD10CMInferenceJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListICD10CMInferenceJobsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListICD10CMInferenceJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListICD10CMInferenceJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListICD10CMInferenceJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPHIDetectionJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPHIDetectionJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPHIDetectionJobsError> for Error {
    fn from(err: crate::error::ListPHIDetectionJobsError) -> Self {
        match err {
            crate::error::ListPHIDetectionJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListPHIDetectionJobsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListPHIDetectionJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListPHIDetectionJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPHIDetectionJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRxNormInferenceJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListRxNormInferenceJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRxNormInferenceJobsError> for Error {
    fn from(err: crate::error::ListRxNormInferenceJobsError) -> Self {
        match err {
            crate::error::ListRxNormInferenceJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListRxNormInferenceJobsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListRxNormInferenceJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListRxNormInferenceJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListRxNormInferenceJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSNOMEDCTInferenceJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSNOMEDCTInferenceJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSNOMEDCTInferenceJobsError> for Error {
    fn from(err: crate::error::ListSNOMEDCTInferenceJobsError) -> Self {
        match err {
            crate::error::ListSNOMEDCTInferenceJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListSNOMEDCTInferenceJobsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListSNOMEDCTInferenceJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListSNOMEDCTInferenceJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListSNOMEDCTInferenceJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartEntitiesDetectionV2JobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartEntitiesDetectionV2JobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartEntitiesDetectionV2JobError> for Error {
    fn from(err: crate::error::StartEntitiesDetectionV2JobError) -> Self {
        match err {
            crate::error::StartEntitiesDetectionV2JobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartEntitiesDetectionV2JobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartEntitiesDetectionV2JobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartEntitiesDetectionV2JobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StartEntitiesDetectionV2JobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartICD10CMInferenceJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartICD10CMInferenceJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartICD10CMInferenceJobError> for Error {
    fn from(err: crate::error::StartICD10CMInferenceJobError) -> Self {
        match err {
            crate::error::StartICD10CMInferenceJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartICD10CMInferenceJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartICD10CMInferenceJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartICD10CMInferenceJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StartICD10CMInferenceJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartPHIDetectionJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartPHIDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartPHIDetectionJobError> for Error {
    fn from(err: crate::error::StartPHIDetectionJobError) -> Self {
        match err {
            crate::error::StartPHIDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartPHIDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartPHIDetectionJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartPHIDetectionJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StartPHIDetectionJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartRxNormInferenceJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartRxNormInferenceJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartRxNormInferenceJobError> for Error {
    fn from(err: crate::error::StartRxNormInferenceJobError) -> Self {
        match err {
            crate::error::StartRxNormInferenceJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartRxNormInferenceJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartRxNormInferenceJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartRxNormInferenceJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StartRxNormInferenceJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartSNOMEDCTInferenceJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartSNOMEDCTInferenceJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartSNOMEDCTInferenceJobError> for Error {
    fn from(err: crate::error::StartSNOMEDCTInferenceJobError) -> Self {
        match err {
            crate::error::StartSNOMEDCTInferenceJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartSNOMEDCTInferenceJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StartSNOMEDCTInferenceJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartSNOMEDCTInferenceJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StartSNOMEDCTInferenceJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopEntitiesDetectionV2JobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopEntitiesDetectionV2JobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopEntitiesDetectionV2JobError> for Error {
    fn from(err: crate::error::StopEntitiesDetectionV2JobError) -> Self {
        match err {
            crate::error::StopEntitiesDetectionV2JobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopEntitiesDetectionV2JobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopEntitiesDetectionV2JobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopEntitiesDetectionV2JobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopICD10CMInferenceJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopICD10CMInferenceJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopICD10CMInferenceJobError> for Error {
    fn from(err: crate::error::StopICD10CMInferenceJobError) -> Self {
        match err {
            crate::error::StopICD10CMInferenceJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopICD10CMInferenceJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopICD10CMInferenceJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopICD10CMInferenceJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopPHIDetectionJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopPHIDetectionJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopPHIDetectionJobError> for Error {
    fn from(err: crate::error::StopPHIDetectionJobError) -> Self {
        match err {
            crate::error::StopPHIDetectionJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopPHIDetectionJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopPHIDetectionJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopPHIDetectionJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopRxNormInferenceJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopRxNormInferenceJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopRxNormInferenceJobError> for Error {
    fn from(err: crate::error::StopRxNormInferenceJobError) -> Self {
        match err {
            crate::error::StopRxNormInferenceJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopRxNormInferenceJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopRxNormInferenceJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopRxNormInferenceJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopSNOMEDCTInferenceJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopSNOMEDCTInferenceJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopSNOMEDCTInferenceJobError> for Error {
    fn from(err: crate::error::StopSNOMEDCTInferenceJobError) -> Self {
        match err {
            crate::error::StopSNOMEDCTInferenceJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopSNOMEDCTInferenceJobError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::StopSNOMEDCTInferenceJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopSNOMEDCTInferenceJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StopSNOMEDCTInferenceJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidEncodingException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::TextSizeLimitExceededException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
