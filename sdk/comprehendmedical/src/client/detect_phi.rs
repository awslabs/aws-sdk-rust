// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DetectPHI`](crate::operation::detect_phi::builders::DetectPHIFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`text(impl Into<String>)`](crate::operation::detect_phi::builders::DetectPHIFluentBuilder::text) / [`set_text(Option<String>)`](crate::operation::detect_phi::builders::DetectPHIFluentBuilder::set_text): <p> A UTF-8 text string containing the clinical content being examined for PHI entities. Each string must contain fewer than 20,000 bytes of characters.</p>
    /// - On success, responds with [`DetectPhiOutput`](crate::operation::detect_phi::DetectPhiOutput) with field(s):
    ///   - [`entities(Option<Vec<Entity>>)`](crate::operation::detect_phi::DetectPhiOutput::entities): <p> The collection of PHI entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence that Comprehend Medical; has in its detection. </p>
    ///   - [`pagination_token(Option<String>)`](crate::operation::detect_phi::DetectPhiOutput::pagination_token): <p> If the result of the previous request to <code>DetectPHI</code> was truncated, include the <code>PaginationToken</code> to fetch the next page of PHI entities. </p>
    ///   - [`model_version(Option<String>)`](crate::operation::detect_phi::DetectPhiOutput::model_version): <p>The version of the model used to analyze the documents. The version number looks like X.X.X. You can use this information to track the model used for a particular batch of documents.</p>
    /// - On failure, responds with [`SdkError<DetectPHIError>`](crate::operation::detect_phi::DetectPHIError)
    pub fn detect_phi(&self) -> crate::operation::detect_phi::builders::DetectPHIFluentBuilder {
        crate::operation::detect_phi::builders::DetectPHIFluentBuilder::new(self.handle.clone())
    }
}
