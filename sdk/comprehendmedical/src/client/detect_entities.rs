// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DetectEntities`](crate::operation::detect_entities::builders::DetectEntitiesFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`text(impl Into<String>)`](crate::operation::detect_entities::builders::DetectEntitiesFluentBuilder::text) / [`set_text(Option<String>)`](crate::operation::detect_entities::builders::DetectEntitiesFluentBuilder::set_text):<br>required: **true**<br><p> A UTF-8 text string containing the clinical content being examined for entities.</p><br>
    /// - On success, responds with [`DetectEntitiesOutput`](crate::operation::detect_entities::DetectEntitiesOutput) with field(s):
    ///   - [`entities(Vec::<Entity>)`](crate::operation::detect_entities::DetectEntitiesOutput::entities): <p>The collection of medical entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence that Amazon Comprehend Medical has in the detection and analysis. Attributes and traits of the entity are also returned.</p>
    ///   - [`unmapped_attributes(Option<Vec::<UnmappedAttribute>>)`](crate::operation::detect_entities::DetectEntitiesOutput::unmapped_attributes): <p>Attributes extracted from the input text that we were unable to relate to an entity.</p>
    ///   - [`pagination_token(Option<String>)`](crate::operation::detect_entities::DetectEntitiesOutput::pagination_token): <p>If the result of the previous request to <code>DetectEntities</code> was truncated, include the <code>PaginationToken</code> to fetch the next page of entities.</p>
    ///   - [`model_version(String)`](crate::operation::detect_entities::DetectEntitiesOutput::model_version): <p>The version of the model used to analyze the documents. The version number looks like X.X.X. You can use this information to track the model used for a particular batch of documents.</p>
    /// - On failure, responds with [`SdkError<DetectEntitiesError>`](crate::operation::detect_entities::DetectEntitiesError)
    #[deprecated(note = "This operation is deprecated, use DetectEntitiesV2 instead.")]
    pub fn detect_entities(&self) -> crate::operation::detect_entities::builders::DetectEntitiesFluentBuilder {
        crate::operation::detect_entities::builders::DetectEntitiesFluentBuilder::new(self.handle.clone())
    }
}
