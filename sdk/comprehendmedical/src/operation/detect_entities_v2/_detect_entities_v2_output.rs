// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetectEntitiesV2Output {
    /// <p>The collection of medical entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence in the detection and analysis. Attributes and traits of the entity are also returned.</p>
    #[doc(hidden)]
    pub entities: std::option::Option<std::vec::Vec<crate::types::Entity>>,
    /// <p>Attributes extracted from the input text that couldn't be related to an entity.</p>
    #[doc(hidden)]
    pub unmapped_attributes: std::option::Option<std::vec::Vec<crate::types::UnmappedAttribute>>,
    /// <p>If the result to the <code>DetectEntitiesV2</code> operation was truncated, include the <code>PaginationToken</code> to fetch the next page of entities.</p>
    #[doc(hidden)]
    pub pagination_token: std::option::Option<std::string::String>,
    /// <p>The version of the model used to analyze the documents. The version number looks like X.X.X. You can use this information to track the model used for a particular batch of documents.</p>
    #[doc(hidden)]
    pub model_version: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DetectEntitiesV2Output {
    /// <p>The collection of medical entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence in the detection and analysis. Attributes and traits of the entity are also returned.</p>
    pub fn entities(&self) -> std::option::Option<&[crate::types::Entity]> {
        self.entities.as_deref()
    }
    /// <p>Attributes extracted from the input text that couldn't be related to an entity.</p>
    pub fn unmapped_attributes(&self) -> std::option::Option<&[crate::types::UnmappedAttribute]> {
        self.unmapped_attributes.as_deref()
    }
    /// <p>If the result to the <code>DetectEntitiesV2</code> operation was truncated, include the <code>PaginationToken</code> to fetch the next page of entities.</p>
    pub fn pagination_token(&self) -> std::option::Option<&str> {
        self.pagination_token.as_deref()
    }
    /// <p>The version of the model used to analyze the documents. The version number looks like X.X.X. You can use this information to track the model used for a particular batch of documents.</p>
    pub fn model_version(&self) -> std::option::Option<&str> {
        self.model_version.as_deref()
    }
}
impl aws_http::request_id::RequestId for DetectEntitiesV2Output {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DetectEntitiesV2Output {
    /// Creates a new builder-style object to manufacture [`DetectEntitiesV2Output`](crate::operation::detect_entities_v2::DetectEntitiesV2Output).
    pub fn builder() -> crate::operation::detect_entities_v2::builders::DetectEntitiesV2OutputBuilder
    {
        crate::operation::detect_entities_v2::builders::DetectEntitiesV2OutputBuilder::default()
    }
}

/// A builder for [`DetectEntitiesV2Output`](crate::operation::detect_entities_v2::DetectEntitiesV2Output).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DetectEntitiesV2OutputBuilder {
    pub(crate) entities: std::option::Option<std::vec::Vec<crate::types::Entity>>,
    pub(crate) unmapped_attributes:
        std::option::Option<std::vec::Vec<crate::types::UnmappedAttribute>>,
    pub(crate) pagination_token: std::option::Option<std::string::String>,
    pub(crate) model_version: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DetectEntitiesV2OutputBuilder {
    /// Appends an item to `entities`.
    ///
    /// To override the contents of this collection use [`set_entities`](Self::set_entities).
    ///
    /// <p>The collection of medical entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence in the detection and analysis. Attributes and traits of the entity are also returned.</p>
    pub fn entities(mut self, input: crate::types::Entity) -> Self {
        let mut v = self.entities.unwrap_or_default();
        v.push(input);
        self.entities = Some(v);
        self
    }
    /// <p>The collection of medical entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence in the detection and analysis. Attributes and traits of the entity are also returned.</p>
    pub fn set_entities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Entity>>,
    ) -> Self {
        self.entities = input;
        self
    }
    /// Appends an item to `unmapped_attributes`.
    ///
    /// To override the contents of this collection use [`set_unmapped_attributes`](Self::set_unmapped_attributes).
    ///
    /// <p>Attributes extracted from the input text that couldn't be related to an entity.</p>
    pub fn unmapped_attributes(mut self, input: crate::types::UnmappedAttribute) -> Self {
        let mut v = self.unmapped_attributes.unwrap_or_default();
        v.push(input);
        self.unmapped_attributes = Some(v);
        self
    }
    /// <p>Attributes extracted from the input text that couldn't be related to an entity.</p>
    pub fn set_unmapped_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UnmappedAttribute>>,
    ) -> Self {
        self.unmapped_attributes = input;
        self
    }
    /// <p>If the result to the <code>DetectEntitiesV2</code> operation was truncated, include the <code>PaginationToken</code> to fetch the next page of entities.</p>
    pub fn pagination_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.pagination_token = Some(input.into());
        self
    }
    /// <p>If the result to the <code>DetectEntitiesV2</code> operation was truncated, include the <code>PaginationToken</code> to fetch the next page of entities.</p>
    pub fn set_pagination_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pagination_token = input;
        self
    }
    /// <p>The version of the model used to analyze the documents. The version number looks like X.X.X. You can use this information to track the model used for a particular batch of documents.</p>
    pub fn model_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_version = Some(input.into());
        self
    }
    /// <p>The version of the model used to analyze the documents. The version number looks like X.X.X. You can use this information to track the model used for a particular batch of documents.</p>
    pub fn set_model_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_version = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DetectEntitiesV2Output`](crate::operation::detect_entities_v2::DetectEntitiesV2Output).
    pub fn build(self) -> crate::operation::detect_entities_v2::DetectEntitiesV2Output {
        crate::operation::detect_entities_v2::DetectEntitiesV2Output {
            entities: self.entities,
            unmapped_attributes: self.unmapped_attributes,
            pagination_token: self.pagination_token,
            model_version: self.model_version,
            _request_id: self._request_id,
        }
    }
}
