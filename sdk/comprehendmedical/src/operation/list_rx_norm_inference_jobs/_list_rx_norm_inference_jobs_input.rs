// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRxNormInferenceJobsInput {
    /// <p>Filters the jobs that are returned. You can filter jobs based on their names, status, or the date and time that they were submitted. You can only set one filter at a time.</p>
    pub filter: ::std::option::Option<crate::types::ComprehendMedicalAsyncJobFilter>,
    /// <p>Identifies the next page of results to return.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Identifies the next page of results to return.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListRxNormInferenceJobsInput {
    /// <p>Filters the jobs that are returned. You can filter jobs based on their names, status, or the date and time that they were submitted. You can only set one filter at a time.</p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::ComprehendMedicalAsyncJobFilter> {
        self.filter.as_ref()
    }
    /// <p>Identifies the next page of results to return.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Identifies the next page of results to return.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListRxNormInferenceJobsInput {
    /// Creates a new builder-style object to manufacture [`ListRxNormInferenceJobsInput`](crate::operation::list_rx_norm_inference_jobs::ListRxNormInferenceJobsInput).
    pub fn builder() -> crate::operation::list_rx_norm_inference_jobs::builders::ListRxNormInferenceJobsInputBuilder {
        crate::operation::list_rx_norm_inference_jobs::builders::ListRxNormInferenceJobsInputBuilder::default()
    }
}

/// A builder for [`ListRxNormInferenceJobsInput`](crate::operation::list_rx_norm_inference_jobs::ListRxNormInferenceJobsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListRxNormInferenceJobsInputBuilder {
    pub(crate) filter: ::std::option::Option<crate::types::ComprehendMedicalAsyncJobFilter>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListRxNormInferenceJobsInputBuilder {
    /// <p>Filters the jobs that are returned. You can filter jobs based on their names, status, or the date and time that they were submitted. You can only set one filter at a time.</p>
    pub fn filter(mut self, input: crate::types::ComprehendMedicalAsyncJobFilter) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filters the jobs that are returned. You can filter jobs based on their names, status, or the date and time that they were submitted. You can only set one filter at a time.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::ComprehendMedicalAsyncJobFilter>) -> Self {
        self.filter = input;
        self
    }
    /// <p>Filters the jobs that are returned. You can filter jobs based on their names, status, or the date and time that they were submitted. You can only set one filter at a time.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::ComprehendMedicalAsyncJobFilter> {
        &self.filter
    }
    /// <p>Identifies the next page of results to return.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies the next page of results to return.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Identifies the next page of results to return.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Identifies the next page of results to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies the next page of results to return.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Identifies the next page of results to return.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListRxNormInferenceJobsInput`](crate::operation::list_rx_norm_inference_jobs::ListRxNormInferenceJobsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_rx_norm_inference_jobs::ListRxNormInferenceJobsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_rx_norm_inference_jobs::ListRxNormInferenceJobsInput {
            filter: self.filter,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
