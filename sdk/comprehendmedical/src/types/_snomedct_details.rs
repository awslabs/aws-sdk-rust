// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The information about the revision of the SNOMED-CT ontology in the response. Specifically, the details include the SNOMED-CT edition, language, and version date. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SnomedctDetails {
    /// <p> The edition of SNOMED-CT used. The edition used for the InferSNOMEDCT editions is the US edition. </p>
    #[doc(hidden)]
    pub edition: std::option::Option<std::string::String>,
    /// <p> The language used in the SNOMED-CT ontology. All Amazon Comprehend Medical operations are US English (en). </p>
    #[doc(hidden)]
    pub language: std::option::Option<std::string::String>,
    /// <p> The version date of the SNOMED-CT ontology used. </p>
    #[doc(hidden)]
    pub version_date: std::option::Option<std::string::String>,
}
impl SnomedctDetails {
    /// <p> The edition of SNOMED-CT used. The edition used for the InferSNOMEDCT editions is the US edition. </p>
    pub fn edition(&self) -> std::option::Option<&str> {
        self.edition.as_deref()
    }
    /// <p> The language used in the SNOMED-CT ontology. All Amazon Comprehend Medical operations are US English (en). </p>
    pub fn language(&self) -> std::option::Option<&str> {
        self.language.as_deref()
    }
    /// <p> The version date of the SNOMED-CT ontology used. </p>
    pub fn version_date(&self) -> std::option::Option<&str> {
        self.version_date.as_deref()
    }
}
impl SnomedctDetails {
    /// Creates a new builder-style object to manufacture [`SnomedctDetails`](crate::types::SnomedctDetails).
    pub fn builder() -> crate::types::builders::SnomedctDetailsBuilder {
        crate::types::builders::SnomedctDetailsBuilder::default()
    }
}

/// A builder for [`SnomedctDetails`](crate::types::SnomedctDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SnomedctDetailsBuilder {
    pub(crate) edition: std::option::Option<std::string::String>,
    pub(crate) language: std::option::Option<std::string::String>,
    pub(crate) version_date: std::option::Option<std::string::String>,
}
impl SnomedctDetailsBuilder {
    /// <p> The edition of SNOMED-CT used. The edition used for the InferSNOMEDCT editions is the US edition. </p>
    pub fn edition(mut self, input: impl Into<std::string::String>) -> Self {
        self.edition = Some(input.into());
        self
    }
    /// <p> The edition of SNOMED-CT used. The edition used for the InferSNOMEDCT editions is the US edition. </p>
    pub fn set_edition(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.edition = input;
        self
    }
    /// <p> The language used in the SNOMED-CT ontology. All Amazon Comprehend Medical operations are US English (en). </p>
    pub fn language(mut self, input: impl Into<std::string::String>) -> Self {
        self.language = Some(input.into());
        self
    }
    /// <p> The language used in the SNOMED-CT ontology. All Amazon Comprehend Medical operations are US English (en). </p>
    pub fn set_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.language = input;
        self
    }
    /// <p> The version date of the SNOMED-CT ontology used. </p>
    pub fn version_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.version_date = Some(input.into());
        self
    }
    /// <p> The version date of the SNOMED-CT ontology used. </p>
    pub fn set_version_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version_date = input;
        self
    }
    /// Consumes the builder and constructs a [`SnomedctDetails`](crate::types::SnomedctDetails).
    pub fn build(self) -> crate::types::SnomedctDetails {
        crate::types::SnomedctDetails {
            edition: self.edition,
            language: self.language,
            version_date: self.version_date,
        }
    }
}
