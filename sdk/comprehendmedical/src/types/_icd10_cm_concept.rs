// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The ICD-10-CM concepts that the entity could refer to, along with a score indicating the likelihood of the match.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Icd10CmConcept {
    /// <p>The long description of the ICD-10-CM code in the ontology.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The ICD-10-CM code that identifies the concept found in the knowledge base from the Centers for Disease Control.</p>
    #[doc(hidden)]
    pub code: std::option::Option<std::string::String>,
    /// <p>The level of confidence that Amazon Comprehend Medical has that the entity is accurately linked to an ICD-10-CM concept.</p>
    #[doc(hidden)]
    pub score: std::option::Option<f32>,
}
impl Icd10CmConcept {
    /// <p>The long description of the ICD-10-CM code in the ontology.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ICD-10-CM code that identifies the concept found in the knowledge base from the Centers for Disease Control.</p>
    pub fn code(&self) -> std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>The level of confidence that Amazon Comprehend Medical has that the entity is accurately linked to an ICD-10-CM concept.</p>
    pub fn score(&self) -> std::option::Option<f32> {
        self.score
    }
}
impl Icd10CmConcept {
    /// Creates a new builder-style object to manufacture [`Icd10CmConcept`](crate::types::Icd10CmConcept).
    pub fn builder() -> crate::types::builders::Icd10CmConceptBuilder {
        crate::types::builders::Icd10CmConceptBuilder::default()
    }
}

/// A builder for [`Icd10CmConcept`](crate::types::Icd10CmConcept).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct Icd10CmConceptBuilder {
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) code: std::option::Option<std::string::String>,
    pub(crate) score: std::option::Option<f32>,
}
impl Icd10CmConceptBuilder {
    /// <p>The long description of the ICD-10-CM code in the ontology.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The long description of the ICD-10-CM code in the ontology.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The ICD-10-CM code that identifies the concept found in the knowledge base from the Centers for Disease Control.</p>
    pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
        self.code = Some(input.into());
        self
    }
    /// <p>The ICD-10-CM code that identifies the concept found in the knowledge base from the Centers for Disease Control.</p>
    pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The level of confidence that Amazon Comprehend Medical has that the entity is accurately linked to an ICD-10-CM concept.</p>
    pub fn score(mut self, input: f32) -> Self {
        self.score = Some(input);
        self
    }
    /// <p>The level of confidence that Amazon Comprehend Medical has that the entity is accurately linked to an ICD-10-CM concept.</p>
    pub fn set_score(mut self, input: std::option::Option<f32>) -> Self {
        self.score = input;
        self
    }
    /// Consumes the builder and constructs a [`Icd10CmConcept`](crate::types::Icd10CmConcept).
    pub fn build(self) -> crate::types::Icd10CmConcept {
        crate::types::Icd10CmConcept {
            description: self.description,
            code: self.code,
            score: self.score,
        }
    }
}
