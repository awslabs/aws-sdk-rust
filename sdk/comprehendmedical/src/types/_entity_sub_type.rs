// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `EntitySubType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let entitysubtype = unimplemented!();
/// match entitysubtype {
///     EntitySubType::Acuity => { /* ... */ },
///     EntitySubType::Address => { /* ... */ },
///     EntitySubType::Age => { /* ... */ },
///     EntitySubType::AlcoholConsumption => { /* ... */ },
///     EntitySubType::Allergies => { /* ... */ },
///     EntitySubType::Amount => { /* ... */ },
///     EntitySubType::BrandName => { /* ... */ },
///     EntitySubType::ContactPoint => { /* ... */ },
///     EntitySubType::Date => { /* ... */ },
///     EntitySubType::Direction => { /* ... */ },
///     EntitySubType::Dosage => { /* ... */ },
///     EntitySubType::Duration => { /* ... */ },
///     EntitySubType::DxName => { /* ... */ },
///     EntitySubType::Email => { /* ... */ },
///     EntitySubType::Form => { /* ... */ },
///     EntitySubType::Frequency => { /* ... */ },
///     EntitySubType::Gender => { /* ... */ },
///     EntitySubType::GenericName => { /* ... */ },
///     EntitySubType::Id => { /* ... */ },
///     EntitySubType::Identifier => { /* ... */ },
///     EntitySubType::Name => { /* ... */ },
///     EntitySubType::PhoneOrFax => { /* ... */ },
///     EntitySubType::ProcedureName => { /* ... */ },
///     EntitySubType::Profession => { /* ... */ },
///     EntitySubType::Quality => { /* ... */ },
///     EntitySubType::Quantity => { /* ... */ },
///     EntitySubType::RaceEthnicity => { /* ... */ },
///     EntitySubType::Rate => { /* ... */ },
///     EntitySubType::RecDrugUse => { /* ... */ },
///     EntitySubType::RouteOrMode => { /* ... */ },
///     EntitySubType::Strength => { /* ... */ },
///     EntitySubType::SystemOrganSite => { /* ... */ },
///     EntitySubType::TestName => { /* ... */ },
///     EntitySubType::TestUnit => { /* ... */ },
///     EntitySubType::TestUnits => { /* ... */ },
///     EntitySubType::TestValue => { /* ... */ },
///     EntitySubType::TimeExpression => { /* ... */ },
///     EntitySubType::TimeToDxName => { /* ... */ },
///     EntitySubType::TimeToMedicationName => { /* ... */ },
///     EntitySubType::TimeToProcedureName => { /* ... */ },
///     EntitySubType::TimeToTestName => { /* ... */ },
///     EntitySubType::TimeToTreatmentName => { /* ... */ },
///     EntitySubType::TobaccoUse => { /* ... */ },
///     EntitySubType::TreatmentName => { /* ... */ },
///     EntitySubType::Url => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `entitysubtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `EntitySubType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `EntitySubType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `EntitySubType::NewFeature` is defined.
/// Specifically, when `entitysubtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `EntitySubType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum EntitySubType {
    #[allow(missing_docs)] // documentation missing in model
    Acuity,
    #[allow(missing_docs)] // documentation missing in model
    Address,
    #[allow(missing_docs)] // documentation missing in model
    Age,
    #[allow(missing_docs)] // documentation missing in model
    AlcoholConsumption,
    #[allow(missing_docs)] // documentation missing in model
    Allergies,
    #[allow(missing_docs)] // documentation missing in model
    Amount,
    #[allow(missing_docs)] // documentation missing in model
    BrandName,
    #[allow(missing_docs)] // documentation missing in model
    ContactPoint,
    #[allow(missing_docs)] // documentation missing in model
    Date,
    #[allow(missing_docs)] // documentation missing in model
    Direction,
    #[allow(missing_docs)] // documentation missing in model
    Dosage,
    #[allow(missing_docs)] // documentation missing in model
    Duration,
    #[allow(missing_docs)] // documentation missing in model
    DxName,
    #[allow(missing_docs)] // documentation missing in model
    Email,
    #[allow(missing_docs)] // documentation missing in model
    Form,
    #[allow(missing_docs)] // documentation missing in model
    Frequency,
    #[allow(missing_docs)] // documentation missing in model
    Gender,
    #[allow(missing_docs)] // documentation missing in model
    GenericName,
    #[allow(missing_docs)] // documentation missing in model
    Id,
    #[allow(missing_docs)] // documentation missing in model
    Identifier,
    #[allow(missing_docs)] // documentation missing in model
    Name,
    #[allow(missing_docs)] // documentation missing in model
    PhoneOrFax,
    #[allow(missing_docs)] // documentation missing in model
    ProcedureName,
    #[allow(missing_docs)] // documentation missing in model
    Profession,
    #[allow(missing_docs)] // documentation missing in model
    Quality,
    #[allow(missing_docs)] // documentation missing in model
    Quantity,
    #[allow(missing_docs)] // documentation missing in model
    RaceEthnicity,
    #[allow(missing_docs)] // documentation missing in model
    Rate,
    #[allow(missing_docs)] // documentation missing in model
    RecDrugUse,
    #[allow(missing_docs)] // documentation missing in model
    RouteOrMode,
    #[allow(missing_docs)] // documentation missing in model
    Strength,
    #[allow(missing_docs)] // documentation missing in model
    SystemOrganSite,
    #[allow(missing_docs)] // documentation missing in model
    TestName,
    #[allow(missing_docs)] // documentation missing in model
    TestUnit,
    #[allow(missing_docs)] // documentation missing in model
    TestUnits,
    #[allow(missing_docs)] // documentation missing in model
    TestValue,
    #[allow(missing_docs)] // documentation missing in model
    TimeExpression,
    #[allow(missing_docs)] // documentation missing in model
    TimeToDxName,
    #[allow(missing_docs)] // documentation missing in model
    TimeToMedicationName,
    #[allow(missing_docs)] // documentation missing in model
    TimeToProcedureName,
    #[allow(missing_docs)] // documentation missing in model
    TimeToTestName,
    #[allow(missing_docs)] // documentation missing in model
    TimeToTreatmentName,
    #[allow(missing_docs)] // documentation missing in model
    TobaccoUse,
    #[allow(missing_docs)] // documentation missing in model
    TreatmentName,
    #[allow(missing_docs)] // documentation missing in model
    Url,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for EntitySubType {
    fn from(s: &str) -> Self {
        match s {
            "ACUITY" => EntitySubType::Acuity,
            "ADDRESS" => EntitySubType::Address,
            "AGE" => EntitySubType::Age,
            "ALCOHOL_CONSUMPTION" => EntitySubType::AlcoholConsumption,
            "ALLERGIES" => EntitySubType::Allergies,
            "AMOUNT" => EntitySubType::Amount,
            "BRAND_NAME" => EntitySubType::BrandName,
            "CONTACT_POINT" => EntitySubType::ContactPoint,
            "DATE" => EntitySubType::Date,
            "DIRECTION" => EntitySubType::Direction,
            "DOSAGE" => EntitySubType::Dosage,
            "DURATION" => EntitySubType::Duration,
            "DX_NAME" => EntitySubType::DxName,
            "EMAIL" => EntitySubType::Email,
            "FORM" => EntitySubType::Form,
            "FREQUENCY" => EntitySubType::Frequency,
            "GENDER" => EntitySubType::Gender,
            "GENERIC_NAME" => EntitySubType::GenericName,
            "ID" => EntitySubType::Id,
            "IDENTIFIER" => EntitySubType::Identifier,
            "NAME" => EntitySubType::Name,
            "PHONE_OR_FAX" => EntitySubType::PhoneOrFax,
            "PROCEDURE_NAME" => EntitySubType::ProcedureName,
            "PROFESSION" => EntitySubType::Profession,
            "QUALITY" => EntitySubType::Quality,
            "QUANTITY" => EntitySubType::Quantity,
            "RACE_ETHNICITY" => EntitySubType::RaceEthnicity,
            "RATE" => EntitySubType::Rate,
            "REC_DRUG_USE" => EntitySubType::RecDrugUse,
            "ROUTE_OR_MODE" => EntitySubType::RouteOrMode,
            "STRENGTH" => EntitySubType::Strength,
            "SYSTEM_ORGAN_SITE" => EntitySubType::SystemOrganSite,
            "TEST_NAME" => EntitySubType::TestName,
            "TEST_UNIT" => EntitySubType::TestUnit,
            "TEST_UNITS" => EntitySubType::TestUnits,
            "TEST_VALUE" => EntitySubType::TestValue,
            "TIME_EXPRESSION" => EntitySubType::TimeExpression,
            "TIME_TO_DX_NAME" => EntitySubType::TimeToDxName,
            "TIME_TO_MEDICATION_NAME" => EntitySubType::TimeToMedicationName,
            "TIME_TO_PROCEDURE_NAME" => EntitySubType::TimeToProcedureName,
            "TIME_TO_TEST_NAME" => EntitySubType::TimeToTestName,
            "TIME_TO_TREATMENT_NAME" => EntitySubType::TimeToTreatmentName,
            "TOBACCO_USE" => EntitySubType::TobaccoUse,
            "TREATMENT_NAME" => EntitySubType::TreatmentName,
            "URL" => EntitySubType::Url,
            other => {
                EntitySubType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for EntitySubType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(EntitySubType::from(s))
    }
}
impl EntitySubType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            EntitySubType::Acuity => "ACUITY",
            EntitySubType::Address => "ADDRESS",
            EntitySubType::Age => "AGE",
            EntitySubType::AlcoholConsumption => "ALCOHOL_CONSUMPTION",
            EntitySubType::Allergies => "ALLERGIES",
            EntitySubType::Amount => "AMOUNT",
            EntitySubType::BrandName => "BRAND_NAME",
            EntitySubType::ContactPoint => "CONTACT_POINT",
            EntitySubType::Date => "DATE",
            EntitySubType::Direction => "DIRECTION",
            EntitySubType::Dosage => "DOSAGE",
            EntitySubType::Duration => "DURATION",
            EntitySubType::DxName => "DX_NAME",
            EntitySubType::Email => "EMAIL",
            EntitySubType::Form => "FORM",
            EntitySubType::Frequency => "FREQUENCY",
            EntitySubType::Gender => "GENDER",
            EntitySubType::GenericName => "GENERIC_NAME",
            EntitySubType::Id => "ID",
            EntitySubType::Identifier => "IDENTIFIER",
            EntitySubType::Name => "NAME",
            EntitySubType::PhoneOrFax => "PHONE_OR_FAX",
            EntitySubType::ProcedureName => "PROCEDURE_NAME",
            EntitySubType::Profession => "PROFESSION",
            EntitySubType::Quality => "QUALITY",
            EntitySubType::Quantity => "QUANTITY",
            EntitySubType::RaceEthnicity => "RACE_ETHNICITY",
            EntitySubType::Rate => "RATE",
            EntitySubType::RecDrugUse => "REC_DRUG_USE",
            EntitySubType::RouteOrMode => "ROUTE_OR_MODE",
            EntitySubType::Strength => "STRENGTH",
            EntitySubType::SystemOrganSite => "SYSTEM_ORGAN_SITE",
            EntitySubType::TestName => "TEST_NAME",
            EntitySubType::TestUnit => "TEST_UNIT",
            EntitySubType::TestUnits => "TEST_UNITS",
            EntitySubType::TestValue => "TEST_VALUE",
            EntitySubType::TimeExpression => "TIME_EXPRESSION",
            EntitySubType::TimeToDxName => "TIME_TO_DX_NAME",
            EntitySubType::TimeToMedicationName => "TIME_TO_MEDICATION_NAME",
            EntitySubType::TimeToProcedureName => "TIME_TO_PROCEDURE_NAME",
            EntitySubType::TimeToTestName => "TIME_TO_TEST_NAME",
            EntitySubType::TimeToTreatmentName => "TIME_TO_TREATMENT_NAME",
            EntitySubType::TobaccoUse => "TOBACCO_USE",
            EntitySubType::TreatmentName => "TREATMENT_NAME",
            EntitySubType::Url => "URL",
            EntitySubType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACUITY",
            "ADDRESS",
            "AGE",
            "ALCOHOL_CONSUMPTION",
            "ALLERGIES",
            "AMOUNT",
            "BRAND_NAME",
            "CONTACT_POINT",
            "DATE",
            "DIRECTION",
            "DOSAGE",
            "DURATION",
            "DX_NAME",
            "EMAIL",
            "FORM",
            "FREQUENCY",
            "GENDER",
            "GENERIC_NAME",
            "ID",
            "IDENTIFIER",
            "NAME",
            "PHONE_OR_FAX",
            "PROCEDURE_NAME",
            "PROFESSION",
            "QUALITY",
            "QUANTITY",
            "RACE_ETHNICITY",
            "RATE",
            "REC_DRUG_USE",
            "ROUTE_OR_MODE",
            "STRENGTH",
            "SYSTEM_ORGAN_SITE",
            "TEST_NAME",
            "TEST_UNIT",
            "TEST_UNITS",
            "TEST_VALUE",
            "TIME_EXPRESSION",
            "TIME_TO_DX_NAME",
            "TIME_TO_MEDICATION_NAME",
            "TIME_TO_PROCEDURE_NAME",
            "TIME_TO_TEST_NAME",
            "TIME_TO_TREATMENT_NAME",
            "TOBACCO_USE",
            "TREATMENT_NAME",
            "URL",
        ]
    }
}
impl AsRef<str> for EntitySubType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
