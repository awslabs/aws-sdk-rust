// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> An attribute that was extracted, but Comprehend Medical; was unable to relate to an entity. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UnmappedAttribute {
    /// <p> The type of the unmapped attribute, could be one of the following values: "MEDICATION", "MEDICAL_CONDITION", "ANATOMY", "TEST_AND_TREATMENT_PROCEDURE" or "PROTECTED_HEALTH_INFORMATION". </p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::EntityType>,
    /// <p> The specific attribute that has been extracted but not mapped to an entity. </p>
    #[doc(hidden)]
    pub attribute: std::option::Option<crate::types::Attribute>,
}
impl UnmappedAttribute {
    /// <p> The type of the unmapped attribute, could be one of the following values: "MEDICATION", "MEDICAL_CONDITION", "ANATOMY", "TEST_AND_TREATMENT_PROCEDURE" or "PROTECTED_HEALTH_INFORMATION". </p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::EntityType> {
        self.r#type.as_ref()
    }
    /// <p> The specific attribute that has been extracted but not mapped to an entity. </p>
    pub fn attribute(&self) -> std::option::Option<&crate::types::Attribute> {
        self.attribute.as_ref()
    }
}
impl UnmappedAttribute {
    /// Creates a new builder-style object to manufacture [`UnmappedAttribute`](crate::types::UnmappedAttribute).
    pub fn builder() -> crate::types::builders::UnmappedAttributeBuilder {
        crate::types::builders::UnmappedAttributeBuilder::default()
    }
}

/// A builder for [`UnmappedAttribute`](crate::types::UnmappedAttribute).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UnmappedAttributeBuilder {
    pub(crate) r#type: std::option::Option<crate::types::EntityType>,
    pub(crate) attribute: std::option::Option<crate::types::Attribute>,
}
impl UnmappedAttributeBuilder {
    /// <p> The type of the unmapped attribute, could be one of the following values: "MEDICATION", "MEDICAL_CONDITION", "ANATOMY", "TEST_AND_TREATMENT_PROCEDURE" or "PROTECTED_HEALTH_INFORMATION". </p>
    pub fn r#type(mut self, input: crate::types::EntityType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p> The type of the unmapped attribute, could be one of the following values: "MEDICATION", "MEDICAL_CONDITION", "ANATOMY", "TEST_AND_TREATMENT_PROCEDURE" or "PROTECTED_HEALTH_INFORMATION". </p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::EntityType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p> The specific attribute that has been extracted but not mapped to an entity. </p>
    pub fn attribute(mut self, input: crate::types::Attribute) -> Self {
        self.attribute = Some(input);
        self
    }
    /// <p> The specific attribute that has been extracted but not mapped to an entity. </p>
    pub fn set_attribute(mut self, input: std::option::Option<crate::types::Attribute>) -> Self {
        self.attribute = input;
        self
    }
    /// Consumes the builder and constructs a [`UnmappedAttribute`](crate::types::UnmappedAttribute).
    pub fn build(self) -> crate::types::UnmappedAttribute {
        crate::types::UnmappedAttribute {
            r#type: self.r#type,
            attribute: self.attribute,
        }
    }
}
