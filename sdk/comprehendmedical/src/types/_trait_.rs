// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Provides contextual information about the extracted entity. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Trait {
    /// <p> Provides a name or contextual description about the trait. </p>
    #[doc(hidden)]
    pub name: std::option::Option<crate::types::AttributeName>,
    /// <p> The level of confidence that Comprehend Medical; has in the accuracy of this trait.</p>
    #[doc(hidden)]
    pub score: std::option::Option<f32>,
}
impl Trait {
    /// <p> Provides a name or contextual description about the trait. </p>
    pub fn name(&self) -> std::option::Option<&crate::types::AttributeName> {
        self.name.as_ref()
    }
    /// <p> The level of confidence that Comprehend Medical; has in the accuracy of this trait.</p>
    pub fn score(&self) -> std::option::Option<f32> {
        self.score
    }
}
impl Trait {
    /// Creates a new builder-style object to manufacture [`Trait`](crate::types::Trait).
    pub fn builder() -> crate::types::builders::TraitBuilder {
        crate::types::builders::TraitBuilder::default()
    }
}

/// A builder for [`Trait`](crate::types::Trait).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TraitBuilder {
    pub(crate) name: std::option::Option<crate::types::AttributeName>,
    pub(crate) score: std::option::Option<f32>,
}
impl TraitBuilder {
    /// <p> Provides a name or contextual description about the trait. </p>
    pub fn name(mut self, input: crate::types::AttributeName) -> Self {
        self.name = Some(input);
        self
    }
    /// <p> Provides a name or contextual description about the trait. </p>
    pub fn set_name(mut self, input: std::option::Option<crate::types::AttributeName>) -> Self {
        self.name = input;
        self
    }
    /// <p> The level of confidence that Comprehend Medical; has in the accuracy of this trait.</p>
    pub fn score(mut self, input: f32) -> Self {
        self.score = Some(input);
        self
    }
    /// <p> The level of confidence that Comprehend Medical; has in the accuracy of this trait.</p>
    pub fn set_score(mut self, input: std::option::Option<f32>) -> Self {
        self.score = input;
        self
    }
    /// Consumes the builder and constructs a [`Trait`](crate::types::Trait).
    pub fn build(self) -> crate::types::Trait {
        crate::types::Trait {
            name: self.name,
            score: self.score,
        }
    }
}
