// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `RelationshipType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let relationshiptype = unimplemented!();
/// match relationshiptype {
///     RelationshipType::Acuity => { /* ... */ },
///     RelationshipType::AdministeredVia => { /* ... */ },
///     RelationshipType::Amount => { /* ... */ },
///     RelationshipType::Direction => { /* ... */ },
///     RelationshipType::Dosage => { /* ... */ },
///     RelationshipType::Duration => { /* ... */ },
///     RelationshipType::Every => { /* ... */ },
///     RelationshipType::For => { /* ... */ },
///     RelationshipType::Form => { /* ... */ },
///     RelationshipType::Frequency => { /* ... */ },
///     RelationshipType::Negative => { /* ... */ },
///     RelationshipType::Overlap => { /* ... */ },
///     RelationshipType::Rate => { /* ... */ },
///     RelationshipType::RouteOrMode => { /* ... */ },
///     RelationshipType::Strength => { /* ... */ },
///     RelationshipType::SystemOrganSite => { /* ... */ },
///     RelationshipType::TestUnit => { /* ... */ },
///     RelationshipType::TestUnits => { /* ... */ },
///     RelationshipType::TestValue => { /* ... */ },
///     RelationshipType::WithDosage => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `relationshiptype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `RelationshipType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `RelationshipType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `RelationshipType::NewFeature` is defined.
/// Specifically, when `relationshiptype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `RelationshipType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum RelationshipType {
    #[allow(missing_docs)] // documentation missing in model
    Acuity,
    #[allow(missing_docs)] // documentation missing in model
    AdministeredVia,
    #[allow(missing_docs)] // documentation missing in model
    Amount,
    #[allow(missing_docs)] // documentation missing in model
    Direction,
    #[allow(missing_docs)] // documentation missing in model
    Dosage,
    #[allow(missing_docs)] // documentation missing in model
    Duration,
    #[allow(missing_docs)] // documentation missing in model
    Every,
    #[allow(missing_docs)] // documentation missing in model
    For,
    #[allow(missing_docs)] // documentation missing in model
    Form,
    #[allow(missing_docs)] // documentation missing in model
    Frequency,
    #[allow(missing_docs)] // documentation missing in model
    Negative,
    #[allow(missing_docs)] // documentation missing in model
    Overlap,
    #[allow(missing_docs)] // documentation missing in model
    Rate,
    #[allow(missing_docs)] // documentation missing in model
    RouteOrMode,
    #[allow(missing_docs)] // documentation missing in model
    Strength,
    #[allow(missing_docs)] // documentation missing in model
    SystemOrganSite,
    #[allow(missing_docs)] // documentation missing in model
    TestUnit,
    #[allow(missing_docs)] // documentation missing in model
    TestUnits,
    #[allow(missing_docs)] // documentation missing in model
    TestValue,
    #[allow(missing_docs)] // documentation missing in model
    WithDosage,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for RelationshipType {
    fn from(s: &str) -> Self {
        match s {
            "ACUITY" => RelationshipType::Acuity,
            "ADMINISTERED_VIA" => RelationshipType::AdministeredVia,
            "AMOUNT" => RelationshipType::Amount,
            "DIRECTION" => RelationshipType::Direction,
            "DOSAGE" => RelationshipType::Dosage,
            "DURATION" => RelationshipType::Duration,
            "EVERY" => RelationshipType::Every,
            "FOR" => RelationshipType::For,
            "FORM" => RelationshipType::Form,
            "FREQUENCY" => RelationshipType::Frequency,
            "NEGATIVE" => RelationshipType::Negative,
            "OVERLAP" => RelationshipType::Overlap,
            "RATE" => RelationshipType::Rate,
            "ROUTE_OR_MODE" => RelationshipType::RouteOrMode,
            "STRENGTH" => RelationshipType::Strength,
            "SYSTEM_ORGAN_SITE" => RelationshipType::SystemOrganSite,
            "TEST_UNIT" => RelationshipType::TestUnit,
            "TEST_UNITS" => RelationshipType::TestUnits,
            "TEST_VALUE" => RelationshipType::TestValue,
            "WITH_DOSAGE" => RelationshipType::WithDosage,
            other => {
                RelationshipType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for RelationshipType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(RelationshipType::from(s))
    }
}
impl RelationshipType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            RelationshipType::Acuity => "ACUITY",
            RelationshipType::AdministeredVia => "ADMINISTERED_VIA",
            RelationshipType::Amount => "AMOUNT",
            RelationshipType::Direction => "DIRECTION",
            RelationshipType::Dosage => "DOSAGE",
            RelationshipType::Duration => "DURATION",
            RelationshipType::Every => "EVERY",
            RelationshipType::For => "FOR",
            RelationshipType::Form => "FORM",
            RelationshipType::Frequency => "FREQUENCY",
            RelationshipType::Negative => "NEGATIVE",
            RelationshipType::Overlap => "OVERLAP",
            RelationshipType::Rate => "RATE",
            RelationshipType::RouteOrMode => "ROUTE_OR_MODE",
            RelationshipType::Strength => "STRENGTH",
            RelationshipType::SystemOrganSite => "SYSTEM_ORGAN_SITE",
            RelationshipType::TestUnit => "TEST_UNIT",
            RelationshipType::TestUnits => "TEST_UNITS",
            RelationshipType::TestValue => "TEST_VALUE",
            RelationshipType::WithDosage => "WITH_DOSAGE",
            RelationshipType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACUITY",
            "ADMINISTERED_VIA",
            "AMOUNT",
            "DIRECTION",
            "DOSAGE",
            "DURATION",
            "EVERY",
            "FOR",
            "FORM",
            "FREQUENCY",
            "NEGATIVE",
            "OVERLAP",
            "RATE",
            "ROUTE_OR_MODE",
            "STRENGTH",
            "SYSTEM_ORGAN_SITE",
            "TEST_UNIT",
            "TEST_UNITS",
            "TEST_VALUE",
            "WITH_DOSAGE",
        ]
    }
}
impl AsRef<str> for RelationshipType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
