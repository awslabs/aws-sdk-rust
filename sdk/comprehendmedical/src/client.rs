// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Comprehend Medical
///
/// Client for invoking operations on AWS Comprehend Medical. Each operation on AWS Comprehend Medical is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_comprehendmedical::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_comprehendmedical::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_comprehendmedical::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`DescribeEntitiesDetectionV2Job`](crate::client::fluent_builders::DescribeEntitiesDetectionV2Job) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::DescribeEntitiesDetectionV2Job::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::DescribeEntitiesDetectionV2Job::set_job_id): <p>The identifier that Comprehend Medical; generated for the job. The <code>StartEntitiesDetectionV2Job</code> operation returns this identifier in its response.</p>
    /// - On success, responds with [`DescribeEntitiesDetectionV2JobOutput`](crate::output::DescribeEntitiesDetectionV2JobOutput) with field(s):
    ///   - [`comprehend_medical_async_job_properties(Option<ComprehendMedicalAsyncJobProperties>)`](crate::output::DescribeEntitiesDetectionV2JobOutput::comprehend_medical_async_job_properties): <p>An object that contains the properties associated with a detection job.</p>
    /// - On failure, responds with [`SdkError<DescribeEntitiesDetectionV2JobError>`](crate::error::DescribeEntitiesDetectionV2JobError)
    pub fn describe_entities_detection_v2_job(
        &self,
    ) -> crate::client::fluent_builders::DescribeEntitiesDetectionV2Job {
        crate::client::fluent_builders::DescribeEntitiesDetectionV2Job::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeICD10CMInferenceJob`](crate::client::fluent_builders::DescribeICD10CMInferenceJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::DescribeICD10CMInferenceJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::DescribeICD10CMInferenceJob::set_job_id): <p>The identifier that Amazon Comprehend Medical generated for the job. <code>The StartICD10CMInferenceJob</code> operation returns this identifier in its response.</p>
    /// - On success, responds with [`DescribeIcd10CmInferenceJobOutput`](crate::output::DescribeIcd10CmInferenceJobOutput) with field(s):
    ///   - [`comprehend_medical_async_job_properties(Option<ComprehendMedicalAsyncJobProperties>)`](crate::output::DescribeIcd10CmInferenceJobOutput::comprehend_medical_async_job_properties): <p>An object that contains the properties associated with a detection job.</p>
    /// - On failure, responds with [`SdkError<DescribeICD10CMInferenceJobError>`](crate::error::DescribeICD10CMInferenceJobError)
    pub fn describe_icd10_cm_inference_job(
        &self,
    ) -> crate::client::fluent_builders::DescribeICD10CMInferenceJob {
        crate::client::fluent_builders::DescribeICD10CMInferenceJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribePHIDetectionJob`](crate::client::fluent_builders::DescribePHIDetectionJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::DescribePHIDetectionJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::DescribePHIDetectionJob::set_job_id): <p>The identifier that Comprehend Medical; generated for the job. The <code>StartPHIDetectionJob</code> operation returns this identifier in its response.</p>
    /// - On success, responds with [`DescribePhiDetectionJobOutput`](crate::output::DescribePhiDetectionJobOutput) with field(s):
    ///   - [`comprehend_medical_async_job_properties(Option<ComprehendMedicalAsyncJobProperties>)`](crate::output::DescribePhiDetectionJobOutput::comprehend_medical_async_job_properties): <p>An object that contains the properties associated with a detection job.</p>
    /// - On failure, responds with [`SdkError<DescribePHIDetectionJobError>`](crate::error::DescribePHIDetectionJobError)
    pub fn describe_phi_detection_job(
        &self,
    ) -> crate::client::fluent_builders::DescribePHIDetectionJob {
        crate::client::fluent_builders::DescribePHIDetectionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeRxNormInferenceJob`](crate::client::fluent_builders::DescribeRxNormInferenceJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::DescribeRxNormInferenceJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::DescribeRxNormInferenceJob::set_job_id): <p>The identifier that Amazon Comprehend Medical generated for the job. The StartRxNormInferenceJob operation returns this identifier in its response.</p>
    /// - On success, responds with [`DescribeRxNormInferenceJobOutput`](crate::output::DescribeRxNormInferenceJobOutput) with field(s):
    ///   - [`comprehend_medical_async_job_properties(Option<ComprehendMedicalAsyncJobProperties>)`](crate::output::DescribeRxNormInferenceJobOutput::comprehend_medical_async_job_properties): <p>An object that contains the properties associated with a detection job.</p>
    /// - On failure, responds with [`SdkError<DescribeRxNormInferenceJobError>`](crate::error::DescribeRxNormInferenceJobError)
    pub fn describe_rx_norm_inference_job(
        &self,
    ) -> crate::client::fluent_builders::DescribeRxNormInferenceJob {
        crate::client::fluent_builders::DescribeRxNormInferenceJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeSNOMEDCTInferenceJob`](crate::client::fluent_builders::DescribeSNOMEDCTInferenceJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::DescribeSNOMEDCTInferenceJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::DescribeSNOMEDCTInferenceJob::set_job_id): <p> The identifier that Amazon Comprehend Medical generated for the job. The StartSNOMEDCTInferenceJob operation returns this identifier in its response. </p>
    /// - On success, responds with [`DescribeSnomedctInferenceJobOutput`](crate::output::DescribeSnomedctInferenceJobOutput) with field(s):
    ///   - [`comprehend_medical_async_job_properties(Option<ComprehendMedicalAsyncJobProperties>)`](crate::output::DescribeSnomedctInferenceJobOutput::comprehend_medical_async_job_properties): <p>Provides information about a detection job.</p>
    /// - On failure, responds with [`SdkError<DescribeSNOMEDCTInferenceJobError>`](crate::error::DescribeSNOMEDCTInferenceJobError)
    pub fn describe_snomedct_inference_job(
        &self,
    ) -> crate::client::fluent_builders::DescribeSNOMEDCTInferenceJob {
        crate::client::fluent_builders::DescribeSNOMEDCTInferenceJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DetectEntities`](crate::client::fluent_builders::DetectEntities) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`text(impl Into<String>)`](crate::client::fluent_builders::DetectEntities::text) / [`set_text(Option<String>)`](crate::client::fluent_builders::DetectEntities::set_text): <p> A UTF-8 text string containing the clinical content being examined for entities. Each string must contain fewer than 20,000 bytes of characters.</p>
    /// - On success, responds with [`DetectEntitiesOutput`](crate::output::DetectEntitiesOutput) with field(s):
    ///   - [`entities(Option<Vec<Entity>>)`](crate::output::DetectEntitiesOutput::entities): <p> The collection of medical entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence that Comprehend Medical; has in the detection and analysis. Attributes and traits of the entity are also returned.</p>
    ///   - [`unmapped_attributes(Option<Vec<UnmappedAttribute>>)`](crate::output::DetectEntitiesOutput::unmapped_attributes): <p> Attributes extracted from the input text that we were unable to relate to an entity.</p>
    ///   - [`pagination_token(Option<String>)`](crate::output::DetectEntitiesOutput::pagination_token): <p> If the result of the previous request to <code>DetectEntities</code> was truncated, include the <code>PaginationToken</code> to fetch the next page of entities.</p>
    ///   - [`model_version(Option<String>)`](crate::output::DetectEntitiesOutput::model_version): <p>The version of the model used to analyze the documents. The version number looks like X.X.X. You can use this information to track the model used for a particular batch of documents.</p>
    /// - On failure, responds with [`SdkError<DetectEntitiesError>`](crate::error::DetectEntitiesError)
    #[deprecated(note = "This operation is deprecated, use DetectEntitiesV2 instead.")]
    pub fn detect_entities(&self) -> crate::client::fluent_builders::DetectEntities {
        crate::client::fluent_builders::DetectEntities::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DetectEntitiesV2`](crate::client::fluent_builders::DetectEntitiesV2) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`text(impl Into<String>)`](crate::client::fluent_builders::DetectEntitiesV2::text) / [`set_text(Option<String>)`](crate::client::fluent_builders::DetectEntitiesV2::set_text): <p>A UTF-8 string containing the clinical content being examined for entities. Each string must contain fewer than 20,000 bytes of characters.</p>
    /// - On success, responds with [`DetectEntitiesV2Output`](crate::output::DetectEntitiesV2Output) with field(s):
    ///   - [`entities(Option<Vec<Entity>>)`](crate::output::DetectEntitiesV2Output::entities): <p>The collection of medical entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence in the detection and analysis. Attributes and traits of the entity are also returned.</p>
    ///   - [`unmapped_attributes(Option<Vec<UnmappedAttribute>>)`](crate::output::DetectEntitiesV2Output::unmapped_attributes): <p>Attributes extracted from the input text that couldn't be related to an entity.</p>
    ///   - [`pagination_token(Option<String>)`](crate::output::DetectEntitiesV2Output::pagination_token): <p>If the result to the <code>DetectEntitiesV2</code> operation was truncated, include the <code>PaginationToken</code> to fetch the next page of entities.</p>
    ///   - [`model_version(Option<String>)`](crate::output::DetectEntitiesV2Output::model_version): <p>The version of the model used to analyze the documents. The version number looks like X.X.X. You can use this information to track the model used for a particular batch of documents.</p>
    /// - On failure, responds with [`SdkError<DetectEntitiesV2Error>`](crate::error::DetectEntitiesV2Error)
    pub fn detect_entities_v2(&self) -> crate::client::fluent_builders::DetectEntitiesV2 {
        crate::client::fluent_builders::DetectEntitiesV2::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DetectPHI`](crate::client::fluent_builders::DetectPHI) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`text(impl Into<String>)`](crate::client::fluent_builders::DetectPHI::text) / [`set_text(Option<String>)`](crate::client::fluent_builders::DetectPHI::set_text): <p> A UTF-8 text string containing the clinical content being examined for PHI entities. Each string must contain fewer than 20,000 bytes of characters.</p>
    /// - On success, responds with [`DetectPhiOutput`](crate::output::DetectPhiOutput) with field(s):
    ///   - [`entities(Option<Vec<Entity>>)`](crate::output::DetectPhiOutput::entities): <p> The collection of PHI entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence that Comprehend Medical; has in its detection. </p>
    ///   - [`pagination_token(Option<String>)`](crate::output::DetectPhiOutput::pagination_token): <p> If the result of the previous request to <code>DetectPHI</code> was truncated, include the <code>PaginationToken</code> to fetch the next page of PHI entities. </p>
    ///   - [`model_version(Option<String>)`](crate::output::DetectPhiOutput::model_version): <p>The version of the model used to analyze the documents. The version number looks like X.X.X. You can use this information to track the model used for a particular batch of documents.</p>
    /// - On failure, responds with [`SdkError<DetectPHIError>`](crate::error::DetectPHIError)
    pub fn detect_phi(&self) -> crate::client::fluent_builders::DetectPHI {
        crate::client::fluent_builders::DetectPHI::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`InferICD10CM`](crate::client::fluent_builders::InferICD10CM) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`text(impl Into<String>)`](crate::client::fluent_builders::InferICD10CM::text) / [`set_text(Option<String>)`](crate::client::fluent_builders::InferICD10CM::set_text): <p>The input text used for analysis. The input for InferICD10CM is a string from 1 to 10000 characters.</p>
    /// - On success, responds with [`InferIcd10CmOutput`](crate::output::InferIcd10CmOutput) with field(s):
    ///   - [`entities(Option<Vec<Icd10CmEntity>>)`](crate::output::InferIcd10CmOutput::entities): <p>The medical conditions detected in the text linked to ICD-10-CM concepts. If the action is successful, the service sends back an HTTP 200 response, as well as the entities detected.</p>
    ///   - [`pagination_token(Option<String>)`](crate::output::InferIcd10CmOutput::pagination_token): <p>If the result of the previous request to <code>InferICD10CM</code> was truncated, include the <code>PaginationToken</code> to fetch the next page of medical condition entities. </p>
    ///   - [`model_version(Option<String>)`](crate::output::InferIcd10CmOutput::model_version): <p>The version of the model used to analyze the documents, in the format <i>n</i>.<i>n</i>.<i>n</i> You can use this information to track the model used for a particular batch of documents.</p>
    /// - On failure, responds with [`SdkError<InferICD10CMError>`](crate::error::InferICD10CMError)
    pub fn infer_icd10_cm(&self) -> crate::client::fluent_builders::InferICD10CM {
        crate::client::fluent_builders::InferICD10CM::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`InferRxNorm`](crate::client::fluent_builders::InferRxNorm) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`text(impl Into<String>)`](crate::client::fluent_builders::InferRxNorm::text) / [`set_text(Option<String>)`](crate::client::fluent_builders::InferRxNorm::set_text): <p>The input text used for analysis. The input for InferRxNorm is a string from 1 to 10000 characters.</p>
    /// - On success, responds with [`InferRxNormOutput`](crate::output::InferRxNormOutput) with field(s):
    ///   - [`entities(Option<Vec<RxNormEntity>>)`](crate::output::InferRxNormOutput::entities): <p>The medication entities detected in the text linked to RxNorm concepts. If the action is successful, the service sends back an HTTP 200 response, as well as the entities detected.</p>
    ///   - [`pagination_token(Option<String>)`](crate::output::InferRxNormOutput::pagination_token): <p>If the result of the previous request to <code>InferRxNorm</code> was truncated, include the <code>PaginationToken</code> to fetch the next page of medication entities.</p>
    ///   - [`model_version(Option<String>)`](crate::output::InferRxNormOutput::model_version): <p>The version of the model used to analyze the documents, in the format <i>n</i>.<i>n</i>.<i>n</i> You can use this information to track the model used for a particular batch of documents.</p>
    /// - On failure, responds with [`SdkError<InferRxNormError>`](crate::error::InferRxNormError)
    pub fn infer_rx_norm(&self) -> crate::client::fluent_builders::InferRxNorm {
        crate::client::fluent_builders::InferRxNorm::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`InferSNOMEDCT`](crate::client::fluent_builders::InferSNOMEDCT) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`text(impl Into<String>)`](crate::client::fluent_builders::InferSNOMEDCT::text) / [`set_text(Option<String>)`](crate::client::fluent_builders::InferSNOMEDCT::set_text): <p> The input text to be analyzed using InferSNOMEDCT. The text should be a string with 1 to 10000 characters. </p>
    /// - On success, responds with [`InferSnomedctOutput`](crate::output::InferSnomedctOutput) with field(s):
    ///   - [`entities(Option<Vec<SnomedctEntity>>)`](crate::output::InferSnomedctOutput::entities): <p> The collection of medical concept entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence that Comprehend Medical has in the detection and analysis. Attributes and traits of the entity are also returned. </p>
    ///   - [`pagination_token(Option<String>)`](crate::output::InferSnomedctOutput::pagination_token): <p> If the result of the request is truncated, the pagination token can be used to fetch the next page of entities. </p>
    ///   - [`model_version(Option<String>)`](crate::output::InferSnomedctOutput::model_version): <p> The version of the model used to analyze the documents, in the format n.n.n You can use this information to track the model used for a particular batch of documents. </p>
    ///   - [`snomedct_details(Option<SnomedctDetails>)`](crate::output::InferSnomedctOutput::snomedct_details): <p> The details of the SNOMED-CT revision, including the edition, language, and version date. </p>
    ///   - [`characters(Option<Characters>)`](crate::output::InferSnomedctOutput::characters): <p> The number of characters in the input request documentation. </p>
    /// - On failure, responds with [`SdkError<InferSNOMEDCTError>`](crate::error::InferSNOMEDCTError)
    pub fn infer_snomedct(&self) -> crate::client::fluent_builders::InferSNOMEDCT {
        crate::client::fluent_builders::InferSNOMEDCT::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListEntitiesDetectionV2Jobs`](crate::client::fluent_builders::ListEntitiesDetectionV2Jobs) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`filter(ComprehendMedicalAsyncJobFilter)`](crate::client::fluent_builders::ListEntitiesDetectionV2Jobs::filter) / [`set_filter(Option<ComprehendMedicalAsyncJobFilter>)`](crate::client::fluent_builders::ListEntitiesDetectionV2Jobs::set_filter): <p>Filters the jobs that are returned. You can filter jobs based on their names, status, or the date and time that they were submitted. You can only set one filter at a time.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListEntitiesDetectionV2Jobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListEntitiesDetectionV2Jobs::set_next_token): <p>Identifies the next page of results to return.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListEntitiesDetectionV2Jobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListEntitiesDetectionV2Jobs::set_max_results): <p>The maximum number of results to return in each page. The default is 100.</p>
    /// - On success, responds with [`ListEntitiesDetectionV2JobsOutput`](crate::output::ListEntitiesDetectionV2JobsOutput) with field(s):
    ///   - [`comprehend_medical_async_job_properties_list(Option<Vec<ComprehendMedicalAsyncJobProperties>>)`](crate::output::ListEntitiesDetectionV2JobsOutput::comprehend_medical_async_job_properties_list): <p>A list containing the properties of each job returned.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListEntitiesDetectionV2JobsOutput::next_token): <p>Identifies the next page of results to return.</p>
    /// - On failure, responds with [`SdkError<ListEntitiesDetectionV2JobsError>`](crate::error::ListEntitiesDetectionV2JobsError)
    pub fn list_entities_detection_v2_jobs(
        &self,
    ) -> crate::client::fluent_builders::ListEntitiesDetectionV2Jobs {
        crate::client::fluent_builders::ListEntitiesDetectionV2Jobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListICD10CMInferenceJobs`](crate::client::fluent_builders::ListICD10CMInferenceJobs) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`filter(ComprehendMedicalAsyncJobFilter)`](crate::client::fluent_builders::ListICD10CMInferenceJobs::filter) / [`set_filter(Option<ComprehendMedicalAsyncJobFilter>)`](crate::client::fluent_builders::ListICD10CMInferenceJobs::set_filter): <p>Filters the jobs that are returned. You can filter jobs based on their names, status, or the date and time that they were submitted. You can only set one filter at a time.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListICD10CMInferenceJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListICD10CMInferenceJobs::set_next_token): <p>Identifies the next page of results to return.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListICD10CMInferenceJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListICD10CMInferenceJobs::set_max_results): <p>The maximum number of results to return in each page. The default is 100.</p>
    /// - On success, responds with [`ListIcd10CmInferenceJobsOutput`](crate::output::ListIcd10CmInferenceJobsOutput) with field(s):
    ///   - [`comprehend_medical_async_job_properties_list(Option<Vec<ComprehendMedicalAsyncJobProperties>>)`](crate::output::ListIcd10CmInferenceJobsOutput::comprehend_medical_async_job_properties_list): <p>A list containing the properties of each job that is returned.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListIcd10CmInferenceJobsOutput::next_token): <p>Identifies the next page of results to return.</p>
    /// - On failure, responds with [`SdkError<ListICD10CMInferenceJobsError>`](crate::error::ListICD10CMInferenceJobsError)
    pub fn list_icd10_cm_inference_jobs(
        &self,
    ) -> crate::client::fluent_builders::ListICD10CMInferenceJobs {
        crate::client::fluent_builders::ListICD10CMInferenceJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPHIDetectionJobs`](crate::client::fluent_builders::ListPHIDetectionJobs) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`filter(ComprehendMedicalAsyncJobFilter)`](crate::client::fluent_builders::ListPHIDetectionJobs::filter) / [`set_filter(Option<ComprehendMedicalAsyncJobFilter>)`](crate::client::fluent_builders::ListPHIDetectionJobs::set_filter): <p>Filters the jobs that are returned. You can filter jobs based on their names, status, or the date and time that they were submitted. You can only set one filter at a time.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPHIDetectionJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPHIDetectionJobs::set_next_token): <p>Identifies the next page of results to return.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPHIDetectionJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPHIDetectionJobs::set_max_results): <p>The maximum number of results to return in each page. The default is 100.</p>
    /// - On success, responds with [`ListPhiDetectionJobsOutput`](crate::output::ListPhiDetectionJobsOutput) with field(s):
    ///   - [`comprehend_medical_async_job_properties_list(Option<Vec<ComprehendMedicalAsyncJobProperties>>)`](crate::output::ListPhiDetectionJobsOutput::comprehend_medical_async_job_properties_list): <p>A list containing the properties of each job returned.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPhiDetectionJobsOutput::next_token): <p>Identifies the next page of results to return.</p>
    /// - On failure, responds with [`SdkError<ListPHIDetectionJobsError>`](crate::error::ListPHIDetectionJobsError)
    pub fn list_phi_detection_jobs(&self) -> crate::client::fluent_builders::ListPHIDetectionJobs {
        crate::client::fluent_builders::ListPHIDetectionJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListRxNormInferenceJobs`](crate::client::fluent_builders::ListRxNormInferenceJobs) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`filter(ComprehendMedicalAsyncJobFilter)`](crate::client::fluent_builders::ListRxNormInferenceJobs::filter) / [`set_filter(Option<ComprehendMedicalAsyncJobFilter>)`](crate::client::fluent_builders::ListRxNormInferenceJobs::set_filter): <p>Filters the jobs that are returned. You can filter jobs based on their names, status, or the date and time that they were submitted. You can only set one filter at a time.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListRxNormInferenceJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListRxNormInferenceJobs::set_next_token): <p>Identifies the next page of results to return.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListRxNormInferenceJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListRxNormInferenceJobs::set_max_results): <p>Identifies the next page of results to return.</p>
    /// - On success, responds with [`ListRxNormInferenceJobsOutput`](crate::output::ListRxNormInferenceJobsOutput) with field(s):
    ///   - [`comprehend_medical_async_job_properties_list(Option<Vec<ComprehendMedicalAsyncJobProperties>>)`](crate::output::ListRxNormInferenceJobsOutput::comprehend_medical_async_job_properties_list): <p>The maximum number of results to return in each page. The default is 100.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListRxNormInferenceJobsOutput::next_token): <p>Identifies the next page of results to return.</p>
    /// - On failure, responds with [`SdkError<ListRxNormInferenceJobsError>`](crate::error::ListRxNormInferenceJobsError)
    pub fn list_rx_norm_inference_jobs(
        &self,
    ) -> crate::client::fluent_builders::ListRxNormInferenceJobs {
        crate::client::fluent_builders::ListRxNormInferenceJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSNOMEDCTInferenceJobs`](crate::client::fluent_builders::ListSNOMEDCTInferenceJobs) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`filter(ComprehendMedicalAsyncJobFilter)`](crate::client::fluent_builders::ListSNOMEDCTInferenceJobs::filter) / [`set_filter(Option<ComprehendMedicalAsyncJobFilter>)`](crate::client::fluent_builders::ListSNOMEDCTInferenceJobs::set_filter): <p>Provides information for filtering a list of detection jobs.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListSNOMEDCTInferenceJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListSNOMEDCTInferenceJobs::set_next_token): <p> Identifies the next page of InferSNOMEDCT results to return. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListSNOMEDCTInferenceJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListSNOMEDCTInferenceJobs::set_max_results): <p> The maximum number of results to return in each page. The default is 100. </p>
    /// - On success, responds with [`ListSnomedctInferenceJobsOutput`](crate::output::ListSnomedctInferenceJobsOutput) with field(s):
    ///   - [`comprehend_medical_async_job_properties_list(Option<Vec<ComprehendMedicalAsyncJobProperties>>)`](crate::output::ListSnomedctInferenceJobsOutput::comprehend_medical_async_job_properties_list): <p> A list containing the properties of each job that is returned. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListSnomedctInferenceJobsOutput::next_token): <p> Identifies the next page of results to return. </p>
    /// - On failure, responds with [`SdkError<ListSNOMEDCTInferenceJobsError>`](crate::error::ListSNOMEDCTInferenceJobsError)
    pub fn list_snomedct_inference_jobs(
        &self,
    ) -> crate::client::fluent_builders::ListSNOMEDCTInferenceJobs {
        crate::client::fluent_builders::ListSNOMEDCTInferenceJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartEntitiesDetectionV2Job`](crate::client::fluent_builders::StartEntitiesDetectionV2Job) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`input_data_config(InputDataConfig)`](crate::client::fluent_builders::StartEntitiesDetectionV2Job::input_data_config) / [`set_input_data_config(Option<InputDataConfig>)`](crate::client::fluent_builders::StartEntitiesDetectionV2Job::set_input_data_config): <p>The input configuration that specifies the format and location of the input data for the job.</p>
    ///   - [`output_data_config(OutputDataConfig)`](crate::client::fluent_builders::StartEntitiesDetectionV2Job::output_data_config) / [`set_output_data_config(Option<OutputDataConfig>)`](crate::client::fluent_builders::StartEntitiesDetectionV2Job::set_output_data_config): <p>The output configuration that specifies where to send the output files.</p>
    ///   - [`data_access_role_arn(impl Into<String>)`](crate::client::fluent_builders::StartEntitiesDetectionV2Job::data_access_role_arn) / [`set_data_access_role_arn(Option<String>)`](crate::client::fluent_builders::StartEntitiesDetectionV2Job::set_data_access_role_arn): <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Comprehend Medical; read access to your input data. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions-med.html#auth-role-permissions-med"> Role-Based Permissions Required for Asynchronous Operations</a>.</p>
    ///   - [`job_name(impl Into<String>)`](crate::client::fluent_builders::StartEntitiesDetectionV2Job::job_name) / [`set_job_name(Option<String>)`](crate::client::fluent_builders::StartEntitiesDetectionV2Job::set_job_name): <p>The identifier of the job.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::StartEntitiesDetectionV2Job::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::StartEntitiesDetectionV2Job::set_client_request_token): <p>A unique identifier for the request. If you don't set the client request token, Comprehend Medical; generates one for you.</p>
    ///   - [`kms_key(impl Into<String>)`](crate::client::fluent_builders::StartEntitiesDetectionV2Job::kms_key) / [`set_kms_key(Option<String>)`](crate::client::fluent_builders::StartEntitiesDetectionV2Job::set_kms_key): <p>An AWS Key Management Service key to encrypt your output files. If you do not specify a key, the files are written in plain text.</p>
    ///   - [`language_code(LanguageCode)`](crate::client::fluent_builders::StartEntitiesDetectionV2Job::language_code) / [`set_language_code(Option<LanguageCode>)`](crate::client::fluent_builders::StartEntitiesDetectionV2Job::set_language_code): <p>The language of the input documents. All documents must be in the same language. Comprehend Medical; processes files in US English (en).</p>
    /// - On success, responds with [`StartEntitiesDetectionV2JobOutput`](crate::output::StartEntitiesDetectionV2JobOutput) with field(s):
    ///   - [`job_id(Option<String>)`](crate::output::StartEntitiesDetectionV2JobOutput::job_id): <p>The identifier generated for the job. To get the status of a job, use this identifier with the <code>DescribeEntitiesDetectionV2Job</code> operation.</p>
    /// - On failure, responds with [`SdkError<StartEntitiesDetectionV2JobError>`](crate::error::StartEntitiesDetectionV2JobError)
    pub fn start_entities_detection_v2_job(
        &self,
    ) -> crate::client::fluent_builders::StartEntitiesDetectionV2Job {
        crate::client::fluent_builders::StartEntitiesDetectionV2Job::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartICD10CMInferenceJob`](crate::client::fluent_builders::StartICD10CMInferenceJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`input_data_config(InputDataConfig)`](crate::client::fluent_builders::StartICD10CMInferenceJob::input_data_config) / [`set_input_data_config(Option<InputDataConfig>)`](crate::client::fluent_builders::StartICD10CMInferenceJob::set_input_data_config): <p>Specifies the format and location of the input data for the job.</p>
    ///   - [`output_data_config(OutputDataConfig)`](crate::client::fluent_builders::StartICD10CMInferenceJob::output_data_config) / [`set_output_data_config(Option<OutputDataConfig>)`](crate::client::fluent_builders::StartICD10CMInferenceJob::set_output_data_config): <p>Specifies where to send the output files.</p>
    ///   - [`data_access_role_arn(impl Into<String>)`](crate::client::fluent_builders::StartICD10CMInferenceJob::data_access_role_arn) / [`set_data_access_role_arn(Option<String>)`](crate::client::fluent_builders::StartICD10CMInferenceJob::set_data_access_role_arn): <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Comprehend Medical; read access to your input data. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions-med.html#auth-role-permissions-med"> Role-Based Permissions Required for Asynchronous Operations</a>.</p>
    ///   - [`job_name(impl Into<String>)`](crate::client::fluent_builders::StartICD10CMInferenceJob::job_name) / [`set_job_name(Option<String>)`](crate::client::fluent_builders::StartICD10CMInferenceJob::set_job_name): <p>The identifier of the job.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::StartICD10CMInferenceJob::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::StartICD10CMInferenceJob::set_client_request_token): <p>A unique identifier for the request. If you don't set the client request token, Comprehend Medical; generates one.</p>
    ///   - [`kms_key(impl Into<String>)`](crate::client::fluent_builders::StartICD10CMInferenceJob::kms_key) / [`set_kms_key(Option<String>)`](crate::client::fluent_builders::StartICD10CMInferenceJob::set_kms_key): <p>An AWS Key Management Service key to encrypt your output files. If you do not specify a key, the files are written in plain text.</p>
    ///   - [`language_code(LanguageCode)`](crate::client::fluent_builders::StartICD10CMInferenceJob::language_code) / [`set_language_code(Option<LanguageCode>)`](crate::client::fluent_builders::StartICD10CMInferenceJob::set_language_code): <p>The language of the input documents. All documents must be in the same language.</p>
    /// - On success, responds with [`StartIcd10CmInferenceJobOutput`](crate::output::StartIcd10CmInferenceJobOutput) with field(s):
    ///   - [`job_id(Option<String>)`](crate::output::StartIcd10CmInferenceJobOutput::job_id): <p>The identifier generated for the job. To get the status of a job, use this identifier with the <code>StartICD10CMInferenceJob</code> operation.</p>
    /// - On failure, responds with [`SdkError<StartICD10CMInferenceJobError>`](crate::error::StartICD10CMInferenceJobError)
    pub fn start_icd10_cm_inference_job(
        &self,
    ) -> crate::client::fluent_builders::StartICD10CMInferenceJob {
        crate::client::fluent_builders::StartICD10CMInferenceJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartPHIDetectionJob`](crate::client::fluent_builders::StartPHIDetectionJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`input_data_config(InputDataConfig)`](crate::client::fluent_builders::StartPHIDetectionJob::input_data_config) / [`set_input_data_config(Option<InputDataConfig>)`](crate::client::fluent_builders::StartPHIDetectionJob::set_input_data_config): <p>Specifies the format and location of the input data for the job.</p>
    ///   - [`output_data_config(OutputDataConfig)`](crate::client::fluent_builders::StartPHIDetectionJob::output_data_config) / [`set_output_data_config(Option<OutputDataConfig>)`](crate::client::fluent_builders::StartPHIDetectionJob::set_output_data_config): <p>Specifies where to send the output files.</p>
    ///   - [`data_access_role_arn(impl Into<String>)`](crate::client::fluent_builders::StartPHIDetectionJob::data_access_role_arn) / [`set_data_access_role_arn(Option<String>)`](crate::client::fluent_builders::StartPHIDetectionJob::set_data_access_role_arn): <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Comprehend Medical; read access to your input data. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions-med.html#auth-role-permissions-med"> Role-Based Permissions Required for Asynchronous Operations</a>.</p>
    ///   - [`job_name(impl Into<String>)`](crate::client::fluent_builders::StartPHIDetectionJob::job_name) / [`set_job_name(Option<String>)`](crate::client::fluent_builders::StartPHIDetectionJob::set_job_name): <p>The identifier of the job.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::StartPHIDetectionJob::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::StartPHIDetectionJob::set_client_request_token): <p>A unique identifier for the request. If you don't set the client request token, Comprehend Medical; generates one.</p>
    ///   - [`kms_key(impl Into<String>)`](crate::client::fluent_builders::StartPHIDetectionJob::kms_key) / [`set_kms_key(Option<String>)`](crate::client::fluent_builders::StartPHIDetectionJob::set_kms_key): <p>An AWS Key Management Service key to encrypt your output files. If you do not specify a key, the files are written in plain text.</p>
    ///   - [`language_code(LanguageCode)`](crate::client::fluent_builders::StartPHIDetectionJob::language_code) / [`set_language_code(Option<LanguageCode>)`](crate::client::fluent_builders::StartPHIDetectionJob::set_language_code): <p>The language of the input documents. All documents must be in the same language.</p>
    /// - On success, responds with [`StartPhiDetectionJobOutput`](crate::output::StartPhiDetectionJobOutput) with field(s):
    ///   - [`job_id(Option<String>)`](crate::output::StartPhiDetectionJobOutput::job_id): <p>The identifier generated for the job. To get the status of a job, use this identifier with the <code>DescribePHIDetectionJob</code> operation.</p>
    /// - On failure, responds with [`SdkError<StartPHIDetectionJobError>`](crate::error::StartPHIDetectionJobError)
    pub fn start_phi_detection_job(&self) -> crate::client::fluent_builders::StartPHIDetectionJob {
        crate::client::fluent_builders::StartPHIDetectionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartRxNormInferenceJob`](crate::client::fluent_builders::StartRxNormInferenceJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`input_data_config(InputDataConfig)`](crate::client::fluent_builders::StartRxNormInferenceJob::input_data_config) / [`set_input_data_config(Option<InputDataConfig>)`](crate::client::fluent_builders::StartRxNormInferenceJob::set_input_data_config): <p>Specifies the format and location of the input data for the job.</p>
    ///   - [`output_data_config(OutputDataConfig)`](crate::client::fluent_builders::StartRxNormInferenceJob::output_data_config) / [`set_output_data_config(Option<OutputDataConfig>)`](crate::client::fluent_builders::StartRxNormInferenceJob::set_output_data_config): <p>Specifies where to send the output files.</p>
    ///   - [`data_access_role_arn(impl Into<String>)`](crate::client::fluent_builders::StartRxNormInferenceJob::data_access_role_arn) / [`set_data_access_role_arn(Option<String>)`](crate::client::fluent_builders::StartRxNormInferenceJob::set_data_access_role_arn): <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Comprehend Medical; read access to your input data. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions-med.html#auth-role-permissions-med"> Role-Based Permissions Required for Asynchronous Operations</a>.</p>
    ///   - [`job_name(impl Into<String>)`](crate::client::fluent_builders::StartRxNormInferenceJob::job_name) / [`set_job_name(Option<String>)`](crate::client::fluent_builders::StartRxNormInferenceJob::set_job_name): <p>The identifier of the job.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::StartRxNormInferenceJob::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::StartRxNormInferenceJob::set_client_request_token): <p>A unique identifier for the request. If you don't set the client request token, Comprehend Medical; generates one.</p>
    ///   - [`kms_key(impl Into<String>)`](crate::client::fluent_builders::StartRxNormInferenceJob::kms_key) / [`set_kms_key(Option<String>)`](crate::client::fluent_builders::StartRxNormInferenceJob::set_kms_key): <p>An AWS Key Management Service key to encrypt your output files. If you do not specify a key, the files are written in plain text.</p>
    ///   - [`language_code(LanguageCode)`](crate::client::fluent_builders::StartRxNormInferenceJob::language_code) / [`set_language_code(Option<LanguageCode>)`](crate::client::fluent_builders::StartRxNormInferenceJob::set_language_code): <p>The language of the input documents. All documents must be in the same language.</p>
    /// - On success, responds with [`StartRxNormInferenceJobOutput`](crate::output::StartRxNormInferenceJobOutput) with field(s):
    ///   - [`job_id(Option<String>)`](crate::output::StartRxNormInferenceJobOutput::job_id): <p>The identifier of the job.</p>
    /// - On failure, responds with [`SdkError<StartRxNormInferenceJobError>`](crate::error::StartRxNormInferenceJobError)
    pub fn start_rx_norm_inference_job(
        &self,
    ) -> crate::client::fluent_builders::StartRxNormInferenceJob {
        crate::client::fluent_builders::StartRxNormInferenceJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartSNOMEDCTInferenceJob`](crate::client::fluent_builders::StartSNOMEDCTInferenceJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`input_data_config(InputDataConfig)`](crate::client::fluent_builders::StartSNOMEDCTInferenceJob::input_data_config) / [`set_input_data_config(Option<InputDataConfig>)`](crate::client::fluent_builders::StartSNOMEDCTInferenceJob::set_input_data_config): <p>The input properties for an entities detection job. This includes the name of the S3 bucket and the path to the files to be analyzed. </p>
    ///   - [`output_data_config(OutputDataConfig)`](crate::client::fluent_builders::StartSNOMEDCTInferenceJob::output_data_config) / [`set_output_data_config(Option<OutputDataConfig>)`](crate::client::fluent_builders::StartSNOMEDCTInferenceJob::set_output_data_config): <p>The output properties for a detection job.</p>
    ///   - [`data_access_role_arn(impl Into<String>)`](crate::client::fluent_builders::StartSNOMEDCTInferenceJob::data_access_role_arn) / [`set_data_access_role_arn(Option<String>)`](crate::client::fluent_builders::StartSNOMEDCTInferenceJob::set_data_access_role_arn): <p> The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend Medical read access to your input data. </p>
    ///   - [`job_name(impl Into<String>)`](crate::client::fluent_builders::StartSNOMEDCTInferenceJob::job_name) / [`set_job_name(Option<String>)`](crate::client::fluent_builders::StartSNOMEDCTInferenceJob::set_job_name): <p> The user generated name the asynchronous InferSNOMEDCT job. </p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::StartSNOMEDCTInferenceJob::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::StartSNOMEDCTInferenceJob::set_client_request_token): <p> A unique identifier for the request. If you don't set the client request token, Amazon Comprehend Medical generates one. </p>
    ///   - [`kms_key(impl Into<String>)`](crate::client::fluent_builders::StartSNOMEDCTInferenceJob::kms_key) / [`set_kms_key(Option<String>)`](crate::client::fluent_builders::StartSNOMEDCTInferenceJob::set_kms_key): <p> An AWS Key Management Service key used to encrypt your output files. If you do not specify a key, the files are written in plain text. </p>
    ///   - [`language_code(LanguageCode)`](crate::client::fluent_builders::StartSNOMEDCTInferenceJob::language_code) / [`set_language_code(Option<LanguageCode>)`](crate::client::fluent_builders::StartSNOMEDCTInferenceJob::set_language_code): <p> The language of the input documents. All documents must be in the same language. </p>
    /// - On success, responds with [`StartSnomedctInferenceJobOutput`](crate::output::StartSnomedctInferenceJobOutput) with field(s):
    ///   - [`job_id(Option<String>)`](crate::output::StartSnomedctInferenceJobOutput::job_id): <p> The identifier generated for the job. To get the status of a job, use this identifier with the StartSNOMEDCTInferenceJob operation. </p>
    /// - On failure, responds with [`SdkError<StartSNOMEDCTInferenceJobError>`](crate::error::StartSNOMEDCTInferenceJobError)
    pub fn start_snomedct_inference_job(
        &self,
    ) -> crate::client::fluent_builders::StartSNOMEDCTInferenceJob {
        crate::client::fluent_builders::StartSNOMEDCTInferenceJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopEntitiesDetectionV2Job`](crate::client::fluent_builders::StopEntitiesDetectionV2Job) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::StopEntitiesDetectionV2Job::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::StopEntitiesDetectionV2Job::set_job_id): <p>The identifier of the medical entities job to stop.</p>
    /// - On success, responds with [`StopEntitiesDetectionV2JobOutput`](crate::output::StopEntitiesDetectionV2JobOutput) with field(s):
    ///   - [`job_id(Option<String>)`](crate::output::StopEntitiesDetectionV2JobOutput::job_id): <p>The identifier of the medical entities detection job that was stopped.</p>
    /// - On failure, responds with [`SdkError<StopEntitiesDetectionV2JobError>`](crate::error::StopEntitiesDetectionV2JobError)
    pub fn stop_entities_detection_v2_job(
        &self,
    ) -> crate::client::fluent_builders::StopEntitiesDetectionV2Job {
        crate::client::fluent_builders::StopEntitiesDetectionV2Job::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopICD10CMInferenceJob`](crate::client::fluent_builders::StopICD10CMInferenceJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::StopICD10CMInferenceJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::StopICD10CMInferenceJob::set_job_id): <p>The identifier of the job.</p>
    /// - On success, responds with [`StopIcd10CmInferenceJobOutput`](crate::output::StopIcd10CmInferenceJobOutput) with field(s):
    ///   - [`job_id(Option<String>)`](crate::output::StopIcd10CmInferenceJobOutput::job_id): <p>The identifier generated for the job. To get the status of job, use this identifier with the <code>DescribeICD10CMInferenceJob</code> operation.</p>
    /// - On failure, responds with [`SdkError<StopICD10CMInferenceJobError>`](crate::error::StopICD10CMInferenceJobError)
    pub fn stop_icd10_cm_inference_job(
        &self,
    ) -> crate::client::fluent_builders::StopICD10CMInferenceJob {
        crate::client::fluent_builders::StopICD10CMInferenceJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopPHIDetectionJob`](crate::client::fluent_builders::StopPHIDetectionJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::StopPHIDetectionJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::StopPHIDetectionJob::set_job_id): <p>The identifier of the PHI detection job to stop.</p>
    /// - On success, responds with [`StopPhiDetectionJobOutput`](crate::output::StopPhiDetectionJobOutput) with field(s):
    ///   - [`job_id(Option<String>)`](crate::output::StopPhiDetectionJobOutput::job_id): <p>The identifier of the PHI detection job that was stopped.</p>
    /// - On failure, responds with [`SdkError<StopPHIDetectionJobError>`](crate::error::StopPHIDetectionJobError)
    pub fn stop_phi_detection_job(&self) -> crate::client::fluent_builders::StopPHIDetectionJob {
        crate::client::fluent_builders::StopPHIDetectionJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopRxNormInferenceJob`](crate::client::fluent_builders::StopRxNormInferenceJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::StopRxNormInferenceJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::StopRxNormInferenceJob::set_job_id): <p>The identifier of the job.</p>
    /// - On success, responds with [`StopRxNormInferenceJobOutput`](crate::output::StopRxNormInferenceJobOutput) with field(s):
    ///   - [`job_id(Option<String>)`](crate::output::StopRxNormInferenceJobOutput::job_id): <p>The identifier generated for the job. To get the status of job, use this identifier with the <code>DescribeRxNormInferenceJob</code> operation.</p>
    /// - On failure, responds with [`SdkError<StopRxNormInferenceJobError>`](crate::error::StopRxNormInferenceJobError)
    pub fn stop_rx_norm_inference_job(
        &self,
    ) -> crate::client::fluent_builders::StopRxNormInferenceJob {
        crate::client::fluent_builders::StopRxNormInferenceJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopSNOMEDCTInferenceJob`](crate::client::fluent_builders::StopSNOMEDCTInferenceJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::StopSNOMEDCTInferenceJob::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::StopSNOMEDCTInferenceJob::set_job_id): <p> The job id of the asynchronous InferSNOMEDCT job to be stopped. </p>
    /// - On success, responds with [`StopSnomedctInferenceJobOutput`](crate::output::StopSnomedctInferenceJobOutput) with field(s):
    ///   - [`job_id(Option<String>)`](crate::output::StopSnomedctInferenceJobOutput::job_id): <p> The identifier generated for the job. To get the status of job, use this identifier with the DescribeSNOMEDCTInferenceJob operation. </p>
    /// - On failure, responds with [`SdkError<StopSNOMEDCTInferenceJobError>`](crate::error::StopSNOMEDCTInferenceJobError)
    pub fn stop_snomedct_inference_job(
        &self,
    ) -> crate::client::fluent_builders::StopSNOMEDCTInferenceJob {
        crate::client::fluent_builders::StopSNOMEDCTInferenceJob::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
