// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Error type for the `DescribeEntitiesDetectionV2Job` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeEntitiesDetectionV2JobError {
    /// Kind of error that occurred.
    pub kind: DescribeEntitiesDetectionV2JobErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `DescribeEntitiesDetectionV2Job` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeEntitiesDetectionV2JobErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeEntitiesDetectionV2JobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeEntitiesDetectionV2JobErrorKind::InternalServerException(_inner) => {
                _inner.fmt(f)
            }
            DescribeEntitiesDetectionV2JobErrorKind::InvalidRequestException(_inner) => {
                _inner.fmt(f)
            }
            DescribeEntitiesDetectionV2JobErrorKind::ResourceNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DescribeEntitiesDetectionV2JobErrorKind::TooManyRequestsException(_inner) => {
                _inner.fmt(f)
            }
            DescribeEntitiesDetectionV2JobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for DescribeEntitiesDetectionV2JobError {
    fn code(&self) -> Option<&str> {
        DescribeEntitiesDetectionV2JobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeEntitiesDetectionV2JobError {
    /// Creates a new `DescribeEntitiesDetectionV2JobError`.
    pub fn new(
        kind: DescribeEntitiesDetectionV2JobErrorKind,
        meta: aws_smithy_types::Error,
    ) -> Self {
        Self { kind, meta }
    }

    /// Creates the `DescribeEntitiesDetectionV2JobError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeEntitiesDetectionV2JobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `DescribeEntitiesDetectionV2JobError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeEntitiesDetectionV2JobErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `DescribeEntitiesDetectionV2JobErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeEntitiesDetectionV2JobErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `DescribeEntitiesDetectionV2JobErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeEntitiesDetectionV2JobErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `DescribeEntitiesDetectionV2JobErrorKind::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeEntitiesDetectionV2JobErrorKind::ResourceNotFoundException(_)
        )
    }
    /// Returns `true` if the error kind is `DescribeEntitiesDetectionV2JobErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeEntitiesDetectionV2JobErrorKind::TooManyRequestsException(_)
        )
    }
}
impl std::error::Error for DescribeEntitiesDetectionV2JobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeEntitiesDetectionV2JobErrorKind::InternalServerException(_inner) => {
                Some(_inner)
            }
            DescribeEntitiesDetectionV2JobErrorKind::InvalidRequestException(_inner) => {
                Some(_inner)
            }
            DescribeEntitiesDetectionV2JobErrorKind::ResourceNotFoundException(_inner) => {
                Some(_inner)
            }
            DescribeEntitiesDetectionV2JobErrorKind::TooManyRequestsException(_inner) => {
                Some(_inner)
            }
            DescribeEntitiesDetectionV2JobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `DescribeICD10CMInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeICD10CMInferenceJobError {
    /// Kind of error that occurred.
    pub kind: DescribeICD10CMInferenceJobErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `DescribeICD10CMInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeICD10CMInferenceJobErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeICD10CMInferenceJobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeICD10CMInferenceJobErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            DescribeICD10CMInferenceJobErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            DescribeICD10CMInferenceJobErrorKind::ResourceNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DescribeICD10CMInferenceJobErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            DescribeICD10CMInferenceJobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for DescribeICD10CMInferenceJobError {
    fn code(&self) -> Option<&str> {
        DescribeICD10CMInferenceJobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeICD10CMInferenceJobError {
    /// Creates a new `DescribeICD10CMInferenceJobError`.
    pub fn new(kind: DescribeICD10CMInferenceJobErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `DescribeICD10CMInferenceJobError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeICD10CMInferenceJobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `DescribeICD10CMInferenceJobError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeICD10CMInferenceJobErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `DescribeICD10CMInferenceJobErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeICD10CMInferenceJobErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `DescribeICD10CMInferenceJobErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeICD10CMInferenceJobErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `DescribeICD10CMInferenceJobErrorKind::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeICD10CMInferenceJobErrorKind::ResourceNotFoundException(_)
        )
    }
    /// Returns `true` if the error kind is `DescribeICD10CMInferenceJobErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeICD10CMInferenceJobErrorKind::TooManyRequestsException(_)
        )
    }
}
impl std::error::Error for DescribeICD10CMInferenceJobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeICD10CMInferenceJobErrorKind::InternalServerException(_inner) => Some(_inner),
            DescribeICD10CMInferenceJobErrorKind::InvalidRequestException(_inner) => Some(_inner),
            DescribeICD10CMInferenceJobErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DescribeICD10CMInferenceJobErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            DescribeICD10CMInferenceJobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `DescribePHIDetectionJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribePHIDetectionJobError {
    /// Kind of error that occurred.
    pub kind: DescribePHIDetectionJobErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `DescribePHIDetectionJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribePHIDetectionJobErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribePHIDetectionJobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribePHIDetectionJobErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            DescribePHIDetectionJobErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            DescribePHIDetectionJobErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DescribePHIDetectionJobErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            DescribePHIDetectionJobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for DescribePHIDetectionJobError {
    fn code(&self) -> Option<&str> {
        DescribePHIDetectionJobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribePHIDetectionJobError {
    /// Creates a new `DescribePHIDetectionJobError`.
    pub fn new(kind: DescribePHIDetectionJobErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `DescribePHIDetectionJobError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribePHIDetectionJobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `DescribePHIDetectionJobError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribePHIDetectionJobErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `DescribePHIDetectionJobErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribePHIDetectionJobErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `DescribePHIDetectionJobErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribePHIDetectionJobErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `DescribePHIDetectionJobErrorKind::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribePHIDetectionJobErrorKind::ResourceNotFoundException(_)
        )
    }
    /// Returns `true` if the error kind is `DescribePHIDetectionJobErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribePHIDetectionJobErrorKind::TooManyRequestsException(_)
        )
    }
}
impl std::error::Error for DescribePHIDetectionJobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribePHIDetectionJobErrorKind::InternalServerException(_inner) => Some(_inner),
            DescribePHIDetectionJobErrorKind::InvalidRequestException(_inner) => Some(_inner),
            DescribePHIDetectionJobErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DescribePHIDetectionJobErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            DescribePHIDetectionJobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `DescribeRxNormInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeRxNormInferenceJobError {
    /// Kind of error that occurred.
    pub kind: DescribeRxNormInferenceJobErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `DescribeRxNormInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeRxNormInferenceJobErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeRxNormInferenceJobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeRxNormInferenceJobErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            DescribeRxNormInferenceJobErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            DescribeRxNormInferenceJobErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DescribeRxNormInferenceJobErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            DescribeRxNormInferenceJobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for DescribeRxNormInferenceJobError {
    fn code(&self) -> Option<&str> {
        DescribeRxNormInferenceJobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeRxNormInferenceJobError {
    /// Creates a new `DescribeRxNormInferenceJobError`.
    pub fn new(kind: DescribeRxNormInferenceJobErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `DescribeRxNormInferenceJobError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeRxNormInferenceJobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `DescribeRxNormInferenceJobError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeRxNormInferenceJobErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `DescribeRxNormInferenceJobErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeRxNormInferenceJobErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `DescribeRxNormInferenceJobErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeRxNormInferenceJobErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `DescribeRxNormInferenceJobErrorKind::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeRxNormInferenceJobErrorKind::ResourceNotFoundException(_)
        )
    }
    /// Returns `true` if the error kind is `DescribeRxNormInferenceJobErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeRxNormInferenceJobErrorKind::TooManyRequestsException(_)
        )
    }
}
impl std::error::Error for DescribeRxNormInferenceJobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeRxNormInferenceJobErrorKind::InternalServerException(_inner) => Some(_inner),
            DescribeRxNormInferenceJobErrorKind::InvalidRequestException(_inner) => Some(_inner),
            DescribeRxNormInferenceJobErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DescribeRxNormInferenceJobErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            DescribeRxNormInferenceJobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `DescribeSNOMEDCTInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeSNOMEDCTInferenceJobError {
    /// Kind of error that occurred.
    pub kind: DescribeSNOMEDCTInferenceJobErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `DescribeSNOMEDCTInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeSNOMEDCTInferenceJobErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeSNOMEDCTInferenceJobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeSNOMEDCTInferenceJobErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            DescribeSNOMEDCTInferenceJobErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            DescribeSNOMEDCTInferenceJobErrorKind::ResourceNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DescribeSNOMEDCTInferenceJobErrorKind::TooManyRequestsException(_inner) => {
                _inner.fmt(f)
            }
            DescribeSNOMEDCTInferenceJobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for DescribeSNOMEDCTInferenceJobError {
    fn code(&self) -> Option<&str> {
        DescribeSNOMEDCTInferenceJobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeSNOMEDCTInferenceJobError {
    /// Creates a new `DescribeSNOMEDCTInferenceJobError`.
    pub fn new(kind: DescribeSNOMEDCTInferenceJobErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `DescribeSNOMEDCTInferenceJobError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeSNOMEDCTInferenceJobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `DescribeSNOMEDCTInferenceJobError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeSNOMEDCTInferenceJobErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `DescribeSNOMEDCTInferenceJobErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeSNOMEDCTInferenceJobErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `DescribeSNOMEDCTInferenceJobErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeSNOMEDCTInferenceJobErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `DescribeSNOMEDCTInferenceJobErrorKind::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeSNOMEDCTInferenceJobErrorKind::ResourceNotFoundException(_)
        )
    }
    /// Returns `true` if the error kind is `DescribeSNOMEDCTInferenceJobErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeSNOMEDCTInferenceJobErrorKind::TooManyRequestsException(_)
        )
    }
}
impl std::error::Error for DescribeSNOMEDCTInferenceJobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeSNOMEDCTInferenceJobErrorKind::InternalServerException(_inner) => Some(_inner),
            DescribeSNOMEDCTInferenceJobErrorKind::InvalidRequestException(_inner) => Some(_inner),
            DescribeSNOMEDCTInferenceJobErrorKind::ResourceNotFoundException(_inner) => {
                Some(_inner)
            }
            DescribeSNOMEDCTInferenceJobErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            DescribeSNOMEDCTInferenceJobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `DetectEntities` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DetectEntitiesError {
    /// Kind of error that occurred.
    pub kind: DetectEntitiesErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `DetectEntities` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DetectEntitiesErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The input text was not in valid UTF-8 character encoding. Check your text then retry your request.</p>
    InvalidEncodingException(crate::error::InvalidEncodingException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p> The Comprehend Medical; service is temporarily unavailable. Please wait and then retry your request. </p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// <p> The size of the text you submitted exceeds the size limit. Reduce the size of the text or use a smaller document and then retry your request. </p>
    TextSizeLimitExceededException(crate::error::TextSizeLimitExceededException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DetectEntitiesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DetectEntitiesErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            DetectEntitiesErrorKind::InvalidEncodingException(_inner) => _inner.fmt(f),
            DetectEntitiesErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            DetectEntitiesErrorKind::ServiceUnavailableException(_inner) => _inner.fmt(f),
            DetectEntitiesErrorKind::TextSizeLimitExceededException(_inner) => _inner.fmt(f),
            DetectEntitiesErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            DetectEntitiesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for DetectEntitiesError {
    fn code(&self) -> Option<&str> {
        DetectEntitiesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl DetectEntitiesError {
    /// Creates a new `DetectEntitiesError`.
    pub fn new(kind: DetectEntitiesErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `DetectEntitiesError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DetectEntitiesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `DetectEntitiesError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DetectEntitiesErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `DetectEntitiesErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            DetectEntitiesErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `DetectEntitiesErrorKind::InvalidEncodingException`.
    pub fn is_invalid_encoding_exception(&self) -> bool {
        matches!(
            &self.kind,
            DetectEntitiesErrorKind::InvalidEncodingException(_)
        )
    }
    /// Returns `true` if the error kind is `DetectEntitiesErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            DetectEntitiesErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `DetectEntitiesErrorKind::ServiceUnavailableException`.
    pub fn is_service_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            DetectEntitiesErrorKind::ServiceUnavailableException(_)
        )
    }
    /// Returns `true` if the error kind is `DetectEntitiesErrorKind::TextSizeLimitExceededException`.
    pub fn is_text_size_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            DetectEntitiesErrorKind::TextSizeLimitExceededException(_)
        )
    }
    /// Returns `true` if the error kind is `DetectEntitiesErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            DetectEntitiesErrorKind::TooManyRequestsException(_)
        )
    }
}
impl std::error::Error for DetectEntitiesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DetectEntitiesErrorKind::InternalServerException(_inner) => Some(_inner),
            DetectEntitiesErrorKind::InvalidEncodingException(_inner) => Some(_inner),
            DetectEntitiesErrorKind::InvalidRequestException(_inner) => Some(_inner),
            DetectEntitiesErrorKind::ServiceUnavailableException(_inner) => Some(_inner),
            DetectEntitiesErrorKind::TextSizeLimitExceededException(_inner) => Some(_inner),
            DetectEntitiesErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            DetectEntitiesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `DetectEntitiesV2` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DetectEntitiesV2Error {
    /// Kind of error that occurred.
    pub kind: DetectEntitiesV2ErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `DetectEntitiesV2` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DetectEntitiesV2ErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The input text was not in valid UTF-8 character encoding. Check your text then retry your request.</p>
    InvalidEncodingException(crate::error::InvalidEncodingException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p> The Comprehend Medical; service is temporarily unavailable. Please wait and then retry your request. </p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// <p> The size of the text you submitted exceeds the size limit. Reduce the size of the text or use a smaller document and then retry your request. </p>
    TextSizeLimitExceededException(crate::error::TextSizeLimitExceededException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DetectEntitiesV2Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DetectEntitiesV2ErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            DetectEntitiesV2ErrorKind::InvalidEncodingException(_inner) => _inner.fmt(f),
            DetectEntitiesV2ErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            DetectEntitiesV2ErrorKind::ServiceUnavailableException(_inner) => _inner.fmt(f),
            DetectEntitiesV2ErrorKind::TextSizeLimitExceededException(_inner) => _inner.fmt(f),
            DetectEntitiesV2ErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            DetectEntitiesV2ErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for DetectEntitiesV2Error {
    fn code(&self) -> Option<&str> {
        DetectEntitiesV2Error::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl DetectEntitiesV2Error {
    /// Creates a new `DetectEntitiesV2Error`.
    pub fn new(kind: DetectEntitiesV2ErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `DetectEntitiesV2Error::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DetectEntitiesV2ErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `DetectEntitiesV2Error::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DetectEntitiesV2ErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `DetectEntitiesV2ErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            DetectEntitiesV2ErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `DetectEntitiesV2ErrorKind::InvalidEncodingException`.
    pub fn is_invalid_encoding_exception(&self) -> bool {
        matches!(
            &self.kind,
            DetectEntitiesV2ErrorKind::InvalidEncodingException(_)
        )
    }
    /// Returns `true` if the error kind is `DetectEntitiesV2ErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            DetectEntitiesV2ErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `DetectEntitiesV2ErrorKind::ServiceUnavailableException`.
    pub fn is_service_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            DetectEntitiesV2ErrorKind::ServiceUnavailableException(_)
        )
    }
    /// Returns `true` if the error kind is `DetectEntitiesV2ErrorKind::TextSizeLimitExceededException`.
    pub fn is_text_size_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            DetectEntitiesV2ErrorKind::TextSizeLimitExceededException(_)
        )
    }
    /// Returns `true` if the error kind is `DetectEntitiesV2ErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            DetectEntitiesV2ErrorKind::TooManyRequestsException(_)
        )
    }
}
impl std::error::Error for DetectEntitiesV2Error {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DetectEntitiesV2ErrorKind::InternalServerException(_inner) => Some(_inner),
            DetectEntitiesV2ErrorKind::InvalidEncodingException(_inner) => Some(_inner),
            DetectEntitiesV2ErrorKind::InvalidRequestException(_inner) => Some(_inner),
            DetectEntitiesV2ErrorKind::ServiceUnavailableException(_inner) => Some(_inner),
            DetectEntitiesV2ErrorKind::TextSizeLimitExceededException(_inner) => Some(_inner),
            DetectEntitiesV2ErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            DetectEntitiesV2ErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `DetectPHI` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DetectPHIError {
    /// Kind of error that occurred.
    pub kind: DetectPHIErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `DetectPHI` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DetectPHIErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The input text was not in valid UTF-8 character encoding. Check your text then retry your request.</p>
    InvalidEncodingException(crate::error::InvalidEncodingException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p> The Comprehend Medical; service is temporarily unavailable. Please wait and then retry your request. </p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// <p> The size of the text you submitted exceeds the size limit. Reduce the size of the text or use a smaller document and then retry your request. </p>
    TextSizeLimitExceededException(crate::error::TextSizeLimitExceededException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DetectPHIError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DetectPHIErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            DetectPHIErrorKind::InvalidEncodingException(_inner) => _inner.fmt(f),
            DetectPHIErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            DetectPHIErrorKind::ServiceUnavailableException(_inner) => _inner.fmt(f),
            DetectPHIErrorKind::TextSizeLimitExceededException(_inner) => _inner.fmt(f),
            DetectPHIErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            DetectPHIErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for DetectPHIError {
    fn code(&self) -> Option<&str> {
        DetectPHIError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl DetectPHIError {
    /// Creates a new `DetectPHIError`.
    pub fn new(kind: DetectPHIErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `DetectPHIError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DetectPHIErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `DetectPHIError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DetectPHIErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `DetectPHIErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(&self.kind, DetectPHIErrorKind::InternalServerException(_))
    }
    /// Returns `true` if the error kind is `DetectPHIErrorKind::InvalidEncodingException`.
    pub fn is_invalid_encoding_exception(&self) -> bool {
        matches!(&self.kind, DetectPHIErrorKind::InvalidEncodingException(_))
    }
    /// Returns `true` if the error kind is `DetectPHIErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(&self.kind, DetectPHIErrorKind::InvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `DetectPHIErrorKind::ServiceUnavailableException`.
    pub fn is_service_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            DetectPHIErrorKind::ServiceUnavailableException(_)
        )
    }
    /// Returns `true` if the error kind is `DetectPHIErrorKind::TextSizeLimitExceededException`.
    pub fn is_text_size_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            DetectPHIErrorKind::TextSizeLimitExceededException(_)
        )
    }
    /// Returns `true` if the error kind is `DetectPHIErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(&self.kind, DetectPHIErrorKind::TooManyRequestsException(_))
    }
}
impl std::error::Error for DetectPHIError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DetectPHIErrorKind::InternalServerException(_inner) => Some(_inner),
            DetectPHIErrorKind::InvalidEncodingException(_inner) => Some(_inner),
            DetectPHIErrorKind::InvalidRequestException(_inner) => Some(_inner),
            DetectPHIErrorKind::ServiceUnavailableException(_inner) => Some(_inner),
            DetectPHIErrorKind::TextSizeLimitExceededException(_inner) => Some(_inner),
            DetectPHIErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            DetectPHIErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `InferICD10CM` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct InferICD10CMError {
    /// Kind of error that occurred.
    pub kind: InferICD10CMErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `InferICD10CM` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum InferICD10CMErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The input text was not in valid UTF-8 character encoding. Check your text then retry your request.</p>
    InvalidEncodingException(crate::error::InvalidEncodingException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p> The Comprehend Medical; service is temporarily unavailable. Please wait and then retry your request. </p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// <p> The size of the text you submitted exceeds the size limit. Reduce the size of the text or use a smaller document and then retry your request. </p>
    TextSizeLimitExceededException(crate::error::TextSizeLimitExceededException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for InferICD10CMError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            InferICD10CMErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            InferICD10CMErrorKind::InvalidEncodingException(_inner) => _inner.fmt(f),
            InferICD10CMErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            InferICD10CMErrorKind::ServiceUnavailableException(_inner) => _inner.fmt(f),
            InferICD10CMErrorKind::TextSizeLimitExceededException(_inner) => _inner.fmt(f),
            InferICD10CMErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            InferICD10CMErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for InferICD10CMError {
    fn code(&self) -> Option<&str> {
        InferICD10CMError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl InferICD10CMError {
    /// Creates a new `InferICD10CMError`.
    pub fn new(kind: InferICD10CMErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `InferICD10CMError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: InferICD10CMErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `InferICD10CMError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: InferICD10CMErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `InferICD10CMErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            InferICD10CMErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `InferICD10CMErrorKind::InvalidEncodingException`.
    pub fn is_invalid_encoding_exception(&self) -> bool {
        matches!(
            &self.kind,
            InferICD10CMErrorKind::InvalidEncodingException(_)
        )
    }
    /// Returns `true` if the error kind is `InferICD10CMErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            InferICD10CMErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `InferICD10CMErrorKind::ServiceUnavailableException`.
    pub fn is_service_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            InferICD10CMErrorKind::ServiceUnavailableException(_)
        )
    }
    /// Returns `true` if the error kind is `InferICD10CMErrorKind::TextSizeLimitExceededException`.
    pub fn is_text_size_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            InferICD10CMErrorKind::TextSizeLimitExceededException(_)
        )
    }
    /// Returns `true` if the error kind is `InferICD10CMErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            InferICD10CMErrorKind::TooManyRequestsException(_)
        )
    }
}
impl std::error::Error for InferICD10CMError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            InferICD10CMErrorKind::InternalServerException(_inner) => Some(_inner),
            InferICD10CMErrorKind::InvalidEncodingException(_inner) => Some(_inner),
            InferICD10CMErrorKind::InvalidRequestException(_inner) => Some(_inner),
            InferICD10CMErrorKind::ServiceUnavailableException(_inner) => Some(_inner),
            InferICD10CMErrorKind::TextSizeLimitExceededException(_inner) => Some(_inner),
            InferICD10CMErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            InferICD10CMErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `InferRxNorm` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct InferRxNormError {
    /// Kind of error that occurred.
    pub kind: InferRxNormErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `InferRxNorm` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum InferRxNormErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The input text was not in valid UTF-8 character encoding. Check your text then retry your request.</p>
    InvalidEncodingException(crate::error::InvalidEncodingException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p> The Comprehend Medical; service is temporarily unavailable. Please wait and then retry your request. </p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// <p> The size of the text you submitted exceeds the size limit. Reduce the size of the text or use a smaller document and then retry your request. </p>
    TextSizeLimitExceededException(crate::error::TextSizeLimitExceededException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for InferRxNormError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            InferRxNormErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            InferRxNormErrorKind::InvalidEncodingException(_inner) => _inner.fmt(f),
            InferRxNormErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            InferRxNormErrorKind::ServiceUnavailableException(_inner) => _inner.fmt(f),
            InferRxNormErrorKind::TextSizeLimitExceededException(_inner) => _inner.fmt(f),
            InferRxNormErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            InferRxNormErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for InferRxNormError {
    fn code(&self) -> Option<&str> {
        InferRxNormError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl InferRxNormError {
    /// Creates a new `InferRxNormError`.
    pub fn new(kind: InferRxNormErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `InferRxNormError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: InferRxNormErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `InferRxNormError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: InferRxNormErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `InferRxNormErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(&self.kind, InferRxNormErrorKind::InternalServerException(_))
    }
    /// Returns `true` if the error kind is `InferRxNormErrorKind::InvalidEncodingException`.
    pub fn is_invalid_encoding_exception(&self) -> bool {
        matches!(
            &self.kind,
            InferRxNormErrorKind::InvalidEncodingException(_)
        )
    }
    /// Returns `true` if the error kind is `InferRxNormErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(&self.kind, InferRxNormErrorKind::InvalidRequestException(_))
    }
    /// Returns `true` if the error kind is `InferRxNormErrorKind::ServiceUnavailableException`.
    pub fn is_service_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            InferRxNormErrorKind::ServiceUnavailableException(_)
        )
    }
    /// Returns `true` if the error kind is `InferRxNormErrorKind::TextSizeLimitExceededException`.
    pub fn is_text_size_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            InferRxNormErrorKind::TextSizeLimitExceededException(_)
        )
    }
    /// Returns `true` if the error kind is `InferRxNormErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            InferRxNormErrorKind::TooManyRequestsException(_)
        )
    }
}
impl std::error::Error for InferRxNormError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            InferRxNormErrorKind::InternalServerException(_inner) => Some(_inner),
            InferRxNormErrorKind::InvalidEncodingException(_inner) => Some(_inner),
            InferRxNormErrorKind::InvalidRequestException(_inner) => Some(_inner),
            InferRxNormErrorKind::ServiceUnavailableException(_inner) => Some(_inner),
            InferRxNormErrorKind::TextSizeLimitExceededException(_inner) => Some(_inner),
            InferRxNormErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            InferRxNormErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `InferSNOMEDCT` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct InferSNOMEDCTError {
    /// Kind of error that occurred.
    pub kind: InferSNOMEDCTErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `InferSNOMEDCT` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum InferSNOMEDCTErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The input text was not in valid UTF-8 character encoding. Check your text then retry your request.</p>
    InvalidEncodingException(crate::error::InvalidEncodingException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p> The Comprehend Medical; service is temporarily unavailable. Please wait and then retry your request. </p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// <p> The size of the text you submitted exceeds the size limit. Reduce the size of the text or use a smaller document and then retry your request. </p>
    TextSizeLimitExceededException(crate::error::TextSizeLimitExceededException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for InferSNOMEDCTError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            InferSNOMEDCTErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            InferSNOMEDCTErrorKind::InvalidEncodingException(_inner) => _inner.fmt(f),
            InferSNOMEDCTErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            InferSNOMEDCTErrorKind::ServiceUnavailableException(_inner) => _inner.fmt(f),
            InferSNOMEDCTErrorKind::TextSizeLimitExceededException(_inner) => _inner.fmt(f),
            InferSNOMEDCTErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            InferSNOMEDCTErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for InferSNOMEDCTError {
    fn code(&self) -> Option<&str> {
        InferSNOMEDCTError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl InferSNOMEDCTError {
    /// Creates a new `InferSNOMEDCTError`.
    pub fn new(kind: InferSNOMEDCTErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `InferSNOMEDCTError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: InferSNOMEDCTErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `InferSNOMEDCTError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: InferSNOMEDCTErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `InferSNOMEDCTErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            InferSNOMEDCTErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `InferSNOMEDCTErrorKind::InvalidEncodingException`.
    pub fn is_invalid_encoding_exception(&self) -> bool {
        matches!(
            &self.kind,
            InferSNOMEDCTErrorKind::InvalidEncodingException(_)
        )
    }
    /// Returns `true` if the error kind is `InferSNOMEDCTErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            InferSNOMEDCTErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `InferSNOMEDCTErrorKind::ServiceUnavailableException`.
    pub fn is_service_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            InferSNOMEDCTErrorKind::ServiceUnavailableException(_)
        )
    }
    /// Returns `true` if the error kind is `InferSNOMEDCTErrorKind::TextSizeLimitExceededException`.
    pub fn is_text_size_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            InferSNOMEDCTErrorKind::TextSizeLimitExceededException(_)
        )
    }
    /// Returns `true` if the error kind is `InferSNOMEDCTErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            InferSNOMEDCTErrorKind::TooManyRequestsException(_)
        )
    }
}
impl std::error::Error for InferSNOMEDCTError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            InferSNOMEDCTErrorKind::InternalServerException(_inner) => Some(_inner),
            InferSNOMEDCTErrorKind::InvalidEncodingException(_inner) => Some(_inner),
            InferSNOMEDCTErrorKind::InvalidRequestException(_inner) => Some(_inner),
            InferSNOMEDCTErrorKind::ServiceUnavailableException(_inner) => Some(_inner),
            InferSNOMEDCTErrorKind::TextSizeLimitExceededException(_inner) => Some(_inner),
            InferSNOMEDCTErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            InferSNOMEDCTErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `ListEntitiesDetectionV2Jobs` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListEntitiesDetectionV2JobsError {
    /// Kind of error that occurred.
    pub kind: ListEntitiesDetectionV2JobsErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `ListEntitiesDetectionV2Jobs` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListEntitiesDetectionV2JobsErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// <p>The filter that you specified for the operation is invalid. Check the filter values that you entered and try your request again.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListEntitiesDetectionV2JobsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListEntitiesDetectionV2JobsErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            ListEntitiesDetectionV2JobsErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            ListEntitiesDetectionV2JobsErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            ListEntitiesDetectionV2JobsErrorKind::ValidationException(_inner) => _inner.fmt(f),
            ListEntitiesDetectionV2JobsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for ListEntitiesDetectionV2JobsError {
    fn code(&self) -> Option<&str> {
        ListEntitiesDetectionV2JobsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListEntitiesDetectionV2JobsError {
    /// Creates a new `ListEntitiesDetectionV2JobsError`.
    pub fn new(kind: ListEntitiesDetectionV2JobsErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `ListEntitiesDetectionV2JobsError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListEntitiesDetectionV2JobsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `ListEntitiesDetectionV2JobsError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListEntitiesDetectionV2JobsErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `ListEntitiesDetectionV2JobsErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListEntitiesDetectionV2JobsErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `ListEntitiesDetectionV2JobsErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListEntitiesDetectionV2JobsErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `ListEntitiesDetectionV2JobsErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListEntitiesDetectionV2JobsErrorKind::TooManyRequestsException(_)
        )
    }
    /// Returns `true` if the error kind is `ListEntitiesDetectionV2JobsErrorKind::ValidationException`.
    pub fn is_validation_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListEntitiesDetectionV2JobsErrorKind::ValidationException(_)
        )
    }
}
impl std::error::Error for ListEntitiesDetectionV2JobsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListEntitiesDetectionV2JobsErrorKind::InternalServerException(_inner) => Some(_inner),
            ListEntitiesDetectionV2JobsErrorKind::InvalidRequestException(_inner) => Some(_inner),
            ListEntitiesDetectionV2JobsErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            ListEntitiesDetectionV2JobsErrorKind::ValidationException(_inner) => Some(_inner),
            ListEntitiesDetectionV2JobsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `ListICD10CMInferenceJobs` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListICD10CMInferenceJobsError {
    /// Kind of error that occurred.
    pub kind: ListICD10CMInferenceJobsErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `ListICD10CMInferenceJobs` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListICD10CMInferenceJobsErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// <p>The filter that you specified for the operation is invalid. Check the filter values that you entered and try your request again.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListICD10CMInferenceJobsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListICD10CMInferenceJobsErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            ListICD10CMInferenceJobsErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            ListICD10CMInferenceJobsErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            ListICD10CMInferenceJobsErrorKind::ValidationException(_inner) => _inner.fmt(f),
            ListICD10CMInferenceJobsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for ListICD10CMInferenceJobsError {
    fn code(&self) -> Option<&str> {
        ListICD10CMInferenceJobsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListICD10CMInferenceJobsError {
    /// Creates a new `ListICD10CMInferenceJobsError`.
    pub fn new(kind: ListICD10CMInferenceJobsErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `ListICD10CMInferenceJobsError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListICD10CMInferenceJobsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `ListICD10CMInferenceJobsError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListICD10CMInferenceJobsErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `ListICD10CMInferenceJobsErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListICD10CMInferenceJobsErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `ListICD10CMInferenceJobsErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListICD10CMInferenceJobsErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `ListICD10CMInferenceJobsErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListICD10CMInferenceJobsErrorKind::TooManyRequestsException(_)
        )
    }
    /// Returns `true` if the error kind is `ListICD10CMInferenceJobsErrorKind::ValidationException`.
    pub fn is_validation_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListICD10CMInferenceJobsErrorKind::ValidationException(_)
        )
    }
}
impl std::error::Error for ListICD10CMInferenceJobsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListICD10CMInferenceJobsErrorKind::InternalServerException(_inner) => Some(_inner),
            ListICD10CMInferenceJobsErrorKind::InvalidRequestException(_inner) => Some(_inner),
            ListICD10CMInferenceJobsErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            ListICD10CMInferenceJobsErrorKind::ValidationException(_inner) => Some(_inner),
            ListICD10CMInferenceJobsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `ListPHIDetectionJobs` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListPHIDetectionJobsError {
    /// Kind of error that occurred.
    pub kind: ListPHIDetectionJobsErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `ListPHIDetectionJobs` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListPHIDetectionJobsErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// <p>The filter that you specified for the operation is invalid. Check the filter values that you entered and try your request again.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListPHIDetectionJobsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListPHIDetectionJobsErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            ListPHIDetectionJobsErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            ListPHIDetectionJobsErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            ListPHIDetectionJobsErrorKind::ValidationException(_inner) => _inner.fmt(f),
            ListPHIDetectionJobsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for ListPHIDetectionJobsError {
    fn code(&self) -> Option<&str> {
        ListPHIDetectionJobsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListPHIDetectionJobsError {
    /// Creates a new `ListPHIDetectionJobsError`.
    pub fn new(kind: ListPHIDetectionJobsErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `ListPHIDetectionJobsError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListPHIDetectionJobsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `ListPHIDetectionJobsError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListPHIDetectionJobsErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `ListPHIDetectionJobsErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListPHIDetectionJobsErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `ListPHIDetectionJobsErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListPHIDetectionJobsErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `ListPHIDetectionJobsErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListPHIDetectionJobsErrorKind::TooManyRequestsException(_)
        )
    }
    /// Returns `true` if the error kind is `ListPHIDetectionJobsErrorKind::ValidationException`.
    pub fn is_validation_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListPHIDetectionJobsErrorKind::ValidationException(_)
        )
    }
}
impl std::error::Error for ListPHIDetectionJobsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListPHIDetectionJobsErrorKind::InternalServerException(_inner) => Some(_inner),
            ListPHIDetectionJobsErrorKind::InvalidRequestException(_inner) => Some(_inner),
            ListPHIDetectionJobsErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            ListPHIDetectionJobsErrorKind::ValidationException(_inner) => Some(_inner),
            ListPHIDetectionJobsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `ListRxNormInferenceJobs` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListRxNormInferenceJobsError {
    /// Kind of error that occurred.
    pub kind: ListRxNormInferenceJobsErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `ListRxNormInferenceJobs` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListRxNormInferenceJobsErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// <p>The filter that you specified for the operation is invalid. Check the filter values that you entered and try your request again.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListRxNormInferenceJobsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListRxNormInferenceJobsErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            ListRxNormInferenceJobsErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            ListRxNormInferenceJobsErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            ListRxNormInferenceJobsErrorKind::ValidationException(_inner) => _inner.fmt(f),
            ListRxNormInferenceJobsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for ListRxNormInferenceJobsError {
    fn code(&self) -> Option<&str> {
        ListRxNormInferenceJobsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListRxNormInferenceJobsError {
    /// Creates a new `ListRxNormInferenceJobsError`.
    pub fn new(kind: ListRxNormInferenceJobsErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `ListRxNormInferenceJobsError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListRxNormInferenceJobsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `ListRxNormInferenceJobsError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListRxNormInferenceJobsErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `ListRxNormInferenceJobsErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListRxNormInferenceJobsErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `ListRxNormInferenceJobsErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListRxNormInferenceJobsErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `ListRxNormInferenceJobsErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListRxNormInferenceJobsErrorKind::TooManyRequestsException(_)
        )
    }
    /// Returns `true` if the error kind is `ListRxNormInferenceJobsErrorKind::ValidationException`.
    pub fn is_validation_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListRxNormInferenceJobsErrorKind::ValidationException(_)
        )
    }
}
impl std::error::Error for ListRxNormInferenceJobsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListRxNormInferenceJobsErrorKind::InternalServerException(_inner) => Some(_inner),
            ListRxNormInferenceJobsErrorKind::InvalidRequestException(_inner) => Some(_inner),
            ListRxNormInferenceJobsErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            ListRxNormInferenceJobsErrorKind::ValidationException(_inner) => Some(_inner),
            ListRxNormInferenceJobsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `ListSNOMEDCTInferenceJobs` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListSNOMEDCTInferenceJobsError {
    /// Kind of error that occurred.
    pub kind: ListSNOMEDCTInferenceJobsErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `ListSNOMEDCTInferenceJobs` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListSNOMEDCTInferenceJobsErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// <p>The filter that you specified for the operation is invalid. Check the filter values that you entered and try your request again.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListSNOMEDCTInferenceJobsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListSNOMEDCTInferenceJobsErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            ListSNOMEDCTInferenceJobsErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            ListSNOMEDCTInferenceJobsErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            ListSNOMEDCTInferenceJobsErrorKind::ValidationException(_inner) => _inner.fmt(f),
            ListSNOMEDCTInferenceJobsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for ListSNOMEDCTInferenceJobsError {
    fn code(&self) -> Option<&str> {
        ListSNOMEDCTInferenceJobsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListSNOMEDCTInferenceJobsError {
    /// Creates a new `ListSNOMEDCTInferenceJobsError`.
    pub fn new(kind: ListSNOMEDCTInferenceJobsErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `ListSNOMEDCTInferenceJobsError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListSNOMEDCTInferenceJobsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `ListSNOMEDCTInferenceJobsError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListSNOMEDCTInferenceJobsErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `ListSNOMEDCTInferenceJobsErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListSNOMEDCTInferenceJobsErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `ListSNOMEDCTInferenceJobsErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListSNOMEDCTInferenceJobsErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `ListSNOMEDCTInferenceJobsErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListSNOMEDCTInferenceJobsErrorKind::TooManyRequestsException(_)
        )
    }
    /// Returns `true` if the error kind is `ListSNOMEDCTInferenceJobsErrorKind::ValidationException`.
    pub fn is_validation_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListSNOMEDCTInferenceJobsErrorKind::ValidationException(_)
        )
    }
}
impl std::error::Error for ListSNOMEDCTInferenceJobsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListSNOMEDCTInferenceJobsErrorKind::InternalServerException(_inner) => Some(_inner),
            ListSNOMEDCTInferenceJobsErrorKind::InvalidRequestException(_inner) => Some(_inner),
            ListSNOMEDCTInferenceJobsErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            ListSNOMEDCTInferenceJobsErrorKind::ValidationException(_inner) => Some(_inner),
            ListSNOMEDCTInferenceJobsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `StartEntitiesDetectionV2Job` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StartEntitiesDetectionV2JobError {
    /// Kind of error that occurred.
    pub kind: StartEntitiesDetectionV2JobErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `StartEntitiesDetectionV2Job` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StartEntitiesDetectionV2JobErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StartEntitiesDetectionV2JobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StartEntitiesDetectionV2JobErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            StartEntitiesDetectionV2JobErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            StartEntitiesDetectionV2JobErrorKind::ResourceNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            StartEntitiesDetectionV2JobErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            StartEntitiesDetectionV2JobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for StartEntitiesDetectionV2JobError {
    fn code(&self) -> Option<&str> {
        StartEntitiesDetectionV2JobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl StartEntitiesDetectionV2JobError {
    /// Creates a new `StartEntitiesDetectionV2JobError`.
    pub fn new(kind: StartEntitiesDetectionV2JobErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `StartEntitiesDetectionV2JobError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StartEntitiesDetectionV2JobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `StartEntitiesDetectionV2JobError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StartEntitiesDetectionV2JobErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `StartEntitiesDetectionV2JobErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartEntitiesDetectionV2JobErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `StartEntitiesDetectionV2JobErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartEntitiesDetectionV2JobErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `StartEntitiesDetectionV2JobErrorKind::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartEntitiesDetectionV2JobErrorKind::ResourceNotFoundException(_)
        )
    }
    /// Returns `true` if the error kind is `StartEntitiesDetectionV2JobErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartEntitiesDetectionV2JobErrorKind::TooManyRequestsException(_)
        )
    }
}
impl std::error::Error for StartEntitiesDetectionV2JobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StartEntitiesDetectionV2JobErrorKind::InternalServerException(_inner) => Some(_inner),
            StartEntitiesDetectionV2JobErrorKind::InvalidRequestException(_inner) => Some(_inner),
            StartEntitiesDetectionV2JobErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            StartEntitiesDetectionV2JobErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            StartEntitiesDetectionV2JobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `StartICD10CMInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StartICD10CMInferenceJobError {
    /// Kind of error that occurred.
    pub kind: StartICD10CMInferenceJobErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `StartICD10CMInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StartICD10CMInferenceJobErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StartICD10CMInferenceJobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StartICD10CMInferenceJobErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            StartICD10CMInferenceJobErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            StartICD10CMInferenceJobErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            StartICD10CMInferenceJobErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            StartICD10CMInferenceJobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for StartICD10CMInferenceJobError {
    fn code(&self) -> Option<&str> {
        StartICD10CMInferenceJobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl StartICD10CMInferenceJobError {
    /// Creates a new `StartICD10CMInferenceJobError`.
    pub fn new(kind: StartICD10CMInferenceJobErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `StartICD10CMInferenceJobError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StartICD10CMInferenceJobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `StartICD10CMInferenceJobError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StartICD10CMInferenceJobErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `StartICD10CMInferenceJobErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartICD10CMInferenceJobErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `StartICD10CMInferenceJobErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartICD10CMInferenceJobErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `StartICD10CMInferenceJobErrorKind::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartICD10CMInferenceJobErrorKind::ResourceNotFoundException(_)
        )
    }
    /// Returns `true` if the error kind is `StartICD10CMInferenceJobErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartICD10CMInferenceJobErrorKind::TooManyRequestsException(_)
        )
    }
}
impl std::error::Error for StartICD10CMInferenceJobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StartICD10CMInferenceJobErrorKind::InternalServerException(_inner) => Some(_inner),
            StartICD10CMInferenceJobErrorKind::InvalidRequestException(_inner) => Some(_inner),
            StartICD10CMInferenceJobErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            StartICD10CMInferenceJobErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            StartICD10CMInferenceJobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `StartPHIDetectionJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StartPHIDetectionJobError {
    /// Kind of error that occurred.
    pub kind: StartPHIDetectionJobErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `StartPHIDetectionJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StartPHIDetectionJobErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StartPHIDetectionJobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StartPHIDetectionJobErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            StartPHIDetectionJobErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            StartPHIDetectionJobErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            StartPHIDetectionJobErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            StartPHIDetectionJobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for StartPHIDetectionJobError {
    fn code(&self) -> Option<&str> {
        StartPHIDetectionJobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl StartPHIDetectionJobError {
    /// Creates a new `StartPHIDetectionJobError`.
    pub fn new(kind: StartPHIDetectionJobErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `StartPHIDetectionJobError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StartPHIDetectionJobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `StartPHIDetectionJobError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StartPHIDetectionJobErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `StartPHIDetectionJobErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartPHIDetectionJobErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `StartPHIDetectionJobErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartPHIDetectionJobErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `StartPHIDetectionJobErrorKind::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartPHIDetectionJobErrorKind::ResourceNotFoundException(_)
        )
    }
    /// Returns `true` if the error kind is `StartPHIDetectionJobErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartPHIDetectionJobErrorKind::TooManyRequestsException(_)
        )
    }
}
impl std::error::Error for StartPHIDetectionJobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StartPHIDetectionJobErrorKind::InternalServerException(_inner) => Some(_inner),
            StartPHIDetectionJobErrorKind::InvalidRequestException(_inner) => Some(_inner),
            StartPHIDetectionJobErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            StartPHIDetectionJobErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            StartPHIDetectionJobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `StartRxNormInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StartRxNormInferenceJobError {
    /// Kind of error that occurred.
    pub kind: StartRxNormInferenceJobErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `StartRxNormInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StartRxNormInferenceJobErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StartRxNormInferenceJobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StartRxNormInferenceJobErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            StartRxNormInferenceJobErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            StartRxNormInferenceJobErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            StartRxNormInferenceJobErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            StartRxNormInferenceJobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for StartRxNormInferenceJobError {
    fn code(&self) -> Option<&str> {
        StartRxNormInferenceJobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl StartRxNormInferenceJobError {
    /// Creates a new `StartRxNormInferenceJobError`.
    pub fn new(kind: StartRxNormInferenceJobErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `StartRxNormInferenceJobError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StartRxNormInferenceJobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `StartRxNormInferenceJobError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StartRxNormInferenceJobErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `StartRxNormInferenceJobErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartRxNormInferenceJobErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `StartRxNormInferenceJobErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartRxNormInferenceJobErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `StartRxNormInferenceJobErrorKind::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartRxNormInferenceJobErrorKind::ResourceNotFoundException(_)
        )
    }
    /// Returns `true` if the error kind is `StartRxNormInferenceJobErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartRxNormInferenceJobErrorKind::TooManyRequestsException(_)
        )
    }
}
impl std::error::Error for StartRxNormInferenceJobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StartRxNormInferenceJobErrorKind::InternalServerException(_inner) => Some(_inner),
            StartRxNormInferenceJobErrorKind::InvalidRequestException(_inner) => Some(_inner),
            StartRxNormInferenceJobErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            StartRxNormInferenceJobErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            StartRxNormInferenceJobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `StartSNOMEDCTInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StartSNOMEDCTInferenceJobError {
    /// Kind of error that occurred.
    pub kind: StartSNOMEDCTInferenceJobErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `StartSNOMEDCTInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StartSNOMEDCTInferenceJobErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StartSNOMEDCTInferenceJobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StartSNOMEDCTInferenceJobErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            StartSNOMEDCTInferenceJobErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            StartSNOMEDCTInferenceJobErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            StartSNOMEDCTInferenceJobErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            StartSNOMEDCTInferenceJobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for StartSNOMEDCTInferenceJobError {
    fn code(&self) -> Option<&str> {
        StartSNOMEDCTInferenceJobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl StartSNOMEDCTInferenceJobError {
    /// Creates a new `StartSNOMEDCTInferenceJobError`.
    pub fn new(kind: StartSNOMEDCTInferenceJobErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `StartSNOMEDCTInferenceJobError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StartSNOMEDCTInferenceJobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `StartSNOMEDCTInferenceJobError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StartSNOMEDCTInferenceJobErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `StartSNOMEDCTInferenceJobErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartSNOMEDCTInferenceJobErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `StartSNOMEDCTInferenceJobErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartSNOMEDCTInferenceJobErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `StartSNOMEDCTInferenceJobErrorKind::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartSNOMEDCTInferenceJobErrorKind::ResourceNotFoundException(_)
        )
    }
    /// Returns `true` if the error kind is `StartSNOMEDCTInferenceJobErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartSNOMEDCTInferenceJobErrorKind::TooManyRequestsException(_)
        )
    }
}
impl std::error::Error for StartSNOMEDCTInferenceJobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StartSNOMEDCTInferenceJobErrorKind::InternalServerException(_inner) => Some(_inner),
            StartSNOMEDCTInferenceJobErrorKind::InvalidRequestException(_inner) => Some(_inner),
            StartSNOMEDCTInferenceJobErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            StartSNOMEDCTInferenceJobErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            StartSNOMEDCTInferenceJobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `StopEntitiesDetectionV2Job` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StopEntitiesDetectionV2JobError {
    /// Kind of error that occurred.
    pub kind: StopEntitiesDetectionV2JobErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `StopEntitiesDetectionV2Job` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StopEntitiesDetectionV2JobErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StopEntitiesDetectionV2JobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StopEntitiesDetectionV2JobErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            StopEntitiesDetectionV2JobErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            StopEntitiesDetectionV2JobErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            StopEntitiesDetectionV2JobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for StopEntitiesDetectionV2JobError {
    fn code(&self) -> Option<&str> {
        StopEntitiesDetectionV2JobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl StopEntitiesDetectionV2JobError {
    /// Creates a new `StopEntitiesDetectionV2JobError`.
    pub fn new(kind: StopEntitiesDetectionV2JobErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `StopEntitiesDetectionV2JobError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StopEntitiesDetectionV2JobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `StopEntitiesDetectionV2JobError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StopEntitiesDetectionV2JobErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `StopEntitiesDetectionV2JobErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopEntitiesDetectionV2JobErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `StopEntitiesDetectionV2JobErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopEntitiesDetectionV2JobErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `StopEntitiesDetectionV2JobErrorKind::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopEntitiesDetectionV2JobErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for StopEntitiesDetectionV2JobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StopEntitiesDetectionV2JobErrorKind::InternalServerException(_inner) => Some(_inner),
            StopEntitiesDetectionV2JobErrorKind::InvalidRequestException(_inner) => Some(_inner),
            StopEntitiesDetectionV2JobErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            StopEntitiesDetectionV2JobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `StopICD10CMInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StopICD10CMInferenceJobError {
    /// Kind of error that occurred.
    pub kind: StopICD10CMInferenceJobErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `StopICD10CMInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StopICD10CMInferenceJobErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StopICD10CMInferenceJobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StopICD10CMInferenceJobErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            StopICD10CMInferenceJobErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            StopICD10CMInferenceJobErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            StopICD10CMInferenceJobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for StopICD10CMInferenceJobError {
    fn code(&self) -> Option<&str> {
        StopICD10CMInferenceJobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl StopICD10CMInferenceJobError {
    /// Creates a new `StopICD10CMInferenceJobError`.
    pub fn new(kind: StopICD10CMInferenceJobErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `StopICD10CMInferenceJobError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StopICD10CMInferenceJobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `StopICD10CMInferenceJobError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StopICD10CMInferenceJobErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `StopICD10CMInferenceJobErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopICD10CMInferenceJobErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `StopICD10CMInferenceJobErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopICD10CMInferenceJobErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `StopICD10CMInferenceJobErrorKind::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopICD10CMInferenceJobErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for StopICD10CMInferenceJobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StopICD10CMInferenceJobErrorKind::InternalServerException(_inner) => Some(_inner),
            StopICD10CMInferenceJobErrorKind::InvalidRequestException(_inner) => Some(_inner),
            StopICD10CMInferenceJobErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            StopICD10CMInferenceJobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `StopPHIDetectionJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StopPHIDetectionJobError {
    /// Kind of error that occurred.
    pub kind: StopPHIDetectionJobErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `StopPHIDetectionJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StopPHIDetectionJobErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StopPHIDetectionJobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StopPHIDetectionJobErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            StopPHIDetectionJobErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            StopPHIDetectionJobErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            StopPHIDetectionJobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for StopPHIDetectionJobError {
    fn code(&self) -> Option<&str> {
        StopPHIDetectionJobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl StopPHIDetectionJobError {
    /// Creates a new `StopPHIDetectionJobError`.
    pub fn new(kind: StopPHIDetectionJobErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `StopPHIDetectionJobError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StopPHIDetectionJobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `StopPHIDetectionJobError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StopPHIDetectionJobErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `StopPHIDetectionJobErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopPHIDetectionJobErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `StopPHIDetectionJobErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopPHIDetectionJobErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `StopPHIDetectionJobErrorKind::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopPHIDetectionJobErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for StopPHIDetectionJobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StopPHIDetectionJobErrorKind::InternalServerException(_inner) => Some(_inner),
            StopPHIDetectionJobErrorKind::InvalidRequestException(_inner) => Some(_inner),
            StopPHIDetectionJobErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            StopPHIDetectionJobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `StopRxNormInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StopRxNormInferenceJobError {
    /// Kind of error that occurred.
    pub kind: StopRxNormInferenceJobErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `StopRxNormInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StopRxNormInferenceJobErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StopRxNormInferenceJobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StopRxNormInferenceJobErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            StopRxNormInferenceJobErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            StopRxNormInferenceJobErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            StopRxNormInferenceJobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for StopRxNormInferenceJobError {
    fn code(&self) -> Option<&str> {
        StopRxNormInferenceJobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl StopRxNormInferenceJobError {
    /// Creates a new `StopRxNormInferenceJobError`.
    pub fn new(kind: StopRxNormInferenceJobErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `StopRxNormInferenceJobError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StopRxNormInferenceJobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `StopRxNormInferenceJobError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StopRxNormInferenceJobErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `StopRxNormInferenceJobErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopRxNormInferenceJobErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `StopRxNormInferenceJobErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopRxNormInferenceJobErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `StopRxNormInferenceJobErrorKind::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopRxNormInferenceJobErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for StopRxNormInferenceJobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StopRxNormInferenceJobErrorKind::InternalServerException(_inner) => Some(_inner),
            StopRxNormInferenceJobErrorKind::InvalidRequestException(_inner) => Some(_inner),
            StopRxNormInferenceJobErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            StopRxNormInferenceJobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// Error type for the `StopSNOMEDCTInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StopSNOMEDCTInferenceJobError {
    /// Kind of error that occurred.
    pub kind: StopSNOMEDCTInferenceJobErrorKind,
    /// Additional metadata about the error, including error code, message, and request ID.
    pub(crate) meta: aws_smithy_types::Error,
}
/// Types of errors that can occur for the `StopSNOMEDCTInferenceJob` operation.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StopSNOMEDCTInferenceJobErrorKind {
    /// <p> An internal server error occurred. Retry your request. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// An unexpected error, e.g. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StopSNOMEDCTInferenceJobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StopSNOMEDCTInferenceJobErrorKind::InternalServerException(_inner) => _inner.fmt(f),
            StopSNOMEDCTInferenceJobErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            StopSNOMEDCTInferenceJobErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            StopSNOMEDCTInferenceJobErrorKind::TooManyRequestsException(_inner) => _inner.fmt(f),
            StopSNOMEDCTInferenceJobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl aws_smithy_types::retry::ProvideErrorKind for StopSNOMEDCTInferenceJobError {
    fn code(&self) -> Option<&str> {
        StopSNOMEDCTInferenceJobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<aws_smithy_types::retry::ErrorKind> {
        None
    }
}
impl StopSNOMEDCTInferenceJobError {
    /// Creates a new `StopSNOMEDCTInferenceJobError`.
    pub fn new(kind: StopSNOMEDCTInferenceJobErrorKind, meta: aws_smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    /// Creates the `StopSNOMEDCTInferenceJobError::Unhandled` variant from any error type.
    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StopSNOMEDCTInferenceJobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    /// Creates the `StopSNOMEDCTInferenceJobError::Unhandled` variant from a `aws_smithy_types::Error`.
    pub fn generic(err: aws_smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StopSNOMEDCTInferenceJobErrorKind::Unhandled(err.into()),
        }
    }

    /// Returns the error message if one is available.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    /// Returns error metadata, which includes the error code, message,
    /// request ID, and potentially additional information.
    pub fn meta(&self) -> &aws_smithy_types::Error {
        &self.meta
    }

    /// Returns the request ID if it's available.
    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    /// Returns the error code if it's available.
    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    /// Returns `true` if the error kind is `StopSNOMEDCTInferenceJobErrorKind::InternalServerException`.
    pub fn is_internal_server_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopSNOMEDCTInferenceJobErrorKind::InternalServerException(_)
        )
    }
    /// Returns `true` if the error kind is `StopSNOMEDCTInferenceJobErrorKind::InvalidRequestException`.
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopSNOMEDCTInferenceJobErrorKind::InvalidRequestException(_)
        )
    }
    /// Returns `true` if the error kind is `StopSNOMEDCTInferenceJobErrorKind::ResourceNotFoundException`.
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopSNOMEDCTInferenceJobErrorKind::ResourceNotFoundException(_)
        )
    }
    /// Returns `true` if the error kind is `StopSNOMEDCTInferenceJobErrorKind::TooManyRequestsException`.
    pub fn is_too_many_requests_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopSNOMEDCTInferenceJobErrorKind::TooManyRequestsException(_)
        )
    }
}
impl std::error::Error for StopSNOMEDCTInferenceJobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StopSNOMEDCTInferenceJobErrorKind::InternalServerException(_inner) => Some(_inner),
            StopSNOMEDCTInferenceJobErrorKind::InvalidRequestException(_inner) => Some(_inner),
            StopSNOMEDCTInferenceJobErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            StopSNOMEDCTInferenceJobErrorKind::TooManyRequestsException(_inner) => Some(_inner),
            StopSNOMEDCTInferenceJobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// <p> You have made too many requests within a short period of time. Wait for a short time and then try your request again. Contact customer support for more information about a service limit increase. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TooManyRequestsException {
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for TooManyRequestsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TooManyRequestsException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl TooManyRequestsException {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for TooManyRequestsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "TooManyRequestsException")?;
        if let Some(inner_1) = &self.message {
            write!(f, ": {}", inner_1)?;
        }
        Ok(())
    }
}
impl std::error::Error for TooManyRequestsException {}
/// See [`TooManyRequestsException`](crate::error::TooManyRequestsException)
pub mod too_many_requests_exception {
    /// A builder for [`TooManyRequestsException`](crate::error::TooManyRequestsException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`TooManyRequestsException`](crate::error::TooManyRequestsException)
        pub fn build(self) -> crate::error::TooManyRequestsException {
            crate::error::TooManyRequestsException {
                message: self.message,
            }
        }
    }
}
impl TooManyRequestsException {
    /// Creates a new builder-style object to manufacture [`TooManyRequestsException`](crate::error::TooManyRequestsException)
    pub fn builder() -> crate::error::too_many_requests_exception::Builder {
        crate::error::too_many_requests_exception::Builder::default()
    }
}

/// <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check the ARN and try your request again.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResourceNotFoundException {
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ResourceNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceNotFoundException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ResourceNotFoundException {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ResourceNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceNotFoundException")?;
        if let Some(inner_2) = &self.message {
            write!(f, ": {}", inner_2)?;
        }
        Ok(())
    }
}
impl std::error::Error for ResourceNotFoundException {}
/// See [`ResourceNotFoundException`](crate::error::ResourceNotFoundException)
pub mod resource_not_found_exception {
    /// A builder for [`ResourceNotFoundException`](crate::error::ResourceNotFoundException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceNotFoundException`](crate::error::ResourceNotFoundException)
        pub fn build(self) -> crate::error::ResourceNotFoundException {
            crate::error::ResourceNotFoundException {
                message: self.message,
            }
        }
    }
}
impl ResourceNotFoundException {
    /// Creates a new builder-style object to manufacture [`ResourceNotFoundException`](crate::error::ResourceNotFoundException)
    pub fn builder() -> crate::error::resource_not_found_exception::Builder {
        crate::error::resource_not_found_exception::Builder::default()
    }
}

/// <p> The request that you made is invalid. Check your request to determine why it's invalid and then retry the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidRequestException {
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidRequestException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidRequestException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InvalidRequestException {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidRequestException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidRequestException")?;
        if let Some(inner_3) = &self.message {
            write!(f, ": {}", inner_3)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidRequestException {}
/// See [`InvalidRequestException`](crate::error::InvalidRequestException)
pub mod invalid_request_exception {
    /// A builder for [`InvalidRequestException`](crate::error::InvalidRequestException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidRequestException`](crate::error::InvalidRequestException)
        pub fn build(self) -> crate::error::InvalidRequestException {
            crate::error::InvalidRequestException {
                message: self.message,
            }
        }
    }
}
impl InvalidRequestException {
    /// Creates a new builder-style object to manufacture [`InvalidRequestException`](crate::error::InvalidRequestException)
    pub fn builder() -> crate::error::invalid_request_exception::Builder {
        crate::error::invalid_request_exception::Builder::default()
    }
}

/// <p> An internal server error occurred. Retry your request. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InternalServerException {
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InternalServerException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InternalServerException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InternalServerException {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InternalServerException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InternalServerException")?;
        if let Some(inner_4) = &self.message {
            write!(f, ": {}", inner_4)?;
        }
        Ok(())
    }
}
impl std::error::Error for InternalServerException {}
/// See [`InternalServerException`](crate::error::InternalServerException)
pub mod internal_server_exception {
    /// A builder for [`InternalServerException`](crate::error::InternalServerException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InternalServerException`](crate::error::InternalServerException)
        pub fn build(self) -> crate::error::InternalServerException {
            crate::error::InternalServerException {
                message: self.message,
            }
        }
    }
}
impl InternalServerException {
    /// Creates a new builder-style object to manufacture [`InternalServerException`](crate::error::InternalServerException)
    pub fn builder() -> crate::error::internal_server_exception::Builder {
        crate::error::internal_server_exception::Builder::default()
    }
}

/// <p>The filter that you specified for the operation is invalid. Check the filter values that you entered and try your request again.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidationException {
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ValidationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ValidationException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ValidationException {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ValidationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ValidationException")?;
        if let Some(inner_5) = &self.message {
            write!(f, ": {}", inner_5)?;
        }
        Ok(())
    }
}
impl std::error::Error for ValidationException {}
/// See [`ValidationException`](crate::error::ValidationException)
pub mod validation_exception {
    /// A builder for [`ValidationException`](crate::error::ValidationException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ValidationException`](crate::error::ValidationException)
        pub fn build(self) -> crate::error::ValidationException {
            crate::error::ValidationException {
                message: self.message,
            }
        }
    }
}
impl ValidationException {
    /// Creates a new builder-style object to manufacture [`ValidationException`](crate::error::ValidationException)
    pub fn builder() -> crate::error::validation_exception::Builder {
        crate::error::validation_exception::Builder::default()
    }
}

/// <p> The size of the text you submitted exceeds the size limit. Reduce the size of the text or use a smaller document and then retry your request. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TextSizeLimitExceededException {
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for TextSizeLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TextSizeLimitExceededException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl TextSizeLimitExceededException {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for TextSizeLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "TextSizeLimitExceededException")?;
        if let Some(inner_6) = &self.message {
            write!(f, ": {}", inner_6)?;
        }
        Ok(())
    }
}
impl std::error::Error for TextSizeLimitExceededException {}
/// See [`TextSizeLimitExceededException`](crate::error::TextSizeLimitExceededException)
pub mod text_size_limit_exceeded_exception {
    /// A builder for [`TextSizeLimitExceededException`](crate::error::TextSizeLimitExceededException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`TextSizeLimitExceededException`](crate::error::TextSizeLimitExceededException)
        pub fn build(self) -> crate::error::TextSizeLimitExceededException {
            crate::error::TextSizeLimitExceededException {
                message: self.message,
            }
        }
    }
}
impl TextSizeLimitExceededException {
    /// Creates a new builder-style object to manufacture [`TextSizeLimitExceededException`](crate::error::TextSizeLimitExceededException)
    pub fn builder() -> crate::error::text_size_limit_exceeded_exception::Builder {
        crate::error::text_size_limit_exceeded_exception::Builder::default()
    }
}

/// <p> The Comprehend Medical; service is temporarily unavailable. Please wait and then retry your request. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ServiceUnavailableException {
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ServiceUnavailableException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceUnavailableException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ServiceUnavailableException {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ServiceUnavailableException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ServiceUnavailableException")?;
        if let Some(inner_7) = &self.message {
            write!(f, ": {}", inner_7)?;
        }
        Ok(())
    }
}
impl std::error::Error for ServiceUnavailableException {}
/// See [`ServiceUnavailableException`](crate::error::ServiceUnavailableException)
pub mod service_unavailable_exception {
    /// A builder for [`ServiceUnavailableException`](crate::error::ServiceUnavailableException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ServiceUnavailableException`](crate::error::ServiceUnavailableException)
        pub fn build(self) -> crate::error::ServiceUnavailableException {
            crate::error::ServiceUnavailableException {
                message: self.message,
            }
        }
    }
}
impl ServiceUnavailableException {
    /// Creates a new builder-style object to manufacture [`ServiceUnavailableException`](crate::error::ServiceUnavailableException)
    pub fn builder() -> crate::error::service_unavailable_exception::Builder {
        crate::error::service_unavailable_exception::Builder::default()
    }
}

/// <p> The input text was not in valid UTF-8 character encoding. Check your text then retry your request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidEncodingException {
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidEncodingException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidEncodingException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InvalidEncodingException {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidEncodingException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidEncodingException")?;
        if let Some(inner_8) = &self.message {
            write!(f, ": {}", inner_8)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidEncodingException {}
/// See [`InvalidEncodingException`](crate::error::InvalidEncodingException)
pub mod invalid_encoding_exception {
    /// A builder for [`InvalidEncodingException`](crate::error::InvalidEncodingException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidEncodingException`](crate::error::InvalidEncodingException)
        pub fn build(self) -> crate::error::InvalidEncodingException {
            crate::error::InvalidEncodingException {
                message: self.message,
            }
        }
    }
}
impl InvalidEncodingException {
    /// Creates a new builder-style object to manufacture [`InvalidEncodingException`](crate::error::InvalidEncodingException)
    pub fn builder() -> crate::error::invalid_encoding_exception::Builder {
        crate::error::invalid_encoding_exception::Builder::default()
    }
}
