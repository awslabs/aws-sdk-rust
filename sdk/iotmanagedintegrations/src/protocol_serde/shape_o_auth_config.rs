// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_o_auth_config(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::OAuthConfig,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("authUrl").string(input.auth_url.as_str());
    }
    {
        object.key("tokenUrl").string(input.token_url.as_str());
    }
    if let Some(var_1) = &input.scope {
        object.key("scope").string(var_1.as_str());
    }
    {
        object
            .key("tokenEndpointAuthenticationScheme")
            .string(input.token_endpoint_authentication_scheme.as_str());
    }
    if let Some(var_2) = &input.o_auth_complete_redirect_url {
        object.key("oAuthCompleteRedirectUrl").string(var_2.as_str());
    }
    if let Some(var_3) = &input.proactive_refresh_token_renewal {
        #[allow(unused_mut)]
        let mut object_4 = object.key("proactiveRefreshTokenRenewal").start_object();
        crate::protocol_serde::shape_proactive_refresh_token_renewal::ser_proactive_refresh_token_renewal(&mut object_4, var_3)?;
        object_4.finish();
    }
    Ok(())
}

pub(crate) fn de_o_auth_config<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::OAuthConfig>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::OAuthConfigBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "authUrl" => {
                            builder = builder.set_auth_url(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "tokenUrl" => {
                            builder = builder.set_token_url(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "scope" => {
                            builder = builder.set_scope(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "tokenEndpointAuthenticationScheme" => {
                            builder = builder.set_token_endpoint_authentication_scheme(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::TokenEndpointAuthenticationScheme::from(u.as_ref()))
                                    })
                                    .transpose()?,
                            );
                        }
                        "oAuthCompleteRedirectUrl" => {
                            builder = builder.set_o_auth_complete_redirect_url(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "proactiveRefreshTokenRenewal" => {
                            builder = builder.set_proactive_refresh_token_renewal(
                                crate::protocol_serde::shape_proactive_refresh_token_renewal::de_proactive_refresh_token_renewal(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::o_auth_config_correct_errors(builder).build().map_err(|err| {
                ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err)
            })?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
