// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `DisconnectReasonValue`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let disconnectreasonvalue = unimplemented!();
/// match disconnectreasonvalue {
///     DisconnectReasonValue::AuthError => { /* ... */ },
///     DisconnectReasonValue::ClientError => { /* ... */ },
///     DisconnectReasonValue::ClientInitiatedDisconnect => { /* ... */ },
///     DisconnectReasonValue::ConnectionLost => { /* ... */ },
///     DisconnectReasonValue::CustomauthTtlExpiration => { /* ... */ },
///     DisconnectReasonValue::DuplicateClientid => { /* ... */ },
///     DisconnectReasonValue::ForbiddenAccess => { /* ... */ },
///     DisconnectReasonValue::MqttKeepAliveTimeout => { /* ... */ },
///     DisconnectReasonValue::None => { /* ... */ },
///     DisconnectReasonValue::ServerError => { /* ... */ },
///     DisconnectReasonValue::ServerInitiatedDisconnect => { /* ... */ },
///     DisconnectReasonValue::Throttled => { /* ... */ },
///     DisconnectReasonValue::UnknownValue => { /* ... */ },
///     DisconnectReasonValue::WebsocketTtlExpiration => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `disconnectreasonvalue` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `DisconnectReasonValue::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `DisconnectReasonValue::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `DisconnectReasonValue::NewFeature` is defined.
/// Specifically, when `disconnectreasonvalue` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `DisconnectReasonValue::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
///
/// _Note: `DisconnectReasonValue::Unknown` has been renamed to `::UnknownValue`._
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum DisconnectReasonValue {
    #[allow(missing_docs)] // documentation missing in model
    AuthError,
    #[allow(missing_docs)] // documentation missing in model
    ClientError,
    #[allow(missing_docs)] // documentation missing in model
    ClientInitiatedDisconnect,
    #[allow(missing_docs)] // documentation missing in model
    ConnectionLost,
    #[allow(missing_docs)] // documentation missing in model
    CustomauthTtlExpiration,
    #[allow(missing_docs)] // documentation missing in model
    DuplicateClientid,
    #[allow(missing_docs)] // documentation missing in model
    ForbiddenAccess,
    #[allow(missing_docs)] // documentation missing in model
    MqttKeepAliveTimeout,
    #[allow(missing_docs)] // documentation missing in model
    None,
    #[allow(missing_docs)] // documentation missing in model
    ServerError,
    #[allow(missing_docs)] // documentation missing in model
    ServerInitiatedDisconnect,
    #[allow(missing_docs)] // documentation missing in model
    Throttled,
    ///
    /// _Note: `::Unknown` has been renamed to `::UnknownValue`._
    UnknownValue,
    #[allow(missing_docs)] // documentation missing in model
    WebsocketTtlExpiration,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for DisconnectReasonValue {
    fn from(s: &str) -> Self {
        match s {
            "AUTH_ERROR" => DisconnectReasonValue::AuthError,
            "CLIENT_ERROR" => DisconnectReasonValue::ClientError,
            "CLIENT_INITIATED_DISCONNECT" => DisconnectReasonValue::ClientInitiatedDisconnect,
            "CONNECTION_LOST" => DisconnectReasonValue::ConnectionLost,
            "CUSTOMAUTH_TTL_EXPIRATION" => DisconnectReasonValue::CustomauthTtlExpiration,
            "DUPLICATE_CLIENTID" => DisconnectReasonValue::DuplicateClientid,
            "FORBIDDEN_ACCESS" => DisconnectReasonValue::ForbiddenAccess,
            "MQTT_KEEP_ALIVE_TIMEOUT" => DisconnectReasonValue::MqttKeepAliveTimeout,
            "NONE" => DisconnectReasonValue::None,
            "SERVER_ERROR" => DisconnectReasonValue::ServerError,
            "SERVER_INITIATED_DISCONNECT" => DisconnectReasonValue::ServerInitiatedDisconnect,
            "THROTTLED" => DisconnectReasonValue::Throttled,
            "UNKNOWN" => DisconnectReasonValue::UnknownValue,
            "WEBSOCKET_TTL_EXPIRATION" => DisconnectReasonValue::WebsocketTtlExpiration,
            other => DisconnectReasonValue::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for DisconnectReasonValue {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(DisconnectReasonValue::from(s))
    }
}
impl DisconnectReasonValue {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DisconnectReasonValue::AuthError => "AUTH_ERROR",
            DisconnectReasonValue::ClientError => "CLIENT_ERROR",
            DisconnectReasonValue::ClientInitiatedDisconnect => "CLIENT_INITIATED_DISCONNECT",
            DisconnectReasonValue::ConnectionLost => "CONNECTION_LOST",
            DisconnectReasonValue::CustomauthTtlExpiration => "CUSTOMAUTH_TTL_EXPIRATION",
            DisconnectReasonValue::DuplicateClientid => "DUPLICATE_CLIENTID",
            DisconnectReasonValue::ForbiddenAccess => "FORBIDDEN_ACCESS",
            DisconnectReasonValue::MqttKeepAliveTimeout => "MQTT_KEEP_ALIVE_TIMEOUT",
            DisconnectReasonValue::None => "NONE",
            DisconnectReasonValue::ServerError => "SERVER_ERROR",
            DisconnectReasonValue::ServerInitiatedDisconnect => "SERVER_INITIATED_DISCONNECT",
            DisconnectReasonValue::Throttled => "THROTTLED",
            DisconnectReasonValue::UnknownValue => "UNKNOWN",
            DisconnectReasonValue::WebsocketTtlExpiration => "WEBSOCKET_TTL_EXPIRATION",
            DisconnectReasonValue::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AUTH_ERROR",
            "CLIENT_ERROR",
            "CLIENT_INITIATED_DISCONNECT",
            "CONNECTION_LOST",
            "CUSTOMAUTH_TTL_EXPIRATION",
            "DUPLICATE_CLIENTID",
            "FORBIDDEN_ACCESS",
            "MQTT_KEEP_ALIVE_TIMEOUT",
            "NONE",
            "SERVER_ERROR",
            "SERVER_INITIATED_DISCONNECT",
            "THROTTLED",
            "UNKNOWN",
            "WEBSOCKET_TTL_EXPIRATION",
        ]
    }
}
impl ::std::convert::AsRef<str> for DisconnectReasonValue {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl DisconnectReasonValue {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for DisconnectReasonValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            DisconnectReasonValue::AuthError => write!(f, "AUTH_ERROR"),
            DisconnectReasonValue::ClientError => write!(f, "CLIENT_ERROR"),
            DisconnectReasonValue::ClientInitiatedDisconnect => write!(f, "CLIENT_INITIATED_DISCONNECT"),
            DisconnectReasonValue::ConnectionLost => write!(f, "CONNECTION_LOST"),
            DisconnectReasonValue::CustomauthTtlExpiration => write!(f, "CUSTOMAUTH_TTL_EXPIRATION"),
            DisconnectReasonValue::DuplicateClientid => write!(f, "DUPLICATE_CLIENTID"),
            DisconnectReasonValue::ForbiddenAccess => write!(f, "FORBIDDEN_ACCESS"),
            DisconnectReasonValue::MqttKeepAliveTimeout => write!(f, "MQTT_KEEP_ALIVE_TIMEOUT"),
            DisconnectReasonValue::None => write!(f, "NONE"),
            DisconnectReasonValue::ServerError => write!(f, "SERVER_ERROR"),
            DisconnectReasonValue::ServerInitiatedDisconnect => write!(f, "SERVER_INITIATED_DISCONNECT"),
            DisconnectReasonValue::Throttled => write!(f, "THROTTLED"),
            DisconnectReasonValue::UnknownValue => write!(f, "UNKNOWN"),
            DisconnectReasonValue::WebsocketTtlExpiration => write!(f, "WEBSOCKET_TTL_EXPIRATION"),
            DisconnectReasonValue::Unknown(value) => write!(f, "{value}"),
        }
    }
}
