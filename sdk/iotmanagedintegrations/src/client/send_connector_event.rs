// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SendConnectorEvent`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connector_id(impl Into<String>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::connector_id) / [`set_connector_id(Option<String>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::set_connector_id):<br>required: **true**<br><p>The id of the connector between the third-party cloud provider and IoT managed integrations.</p><br>
    ///   - [`user_id(impl Into<String>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::user_id) / [`set_user_id(Option<String>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::set_user_id):<br>required: **false**<br><p>The id of the third-party cloud provider.</p><br>
    ///   - [`operation(ConnectorEventOperation)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::operation) / [`set_operation(Option<ConnectorEventOperation>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::set_operation):<br>required: **true**<br><p>The Open Connectivity Foundation (OCF) operation requested to be performed on the managed thing.</p><note>  <p>The field op can have a value of "I" or "U". The field "cn" will contain the capability types.</p> </note><br>
    ///   - [`operation_version(impl Into<String>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::operation_version) / [`set_operation_version(Option<String>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::set_operation_version):<br>required: **false**<br><p>The Open Connectivity Foundation (OCF) security specification version for the operation being requested on the managed thing. For more information, see <a href="https://openconnectivity.org/specs/OCF_Security_Specification_v1.0.0.pdf">OCF Security Specification</a>.</p><br>
    ///   - [`status_code(i32)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::status_code) / [`set_status_code(Option<i32>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::set_status_code):<br>required: **false**<br><p>The status code of the Open Connectivity Foundation (OCF) operation being performed on the managed thing.</p><br>
    ///   - [`message(impl Into<String>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::message) / [`set_message(Option<String>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::set_message):<br>required: **false**<br><p>The device state change event payload.</p> <p>This parameter will include the following three fields:</p> <ul>  <li>   <p><code>uri</code>: <code>schema auc://&lt;PARTNER-DEVICE-ID&gt;/ResourcePath</code> (The <code>Resourcepath</code> corresponds to an OCF resource.)</p></li>  <li>   <p><code>op</code>: For device state changes, this field must populate as <code>n+d</code>.</p></li>  <li>   <p><code>cn</code>: The content depends on the OCF resource referenced in <code>ResourcePath</code>.</p></li> </ul><br>
    ///   - [`device_discovery_id(impl Into<String>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::device_discovery_id) / [`set_device_discovery_id(Option<String>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::set_device_discovery_id):<br>required: **false**<br><p>The id for the device discovery job.</p><br>
    ///   - [`connector_device_id(impl Into<String>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::connector_device_id) / [`set_connector_device_id(Option<String>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::set_connector_device_id):<br>required: **false**<br><p>The third-party device id as defined by the connector. This device id must not contain personal identifiable information (PII).</p><note>  <p>This parameter is used for cloud-to-cloud devices only.</p> </note><br>
    ///   - [`trace_id(impl Into<String>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::trace_id) / [`set_trace_id(Option<String>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::set_trace_id):<br>required: **false**<br><p>The trace request identifier. This is generated by IoT managed integrations and can be used to trace this command and its related operations in CloudWatch.</p><br>
    ///   - [`devices(Device)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::devices) / [`set_devices(Option<Vec::<Device>>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::set_devices):<br>required: **false**<br><p>The list of devices.</p><br>
    ///   - [`matter_endpoint(MatterEndpoint)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::matter_endpoint) / [`set_matter_endpoint(Option<MatterEndpoint>)`](crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::set_matter_endpoint):<br>required: **false**<br><p>The device endpoint.</p><br>
    /// - On success, responds with [`SendConnectorEventOutput`](crate::operation::send_connector_event::SendConnectorEventOutput) with field(s):
    ///   - [`connector_id(String)`](crate::operation::send_connector_event::SendConnectorEventOutput::connector_id): <p>The id of the connector between the third-party cloud provider and IoT managed integrations.</p>
    /// - On failure, responds with [`SdkError<SendConnectorEventError>`](crate::operation::send_connector_event::SendConnectorEventError)
    pub fn send_connector_event(&self) -> crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder {
        crate::operation::send_connector_event::builders::SendConnectorEventFluentBuilder::new(self.handle.clone())
    }
}
