// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::send_connector_event::_send_connector_event_output::SendConnectorEventOutputBuilder;

pub use crate::operation::send_connector_event::_send_connector_event_input::SendConnectorEventInputBuilder;

impl crate::operation::send_connector_event::builders::SendConnectorEventInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::send_connector_event::SendConnectorEventOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::send_connector_event::SendConnectorEventError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.send_connector_event();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `SendConnectorEvent`.
///
/// <p>Relays third-party device events for a connector such as a new device or a device state change event.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct SendConnectorEventFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::send_connector_event::builders::SendConnectorEventInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::send_connector_event::SendConnectorEventOutput,
        crate::operation::send_connector_event::SendConnectorEventError,
    > for SendConnectorEventFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::send_connector_event::SendConnectorEventOutput,
            crate::operation::send_connector_event::SendConnectorEventError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl SendConnectorEventFluentBuilder {
    /// Creates a new `SendConnectorEventFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the SendConnectorEvent as a reference.
    pub fn as_input(&self) -> &crate::operation::send_connector_event::builders::SendConnectorEventInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::send_connector_event::SendConnectorEventOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::send_connector_event::SendConnectorEventError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::send_connector_event::SendConnectorEvent::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::send_connector_event::SendConnectorEvent::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::send_connector_event::SendConnectorEventOutput,
        crate::operation::send_connector_event::SendConnectorEventError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The id of the connector between the third-party cloud provider and IoT managed integrations.</p>
    pub fn connector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.connector_id(input.into());
        self
    }
    /// <p>The id of the connector between the third-party cloud provider and IoT managed integrations.</p>
    pub fn set_connector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_connector_id(input);
        self
    }
    /// <p>The id of the connector between the third-party cloud provider and IoT managed integrations.</p>
    pub fn get_connector_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_connector_id()
    }
    /// <p>The id of the third-party cloud provider.</p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_id(input.into());
        self
    }
    /// <p>The id of the third-party cloud provider.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_id(input);
        self
    }
    /// <p>The id of the third-party cloud provider.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_id()
    }
    /// <p>The Open Connectivity Foundation (OCF) operation requested to be performed on the managed thing.</p><note>
    /// <p>The field op can have a value of "I" or "U". The field "cn" will contain the capability types.</p>
    /// </note>
    pub fn operation(mut self, input: crate::types::ConnectorEventOperation) -> Self {
        self.inner = self.inner.operation(input);
        self
    }
    /// <p>The Open Connectivity Foundation (OCF) operation requested to be performed on the managed thing.</p><note>
    /// <p>The field op can have a value of "I" or "U". The field "cn" will contain the capability types.</p>
    /// </note>
    pub fn set_operation(mut self, input: ::std::option::Option<crate::types::ConnectorEventOperation>) -> Self {
        self.inner = self.inner.set_operation(input);
        self
    }
    /// <p>The Open Connectivity Foundation (OCF) operation requested to be performed on the managed thing.</p><note>
    /// <p>The field op can have a value of "I" or "U". The field "cn" will contain the capability types.</p>
    /// </note>
    pub fn get_operation(&self) -> &::std::option::Option<crate::types::ConnectorEventOperation> {
        self.inner.get_operation()
    }
    /// <p>The Open Connectivity Foundation (OCF) security specification version for the operation being requested on the managed thing. For more information, see <a href="https://openconnectivity.org/specs/OCF_Security_Specification_v1.0.0.pdf">OCF Security Specification</a>.</p>
    pub fn operation_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.operation_version(input.into());
        self
    }
    /// <p>The Open Connectivity Foundation (OCF) security specification version for the operation being requested on the managed thing. For more information, see <a href="https://openconnectivity.org/specs/OCF_Security_Specification_v1.0.0.pdf">OCF Security Specification</a>.</p>
    pub fn set_operation_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_operation_version(input);
        self
    }
    /// <p>The Open Connectivity Foundation (OCF) security specification version for the operation being requested on the managed thing. For more information, see <a href="https://openconnectivity.org/specs/OCF_Security_Specification_v1.0.0.pdf">OCF Security Specification</a>.</p>
    pub fn get_operation_version(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_operation_version()
    }
    /// <p>The status code of the Open Connectivity Foundation (OCF) operation being performed on the managed thing.</p>
    pub fn status_code(mut self, input: i32) -> Self {
        self.inner = self.inner.status_code(input);
        self
    }
    /// <p>The status code of the Open Connectivity Foundation (OCF) operation being performed on the managed thing.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_status_code(input);
        self
    }
    /// <p>The status code of the Open Connectivity Foundation (OCF) operation being performed on the managed thing.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<i32> {
        self.inner.get_status_code()
    }
    /// <p>The device state change event payload.</p>
    /// <p>This parameter will include the following three fields:</p>
    /// <ul>
    /// <li>
    /// <p><code>uri</code>: <code>schema auc://&lt;PARTNER-DEVICE-ID&gt;/ResourcePath</code> (The <code>Resourcepath</code> corresponds to an OCF resource.)</p></li>
    /// <li>
    /// <p><code>op</code>: For device state changes, this field must populate as <code>n+d</code>.</p></li>
    /// <li>
    /// <p><code>cn</code>: The content depends on the OCF resource referenced in <code>ResourcePath</code>.</p></li>
    /// </ul>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.message(input.into());
        self
    }
    /// <p>The device state change event payload.</p>
    /// <p>This parameter will include the following three fields:</p>
    /// <ul>
    /// <li>
    /// <p><code>uri</code>: <code>schema auc://&lt;PARTNER-DEVICE-ID&gt;/ResourcePath</code> (The <code>Resourcepath</code> corresponds to an OCF resource.)</p></li>
    /// <li>
    /// <p><code>op</code>: For device state changes, this field must populate as <code>n+d</code>.</p></li>
    /// <li>
    /// <p><code>cn</code>: The content depends on the OCF resource referenced in <code>ResourcePath</code>.</p></li>
    /// </ul>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_message(input);
        self
    }
    /// <p>The device state change event payload.</p>
    /// <p>This parameter will include the following three fields:</p>
    /// <ul>
    /// <li>
    /// <p><code>uri</code>: <code>schema auc://&lt;PARTNER-DEVICE-ID&gt;/ResourcePath</code> (The <code>Resourcepath</code> corresponds to an OCF resource.)</p></li>
    /// <li>
    /// <p><code>op</code>: For device state changes, this field must populate as <code>n+d</code>.</p></li>
    /// <li>
    /// <p><code>cn</code>: The content depends on the OCF resource referenced in <code>ResourcePath</code>.</p></li>
    /// </ul>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_message()
    }
    /// <p>The id for the device discovery job.</p>
    pub fn device_discovery_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.device_discovery_id(input.into());
        self
    }
    /// <p>The id for the device discovery job.</p>
    pub fn set_device_discovery_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_device_discovery_id(input);
        self
    }
    /// <p>The id for the device discovery job.</p>
    pub fn get_device_discovery_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_device_discovery_id()
    }
    /// <p>The third-party device id as defined by the connector. This device id must not contain personal identifiable information (PII).</p><note>
    /// <p>This parameter is used for cloud-to-cloud devices only.</p>
    /// </note>
    pub fn connector_device_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.connector_device_id(input.into());
        self
    }
    /// <p>The third-party device id as defined by the connector. This device id must not contain personal identifiable information (PII).</p><note>
    /// <p>This parameter is used for cloud-to-cloud devices only.</p>
    /// </note>
    pub fn set_connector_device_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_connector_device_id(input);
        self
    }
    /// <p>The third-party device id as defined by the connector. This device id must not contain personal identifiable information (PII).</p><note>
    /// <p>This parameter is used for cloud-to-cloud devices only.</p>
    /// </note>
    pub fn get_connector_device_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_connector_device_id()
    }
    /// <p>The trace request identifier. This is generated by IoT managed integrations and can be used to trace this command and its related operations in CloudWatch.</p>
    pub fn trace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.trace_id(input.into());
        self
    }
    /// <p>The trace request identifier. This is generated by IoT managed integrations and can be used to trace this command and its related operations in CloudWatch.</p>
    pub fn set_trace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_trace_id(input);
        self
    }
    /// <p>The trace request identifier. This is generated by IoT managed integrations and can be used to trace this command and its related operations in CloudWatch.</p>
    pub fn get_trace_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_trace_id()
    }
    ///
    /// Appends an item to `Devices`.
    ///
    /// To override the contents of this collection use [`set_devices`](Self::set_devices).
    ///
    /// <p>The list of devices.</p>
    pub fn devices(mut self, input: crate::types::Device) -> Self {
        self.inner = self.inner.devices(input);
        self
    }
    /// <p>The list of devices.</p>
    pub fn set_devices(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Device>>) -> Self {
        self.inner = self.inner.set_devices(input);
        self
    }
    /// <p>The list of devices.</p>
    pub fn get_devices(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Device>> {
        self.inner.get_devices()
    }
    /// <p>The device endpoint.</p>
    pub fn matter_endpoint(mut self, input: crate::types::MatterEndpoint) -> Self {
        self.inner = self.inner.matter_endpoint(input);
        self
    }
    /// <p>The device endpoint.</p>
    pub fn set_matter_endpoint(mut self, input: ::std::option::Option<crate::types::MatterEndpoint>) -> Self {
        self.inner = self.inner.set_matter_endpoint(input);
        self
    }
    /// <p>The device endpoint.</p>
    pub fn get_matter_endpoint(&self) -> &::std::option::Option<crate::types::MatterEndpoint> {
        self.inner.get_matter_endpoint()
    }
}
