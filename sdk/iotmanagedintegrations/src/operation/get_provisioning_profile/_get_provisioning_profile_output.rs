// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetProvisioningProfileOutput {
    /// <p>The Amazon Resource Name (ARN) of the provisioning template used in the provisioning profile.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the provisioning template.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of provisioning workflow the device uses for onboarding to IoT managed integrations.</p>
    pub provisioning_type: ::std::option::Option<crate::types::ProvisioningType>,
    /// <p>The provisioning profile id.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The id of the claim certificate.</p>
    pub claim_certificate: ::std::option::Option<::std::string::String>,
    /// <p>A set of key/value pairs that are used to manage the provisioning profile.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetProvisioningProfileOutput {
    /// <p>The Amazon Resource Name (ARN) of the provisioning template used in the provisioning profile.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the provisioning template.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of provisioning workflow the device uses for onboarding to IoT managed integrations.</p>
    pub fn provisioning_type(&self) -> ::std::option::Option<&crate::types::ProvisioningType> {
        self.provisioning_type.as_ref()
    }
    /// <p>The provisioning profile id.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The id of the claim certificate.</p>
    pub fn claim_certificate(&self) -> ::std::option::Option<&str> {
        self.claim_certificate.as_deref()
    }
    /// <p>A set of key/value pairs that are used to manage the provisioning profile.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for GetProvisioningProfileOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetProvisioningProfileOutput");
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("provisioning_type", &self.provisioning_type);
        formatter.field("id", &self.id);
        formatter.field("claim_certificate", &"*** Sensitive Data Redacted ***");
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetProvisioningProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetProvisioningProfileOutput {
    /// Creates a new builder-style object to manufacture [`GetProvisioningProfileOutput`](crate::operation::get_provisioning_profile::GetProvisioningProfileOutput).
    pub fn builder() -> crate::operation::get_provisioning_profile::builders::GetProvisioningProfileOutputBuilder {
        crate::operation::get_provisioning_profile::builders::GetProvisioningProfileOutputBuilder::default()
    }
}

/// A builder for [`GetProvisioningProfileOutput`](crate::operation::get_provisioning_profile::GetProvisioningProfileOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetProvisioningProfileOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) provisioning_type: ::std::option::Option<crate::types::ProvisioningType>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) claim_certificate: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetProvisioningProfileOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the provisioning template used in the provisioning profile.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the provisioning template used in the provisioning profile.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the provisioning template used in the provisioning profile.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the provisioning template.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the provisioning template.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the provisioning template.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of provisioning workflow the device uses for onboarding to IoT managed integrations.</p>
    pub fn provisioning_type(mut self, input: crate::types::ProvisioningType) -> Self {
        self.provisioning_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of provisioning workflow the device uses for onboarding to IoT managed integrations.</p>
    pub fn set_provisioning_type(mut self, input: ::std::option::Option<crate::types::ProvisioningType>) -> Self {
        self.provisioning_type = input;
        self
    }
    /// <p>The type of provisioning workflow the device uses for onboarding to IoT managed integrations.</p>
    pub fn get_provisioning_type(&self) -> &::std::option::Option<crate::types::ProvisioningType> {
        &self.provisioning_type
    }
    /// <p>The provisioning profile id.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The provisioning profile id.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The provisioning profile id.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The id of the claim certificate.</p>
    pub fn claim_certificate(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.claim_certificate = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the claim certificate.</p>
    pub fn set_claim_certificate(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.claim_certificate = input;
        self
    }
    /// <p>The id of the claim certificate.</p>
    pub fn get_claim_certificate(&self) -> &::std::option::Option<::std::string::String> {
        &self.claim_certificate
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A set of key/value pairs that are used to manage the provisioning profile.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A set of key/value pairs that are used to manage the provisioning profile.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A set of key/value pairs that are used to manage the provisioning profile.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetProvisioningProfileOutput`](crate::operation::get_provisioning_profile::GetProvisioningProfileOutput).
    pub fn build(self) -> crate::operation::get_provisioning_profile::GetProvisioningProfileOutput {
        crate::operation::get_provisioning_profile::GetProvisioningProfileOutput {
            arn: self.arn,
            name: self.name,
            provisioning_type: self.provisioning_type,
            id: self.id,
            claim_certificate: self.claim_certificate,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetProvisioningProfileOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetProvisioningProfileOutputBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("provisioning_type", &self.provisioning_type);
        formatter.field("id", &self.id);
        formatter.field("claim_certificate", &"*** Sensitive Data Redacted ***");
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
