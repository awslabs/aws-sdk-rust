// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the output of a <code>ListStreams</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListStreamsOutput {
    /// <p>A list of stream descriptors associated with the current account and endpoint.</p>
    #[doc(hidden)]
    pub streams: std::option::Option<std::vec::Vec<crate::types::Stream>>,
    /// <p>The stream ARN of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.</p>
    /// <p>If <code>LastEvaluatedStreamArn</code> is empty, then the "last page" of results has been processed and there is no more data to be retrieved.</p>
    /// <p>If <code>LastEvaluatedStreamArn</code> is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when <code>LastEvaluatedStreamArn</code> is empty.</p>
    #[doc(hidden)]
    pub last_evaluated_stream_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListStreamsOutput {
    /// <p>A list of stream descriptors associated with the current account and endpoint.</p>
    pub fn streams(&self) -> std::option::Option<&[crate::types::Stream]> {
        self.streams.as_deref()
    }
    /// <p>The stream ARN of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.</p>
    /// <p>If <code>LastEvaluatedStreamArn</code> is empty, then the "last page" of results has been processed and there is no more data to be retrieved.</p>
    /// <p>If <code>LastEvaluatedStreamArn</code> is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when <code>LastEvaluatedStreamArn</code> is empty.</p>
    pub fn last_evaluated_stream_arn(&self) -> std::option::Option<&str> {
        self.last_evaluated_stream_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListStreamsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListStreamsOutput {
    /// Creates a new builder-style object to manufacture [`ListStreamsOutput`](crate::operation::list_streams::ListStreamsOutput).
    pub fn builder() -> crate::operation::list_streams::builders::ListStreamsOutputBuilder {
        crate::operation::list_streams::builders::ListStreamsOutputBuilder::default()
    }
}

/// A builder for [`ListStreamsOutput`](crate::operation::list_streams::ListStreamsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListStreamsOutputBuilder {
    pub(crate) streams: std::option::Option<std::vec::Vec<crate::types::Stream>>,
    pub(crate) last_evaluated_stream_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListStreamsOutputBuilder {
    /// Appends an item to `streams`.
    ///
    /// To override the contents of this collection use [`set_streams`](Self::set_streams).
    ///
    /// <p>A list of stream descriptors associated with the current account and endpoint.</p>
    pub fn streams(mut self, input: crate::types::Stream) -> Self {
        let mut v = self.streams.unwrap_or_default();
        v.push(input);
        self.streams = Some(v);
        self
    }
    /// <p>A list of stream descriptors associated with the current account and endpoint.</p>
    pub fn set_streams(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Stream>>,
    ) -> Self {
        self.streams = input;
        self
    }
    /// <p>The stream ARN of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.</p>
    /// <p>If <code>LastEvaluatedStreamArn</code> is empty, then the "last page" of results has been processed and there is no more data to be retrieved.</p>
    /// <p>If <code>LastEvaluatedStreamArn</code> is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when <code>LastEvaluatedStreamArn</code> is empty.</p>
    pub fn last_evaluated_stream_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_evaluated_stream_arn = Some(input.into());
        self
    }
    /// <p>The stream ARN of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.</p>
    /// <p>If <code>LastEvaluatedStreamArn</code> is empty, then the "last page" of results has been processed and there is no more data to be retrieved.</p>
    /// <p>If <code>LastEvaluatedStreamArn</code> is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when <code>LastEvaluatedStreamArn</code> is empty.</p>
    pub fn set_last_evaluated_stream_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_evaluated_stream_arn = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListStreamsOutput`](crate::operation::list_streams::ListStreamsOutput).
    pub fn build(self) -> crate::operation::list_streams::ListStreamsOutput {
        crate::operation::list_streams::ListStreamsOutput {
            streams: self.streams,
            last_evaluated_stream_arn: self.last_evaluated_stream_arn,
            _request_id: self._request_id,
        }
    }
}
