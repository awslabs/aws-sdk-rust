// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input of a <code>ListStreams</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListStreamsInput {
    /// <p>If this parameter is provided, then only the streams associated with this table name are returned.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of streams to return. The upper limit is 100.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>The ARN (Amazon Resource Name) of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedStreamArn</code> in the previous operation. </p>
    pub exclusive_start_stream_arn: ::std::option::Option<::std::string::String>,
}
impl ListStreamsInput {
    /// <p>If this parameter is provided, then only the streams associated with this table name are returned.</p>
    pub fn table_name(&self) -> ::std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>The maximum number of streams to return. The upper limit is 100.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
    /// <p>The ARN (Amazon Resource Name) of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedStreamArn</code> in the previous operation. </p>
    pub fn exclusive_start_stream_arn(&self) -> ::std::option::Option<&str> {
        self.exclusive_start_stream_arn.as_deref()
    }
}
impl ListStreamsInput {
    /// Creates a new builder-style object to manufacture [`ListStreamsInput`](crate::operation::list_streams::ListStreamsInput).
    pub fn builder() -> crate::operation::list_streams::builders::ListStreamsInputBuilder {
        crate::operation::list_streams::builders::ListStreamsInputBuilder::default()
    }
}

/// A builder for [`ListStreamsInput`](crate::operation::list_streams::ListStreamsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListStreamsInputBuilder {
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) limit: ::std::option::Option<i32>,
    pub(crate) exclusive_start_stream_arn: ::std::option::Option<::std::string::String>,
}
impl ListStreamsInputBuilder {
    /// <p>If this parameter is provided, then only the streams associated with this table name are returned.</p>
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If this parameter is provided, then only the streams associated with this table name are returned.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>If this parameter is provided, then only the streams associated with this table name are returned.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>The maximum number of streams to return. The upper limit is 100.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of streams to return. The upper limit is 100.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The maximum number of streams to return. The upper limit is 100.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// <p>The ARN (Amazon Resource Name) of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedStreamArn</code> in the previous operation. </p>
    pub fn exclusive_start_stream_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.exclusive_start_stream_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN (Amazon Resource Name) of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedStreamArn</code> in the previous operation. </p>
    pub fn set_exclusive_start_stream_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.exclusive_start_stream_arn = input;
        self
    }
    /// <p>The ARN (Amazon Resource Name) of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedStreamArn</code> in the previous operation. </p>
    pub fn get_exclusive_start_stream_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.exclusive_start_stream_arn
    }
    /// Consumes the builder and constructs a [`ListStreamsInput`](crate::operation::list_streams::ListStreamsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_streams::ListStreamsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_streams::ListStreamsInput {
            table_name: self.table_name,
            limit: self.limit,
            exclusive_start_stream_arn: self.exclusive_start_stream_arn,
        })
    }
}
