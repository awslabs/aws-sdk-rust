// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A description of a single data modification that was performed on an item in a DynamoDB table.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StreamRecord {
    /// <p>The approximate date and time when the stream record was created, in <a href="http://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    #[doc(hidden)]
    pub approximate_creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The primary key attribute(s) for the DynamoDB item that was modified.</p>
    #[doc(hidden)]
    pub keys: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::AttributeValue>,
    >,
    /// <p>The item in the DynamoDB table as it appeared after it was modified.</p>
    #[doc(hidden)]
    pub new_image: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::AttributeValue>,
    >,
    /// <p>The item in the DynamoDB table as it appeared before it was modified.</p>
    #[doc(hidden)]
    pub old_image: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::AttributeValue>,
    >,
    /// <p>The sequence number of the stream record.</p>
    #[doc(hidden)]
    pub sequence_number: std::option::Option<std::string::String>,
    /// <p>The size of the stream record, in bytes.</p>
    #[doc(hidden)]
    pub size_bytes: std::option::Option<i64>,
    /// <p>The type of data from the modified DynamoDB item that was captured in this stream record:</p>
    /// <ul>
    /// <li> <p> <code>KEYS_ONLY</code> - only the key attributes of the modified item.</p> </li>
    /// <li> <p> <code>NEW_IMAGE</code> - the entire item, as it appeared after it was modified.</p> </li>
    /// <li> <p> <code>OLD_IMAGE</code> - the entire item, as it appeared before it was modified.</p> </li>
    /// <li> <p> <code>NEW_AND_OLD_IMAGES</code> - both the new and the old item images of the item.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub stream_view_type: std::option::Option<crate::types::StreamViewType>,
}
impl StreamRecord {
    /// <p>The approximate date and time when the stream record was created, in <a href="http://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn approximate_creation_date_time(
        &self,
    ) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.approximate_creation_date_time.as_ref()
    }
    /// <p>The primary key attribute(s) for the DynamoDB item that was modified.</p>
    pub fn keys(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::AttributeValue>,
    > {
        self.keys.as_ref()
    }
    /// <p>The item in the DynamoDB table as it appeared after it was modified.</p>
    pub fn new_image(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::AttributeValue>,
    > {
        self.new_image.as_ref()
    }
    /// <p>The item in the DynamoDB table as it appeared before it was modified.</p>
    pub fn old_image(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::AttributeValue>,
    > {
        self.old_image.as_ref()
    }
    /// <p>The sequence number of the stream record.</p>
    pub fn sequence_number(&self) -> std::option::Option<&str> {
        self.sequence_number.as_deref()
    }
    /// <p>The size of the stream record, in bytes.</p>
    pub fn size_bytes(&self) -> std::option::Option<i64> {
        self.size_bytes
    }
    /// <p>The type of data from the modified DynamoDB item that was captured in this stream record:</p>
    /// <ul>
    /// <li> <p> <code>KEYS_ONLY</code> - only the key attributes of the modified item.</p> </li>
    /// <li> <p> <code>NEW_IMAGE</code> - the entire item, as it appeared after it was modified.</p> </li>
    /// <li> <p> <code>OLD_IMAGE</code> - the entire item, as it appeared before it was modified.</p> </li>
    /// <li> <p> <code>NEW_AND_OLD_IMAGES</code> - both the new and the old item images of the item.</p> </li>
    /// </ul>
    pub fn stream_view_type(&self) -> std::option::Option<&crate::types::StreamViewType> {
        self.stream_view_type.as_ref()
    }
}
impl StreamRecord {
    /// Creates a new builder-style object to manufacture [`StreamRecord`](crate::types::StreamRecord).
    pub fn builder() -> crate::types::builders::StreamRecordBuilder {
        crate::types::builders::StreamRecordBuilder::default()
    }
}

/// A builder for [`StreamRecord`](crate::types::StreamRecord).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StreamRecordBuilder {
    pub(crate) approximate_creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) keys: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::AttributeValue>,
    >,
    pub(crate) new_image: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::AttributeValue>,
    >,
    pub(crate) old_image: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::AttributeValue>,
    >,
    pub(crate) sequence_number: std::option::Option<std::string::String>,
    pub(crate) size_bytes: std::option::Option<i64>,
    pub(crate) stream_view_type: std::option::Option<crate::types::StreamViewType>,
}
impl StreamRecordBuilder {
    /// <p>The approximate date and time when the stream record was created, in <a href="http://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn approximate_creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.approximate_creation_date_time = Some(input);
        self
    }
    /// <p>The approximate date and time when the stream record was created, in <a href="http://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn set_approximate_creation_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.approximate_creation_date_time = input;
        self
    }
    /// Adds a key-value pair to `keys`.
    ///
    /// To override the contents of this collection use [`set_keys`](Self::set_keys).
    ///
    /// <p>The primary key attribute(s) for the DynamoDB item that was modified.</p>
    pub fn keys(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::AttributeValue,
    ) -> Self {
        let mut hash_map = self.keys.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.keys = Some(hash_map);
        self
    }
    /// <p>The primary key attribute(s) for the DynamoDB item that was modified.</p>
    pub fn set_keys(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::AttributeValue>,
        >,
    ) -> Self {
        self.keys = input;
        self
    }
    /// Adds a key-value pair to `new_image`.
    ///
    /// To override the contents of this collection use [`set_new_image`](Self::set_new_image).
    ///
    /// <p>The item in the DynamoDB table as it appeared after it was modified.</p>
    pub fn new_image(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::AttributeValue,
    ) -> Self {
        let mut hash_map = self.new_image.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.new_image = Some(hash_map);
        self
    }
    /// <p>The item in the DynamoDB table as it appeared after it was modified.</p>
    pub fn set_new_image(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::AttributeValue>,
        >,
    ) -> Self {
        self.new_image = input;
        self
    }
    /// Adds a key-value pair to `old_image`.
    ///
    /// To override the contents of this collection use [`set_old_image`](Self::set_old_image).
    ///
    /// <p>The item in the DynamoDB table as it appeared before it was modified.</p>
    pub fn old_image(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::AttributeValue,
    ) -> Self {
        let mut hash_map = self.old_image.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.old_image = Some(hash_map);
        self
    }
    /// <p>The item in the DynamoDB table as it appeared before it was modified.</p>
    pub fn set_old_image(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::AttributeValue>,
        >,
    ) -> Self {
        self.old_image = input;
        self
    }
    /// <p>The sequence number of the stream record.</p>
    pub fn sequence_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.sequence_number = Some(input.into());
        self
    }
    /// <p>The sequence number of the stream record.</p>
    pub fn set_sequence_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sequence_number = input;
        self
    }
    /// <p>The size of the stream record, in bytes.</p>
    pub fn size_bytes(mut self, input: i64) -> Self {
        self.size_bytes = Some(input);
        self
    }
    /// <p>The size of the stream record, in bytes.</p>
    pub fn set_size_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.size_bytes = input;
        self
    }
    /// <p>The type of data from the modified DynamoDB item that was captured in this stream record:</p>
    /// <ul>
    /// <li> <p> <code>KEYS_ONLY</code> - only the key attributes of the modified item.</p> </li>
    /// <li> <p> <code>NEW_IMAGE</code> - the entire item, as it appeared after it was modified.</p> </li>
    /// <li> <p> <code>OLD_IMAGE</code> - the entire item, as it appeared before it was modified.</p> </li>
    /// <li> <p> <code>NEW_AND_OLD_IMAGES</code> - both the new and the old item images of the item.</p> </li>
    /// </ul>
    pub fn stream_view_type(mut self, input: crate::types::StreamViewType) -> Self {
        self.stream_view_type = Some(input);
        self
    }
    /// <p>The type of data from the modified DynamoDB item that was captured in this stream record:</p>
    /// <ul>
    /// <li> <p> <code>KEYS_ONLY</code> - only the key attributes of the modified item.</p> </li>
    /// <li> <p> <code>NEW_IMAGE</code> - the entire item, as it appeared after it was modified.</p> </li>
    /// <li> <p> <code>OLD_IMAGE</code> - the entire item, as it appeared before it was modified.</p> </li>
    /// <li> <p> <code>NEW_AND_OLD_IMAGES</code> - both the new and the old item images of the item.</p> </li>
    /// </ul>
    pub fn set_stream_view_type(
        mut self,
        input: std::option::Option<crate::types::StreamViewType>,
    ) -> Self {
        self.stream_view_type = input;
        self
    }
    /// Consumes the builder and constructs a [`StreamRecord`](crate::types::StreamRecord).
    pub fn build(self) -> crate::types::StreamRecord {
        crate::types::StreamRecord {
            approximate_creation_date_time: self.approximate_creation_date_time,
            keys: self.keys,
            new_image: self.new_image,
            old_image: self.old_image,
            sequence_number: self.sequence_number,
            size_bytes: self.size_bytes,
            stream_view_type: self.stream_view_type,
        }
    }
}
