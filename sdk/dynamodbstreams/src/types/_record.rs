// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A description of a unique event within a stream.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Record {
    /// <p>A globally unique identifier for the event that was recorded in this stream record.</p>
    #[doc(hidden)]
    pub event_id: std::option::Option<std::string::String>,
    /// <p>The type of data modification that was performed on the DynamoDB table:</p>
    /// <ul>
    /// <li> <p> <code>INSERT</code> - a new item was added to the table.</p> </li>
    /// <li> <p> <code>MODIFY</code> - one or more of an existing item's attributes were modified.</p> </li>
    /// <li> <p> <code>REMOVE</code> - the item was deleted from the table</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub event_name: std::option::Option<crate::types::OperationType>,
    /// <p>The version number of the stream record format. This number is updated whenever the structure of <code>Record</code> is modified.</p>
    /// <p>Client applications must not assume that <code>eventVersion</code> will remain at a particular value, as this number is subject to change at any time. In general, <code>eventVersion</code> will only increase as the low-level DynamoDB Streams API evolves.</p>
    #[doc(hidden)]
    pub event_version: std::option::Option<std::string::String>,
    /// <p>The AWS service from which the stream record originated. For DynamoDB Streams, this is <code>aws:dynamodb</code>.</p>
    #[doc(hidden)]
    pub event_source: std::option::Option<std::string::String>,
    /// <p>The region in which the <code>GetRecords</code> request was received.</p>
    #[doc(hidden)]
    pub aws_region: std::option::Option<std::string::String>,
    /// <p>The main body of the stream record, containing all of the DynamoDB-specific fields.</p>
    #[doc(hidden)]
    pub dynamodb: std::option::Option<crate::types::StreamRecord>,
    /// <p>Items that are deleted by the Time to Live process after expiration have the following fields: </p>
    /// <ul>
    /// <li> <p>Records[].userIdentity.type</p> <p>"Service"</p> </li>
    /// <li> <p>Records[].userIdentity.principalId</p> <p>"dynamodb.amazonaws.com"</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub user_identity: std::option::Option<crate::types::Identity>,
}
impl Record {
    /// <p>A globally unique identifier for the event that was recorded in this stream record.</p>
    pub fn event_id(&self) -> std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>The type of data modification that was performed on the DynamoDB table:</p>
    /// <ul>
    /// <li> <p> <code>INSERT</code> - a new item was added to the table.</p> </li>
    /// <li> <p> <code>MODIFY</code> - one or more of an existing item's attributes were modified.</p> </li>
    /// <li> <p> <code>REMOVE</code> - the item was deleted from the table</p> </li>
    /// </ul>
    pub fn event_name(&self) -> std::option::Option<&crate::types::OperationType> {
        self.event_name.as_ref()
    }
    /// <p>The version number of the stream record format. This number is updated whenever the structure of <code>Record</code> is modified.</p>
    /// <p>Client applications must not assume that <code>eventVersion</code> will remain at a particular value, as this number is subject to change at any time. In general, <code>eventVersion</code> will only increase as the low-level DynamoDB Streams API evolves.</p>
    pub fn event_version(&self) -> std::option::Option<&str> {
        self.event_version.as_deref()
    }
    /// <p>The AWS service from which the stream record originated. For DynamoDB Streams, this is <code>aws:dynamodb</code>.</p>
    pub fn event_source(&self) -> std::option::Option<&str> {
        self.event_source.as_deref()
    }
    /// <p>The region in which the <code>GetRecords</code> request was received.</p>
    pub fn aws_region(&self) -> std::option::Option<&str> {
        self.aws_region.as_deref()
    }
    /// <p>The main body of the stream record, containing all of the DynamoDB-specific fields.</p>
    pub fn dynamodb(&self) -> std::option::Option<&crate::types::StreamRecord> {
        self.dynamodb.as_ref()
    }
    /// <p>Items that are deleted by the Time to Live process after expiration have the following fields: </p>
    /// <ul>
    /// <li> <p>Records[].userIdentity.type</p> <p>"Service"</p> </li>
    /// <li> <p>Records[].userIdentity.principalId</p> <p>"dynamodb.amazonaws.com"</p> </li>
    /// </ul>
    pub fn user_identity(&self) -> std::option::Option<&crate::types::Identity> {
        self.user_identity.as_ref()
    }
}
impl Record {
    /// Creates a new builder-style object to manufacture [`Record`](crate::types::Record).
    pub fn builder() -> crate::types::builders::RecordBuilder {
        crate::types::builders::RecordBuilder::default()
    }
}

/// A builder for [`Record`](crate::types::Record).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecordBuilder {
    pub(crate) event_id: std::option::Option<std::string::String>,
    pub(crate) event_name: std::option::Option<crate::types::OperationType>,
    pub(crate) event_version: std::option::Option<std::string::String>,
    pub(crate) event_source: std::option::Option<std::string::String>,
    pub(crate) aws_region: std::option::Option<std::string::String>,
    pub(crate) dynamodb: std::option::Option<crate::types::StreamRecord>,
    pub(crate) user_identity: std::option::Option<crate::types::Identity>,
}
impl RecordBuilder {
    /// <p>A globally unique identifier for the event that was recorded in this stream record.</p>
    pub fn event_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_id = Some(input.into());
        self
    }
    /// <p>A globally unique identifier for the event that was recorded in this stream record.</p>
    pub fn set_event_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The type of data modification that was performed on the DynamoDB table:</p>
    /// <ul>
    /// <li> <p> <code>INSERT</code> - a new item was added to the table.</p> </li>
    /// <li> <p> <code>MODIFY</code> - one or more of an existing item's attributes were modified.</p> </li>
    /// <li> <p> <code>REMOVE</code> - the item was deleted from the table</p> </li>
    /// </ul>
    pub fn event_name(mut self, input: crate::types::OperationType) -> Self {
        self.event_name = Some(input);
        self
    }
    /// <p>The type of data modification that was performed on the DynamoDB table:</p>
    /// <ul>
    /// <li> <p> <code>INSERT</code> - a new item was added to the table.</p> </li>
    /// <li> <p> <code>MODIFY</code> - one or more of an existing item's attributes were modified.</p> </li>
    /// <li> <p> <code>REMOVE</code> - the item was deleted from the table</p> </li>
    /// </ul>
    pub fn set_event_name(
        mut self,
        input: std::option::Option<crate::types::OperationType>,
    ) -> Self {
        self.event_name = input;
        self
    }
    /// <p>The version number of the stream record format. This number is updated whenever the structure of <code>Record</code> is modified.</p>
    /// <p>Client applications must not assume that <code>eventVersion</code> will remain at a particular value, as this number is subject to change at any time. In general, <code>eventVersion</code> will only increase as the low-level DynamoDB Streams API evolves.</p>
    pub fn event_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_version = Some(input.into());
        self
    }
    /// <p>The version number of the stream record format. This number is updated whenever the structure of <code>Record</code> is modified.</p>
    /// <p>Client applications must not assume that <code>eventVersion</code> will remain at a particular value, as this number is subject to change at any time. In general, <code>eventVersion</code> will only increase as the low-level DynamoDB Streams API evolves.</p>
    pub fn set_event_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_version = input;
        self
    }
    /// <p>The AWS service from which the stream record originated. For DynamoDB Streams, this is <code>aws:dynamodb</code>.</p>
    pub fn event_source(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_source = Some(input.into());
        self
    }
    /// <p>The AWS service from which the stream record originated. For DynamoDB Streams, this is <code>aws:dynamodb</code>.</p>
    pub fn set_event_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_source = input;
        self
    }
    /// <p>The region in which the <code>GetRecords</code> request was received.</p>
    pub fn aws_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_region = Some(input.into());
        self
    }
    /// <p>The region in which the <code>GetRecords</code> request was received.</p>
    pub fn set_aws_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_region = input;
        self
    }
    /// <p>The main body of the stream record, containing all of the DynamoDB-specific fields.</p>
    pub fn dynamodb(mut self, input: crate::types::StreamRecord) -> Self {
        self.dynamodb = Some(input);
        self
    }
    /// <p>The main body of the stream record, containing all of the DynamoDB-specific fields.</p>
    pub fn set_dynamodb(mut self, input: std::option::Option<crate::types::StreamRecord>) -> Self {
        self.dynamodb = input;
        self
    }
    /// <p>Items that are deleted by the Time to Live process after expiration have the following fields: </p>
    /// <ul>
    /// <li> <p>Records[].userIdentity.type</p> <p>"Service"</p> </li>
    /// <li> <p>Records[].userIdentity.principalId</p> <p>"dynamodb.amazonaws.com"</p> </li>
    /// </ul>
    pub fn user_identity(mut self, input: crate::types::Identity) -> Self {
        self.user_identity = Some(input);
        self
    }
    /// <p>Items that are deleted by the Time to Live process after expiration have the following fields: </p>
    /// <ul>
    /// <li> <p>Records[].userIdentity.type</p> <p>"Service"</p> </li>
    /// <li> <p>Records[].userIdentity.principalId</p> <p>"dynamodb.amazonaws.com"</p> </li>
    /// </ul>
    pub fn set_user_identity(mut self, input: std::option::Option<crate::types::Identity>) -> Self {
        self.user_identity = input;
        self
    }
    /// Consumes the builder and constructs a [`Record`](crate::types::Record).
    pub fn build(self) -> crate::types::Record {
        crate::types::Record {
            event_id: self.event_id,
            event_name: self.event_name,
            event_version: self.event_version,
            event_source: self.event_source,
            aws_region: self.aws_region,
            dynamodb: self.dynamodb,
            user_identity: self.user_identity,
        }
    }
}
