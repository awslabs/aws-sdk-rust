// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_support_data_export::_start_support_data_export_output::StartSupportDataExportOutputBuilder;

pub use crate::operation::start_support_data_export::_start_support_data_export_input::StartSupportDataExportInputBuilder;

/// Fluent builder constructing a request to `StartSupportDataExport`.
///
/// Given a data set type and a from date, asynchronously publishes the requested customer support data to the specified S3 bucket and notifies the specified SNS topic once the data is available. Returns a unique request identifier that can be used to correlate requests with notifications from the SNS topic. Data sets will be published in comma-separated values (CSV) format with the file name {data_set_type}_YYYY-MM-DD'T'HH-mm-ss'Z'.csv. If a file with the same name already exists (e.g. if the same data set is requested twice), the original file will be overwritten by the new file. Requires a Role with an attached permissions policy providing Allow permissions for the following actions: s3:PutObject, s3:GetBucketLocation, sns:GetTopicAttributes, sns:Publish, iam:GetRolePolicy.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartSupportDataExportFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::start_support_data_export::builders::StartSupportDataExportInputBuilder,
}
impl StartSupportDataExportFluentBuilder {
    /// Creates a new `StartSupportDataExport`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::start_support_data_export::StartSupportDataExport,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::start_support_data_export::StartSupportDataExportError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::start_support_data_export::StartSupportDataExportOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::start_support_data_export::StartSupportDataExportError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> Specifies the data set type to be written to the output csv file. The data set types customer_support_contacts_data and test_customer_support_contacts_data both result in a csv file containing the following fields: Product Id, Product Code, Customer Guid, Subscription Guid, Subscription Start Date, Organization, AWS Account Id, Given Name, Surname, Telephone Number, Email, Title, Country Code, ZIP Code, Operation Type, and Operation Time. </p>
    /// <p> </p>
    /// <ul>
    /// <li><i>customer_support_contacts_data</i> Customer support contact data. The data set will contain all changes (Creates, Updates, and Deletes) to customer support contact data from the date specified in the from_date parameter.</li>
    /// <li><i>test_customer_support_contacts_data</i> An example data set containing static test data in the same format as customer_support_contacts_data</li>
    /// </ul>
    /// <p></p>
    pub fn data_set_type(mut self, input: crate::types::SupportDataSetType) -> Self {
        self.inner = self.inner.data_set_type(input);
        self
    }
    /// <p> Specifies the data set type to be written to the output csv file. The data set types customer_support_contacts_data and test_customer_support_contacts_data both result in a csv file containing the following fields: Product Id, Product Code, Customer Guid, Subscription Guid, Subscription Start Date, Organization, AWS Account Id, Given Name, Surname, Telephone Number, Email, Title, Country Code, ZIP Code, Operation Type, and Operation Time. </p>
    /// <p> </p>
    /// <ul>
    /// <li><i>customer_support_contacts_data</i> Customer support contact data. The data set will contain all changes (Creates, Updates, and Deletes) to customer support contact data from the date specified in the from_date parameter.</li>
    /// <li><i>test_customer_support_contacts_data</i> An example data set containing static test data in the same format as customer_support_contacts_data</li>
    /// </ul>
    /// <p></p>
    pub fn set_data_set_type(
        mut self,
        input: std::option::Option<crate::types::SupportDataSetType>,
    ) -> Self {
        self.inner = self.inner.set_data_set_type(input);
        self
    }
    /// The start date from which to retrieve the data set in UTC. This parameter only affects the customer_support_contacts_data data set type.
    pub fn from_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.from_date(input);
        self
    }
    /// The start date from which to retrieve the data set in UTC. This parameter only affects the customer_support_contacts_data data set type.
    pub fn set_from_date(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_from_date(input);
        self
    }
    /// The Amazon Resource Name (ARN) of the Role with an attached permissions policy to interact with the provided AWS services.
    pub fn role_name_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_name_arn(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of the Role with an attached permissions policy to interact with the provided AWS services.
    pub fn set_role_name_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_name_arn(input);
        self
    }
    /// The name (friendly name, not ARN) of the destination S3 bucket.
    pub fn destination_s3_bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_s3_bucket_name(input.into());
        self
    }
    /// The name (friendly name, not ARN) of the destination S3 bucket.
    pub fn set_destination_s3_bucket_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_destination_s3_bucket_name(input);
        self
    }
    /// (Optional) The desired S3 prefix for the published data set, similar to a directory path in standard file systems. For example, if given the bucket name "mybucket" and the prefix "myprefix/mydatasets", the output file "outputfile" would be published to "s3://mybucket/myprefix/mydatasets/outputfile". If the prefix directory structure does not exist, it will be created. If no prefix is provided, the data set will be published to the S3 bucket root.
    pub fn destination_s3_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_s3_prefix(input.into());
        self
    }
    /// (Optional) The desired S3 prefix for the published data set, similar to a directory path in standard file systems. For example, if given the bucket name "mybucket" and the prefix "myprefix/mydatasets", the output file "outputfile" would be published to "s3://mybucket/myprefix/mydatasets/outputfile". If the prefix directory structure does not exist, it will be created. If no prefix is provided, the data set will be published to the S3 bucket root.
    pub fn set_destination_s3_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_destination_s3_prefix(input);
        self
    }
    /// Amazon Resource Name (ARN) for the SNS Topic that will be notified when the data set has been published or if an error has occurred.
    pub fn sns_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sns_topic_arn(input.into());
        self
    }
    /// Amazon Resource Name (ARN) for the SNS Topic that will be notified when the data set has been published or if an error has occurred.
    pub fn set_sns_topic_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sns_topic_arn(input);
        self
    }
    /// Adds a key-value pair to `customerDefinedValues`.
    ///
    /// To override the contents of this collection use [`set_customer_defined_values`](Self::set_customer_defined_values).
    ///
    /// (Optional) Key-value pairs which will be returned, unmodified, in the Amazon SNS notification message and the data set metadata file.
    pub fn customer_defined_values(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.customer_defined_values(k.into(), v.into());
        self
    }
    /// (Optional) Key-value pairs which will be returned, unmodified, in the Amazon SNS notification message and the data set metadata file.
    pub fn set_customer_defined_values(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_customer_defined_values(input);
        self
    }
}
