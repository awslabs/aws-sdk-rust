// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_generate_data_set_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GenerateDataSetOutput, crate::error::GenerateDataSetError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GenerateDataSetError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GenerateDataSetError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "MarketplaceCommerceAnalyticsException" => crate::error::GenerateDataSetError {
            meta: generic,
            kind: crate::error::GenerateDataSetErrorKind::MarketplaceCommerceAnalyticsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::marketplace_commerce_analytics_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_marketplace_commerce_analytics_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GenerateDataSetError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::GenerateDataSetError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_generate_data_set_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GenerateDataSetOutput, crate::error::GenerateDataSetError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::generate_data_set_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_generate_data_set(response.body().as_ref(), output)
                .map_err(crate::error::GenerateDataSetError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_support_data_export_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::StartSupportDataExportOutput,
    crate::error::StartSupportDataExportError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::StartSupportDataExportError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::StartSupportDataExportError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "MarketplaceCommerceAnalyticsException" => crate::error::StartSupportDataExportError {
            meta: generic,
            kind:
                crate::error::StartSupportDataExportErrorKind::MarketplaceCommerceAnalyticsException(
                    {
                        #[allow(unused_mut)]
                        let mut tmp = {
                            #[allow(unused_mut)]let mut output = crate::error::marketplace_commerce_analytics_exception::Builder::default();
                            let _ = response;
                            output = crate::json_deser::deser_structure_marketplace_commerce_analytics_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::StartSupportDataExportError::unhandled)?;
                            output.build()
                        };
                        if (&tmp.message).is_none() {
                            tmp.message = _error_message;
                        }
                        tmp
                    },
                ),
        },
        _ => crate::error::StartSupportDataExportError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_start_support_data_export_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::StartSupportDataExportOutput,
    crate::error::StartSupportDataExportError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::start_support_data_export_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_start_support_data_export(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::StartSupportDataExportError::unhandled)?;
        output.build()
    })
}
