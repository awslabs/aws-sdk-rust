// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Given a data set type and data set publication date, asynchronously publishes the requested data set to the specified
/// S3 bucket and notifies the specified SNS topic once the data is available. Returns a unique request identifier that
/// can be used to correlate requests with notifications from the SNS topic.
/// Data sets will be published in comma-separated values (CSV) format with the file name {data_set_type}_YYYY-MM-DD.csv.
/// If a file with the same name already exists (e.g. if the same data set is requested twice), the original file will
/// be overwritten by the new file.
/// Requires a Role with an attached permissions policy providing Allow permissions for the following actions:
/// s3:PutObject, s3:GetBucketLocation, sns:GetTopicAttributes, sns:Publish, iam:GetRolePolicy.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GenerateDataSet {
    _private: (),
}
impl GenerateDataSet {
    /// Creates a new builder-style object to manufacture [`GenerateDataSetInput`](crate::input::GenerateDataSetInput)
    pub fn builder() -> crate::input::generate_data_set_input::Builder {
        crate::input::generate_data_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GenerateDataSet {
    type Output = std::result::Result<
        crate::output::GenerateDataSetOutput,
        crate::error::GenerateDataSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_generate_data_set_error(response)
        } else {
            crate::operation_deser::parse_generate_data_set_response(response)
        }
    }
}

/// Given a data set type and a from date, asynchronously publishes the requested customer support data
/// to the specified S3 bucket and notifies the specified SNS topic once the data is available. Returns a unique request
/// identifier that can be used to correlate requests with notifications from the SNS topic.
/// Data sets will be published in comma-separated values (CSV) format with the file name {data_set_type}_YYYY-MM-DD'T'HH-mm-ss'Z'.csv.
/// If a file with the same name already exists (e.g. if the same data set is requested twice), the original file will
/// be overwritten by the new file.
/// Requires a Role with an attached permissions policy providing Allow permissions for the following actions:
/// s3:PutObject, s3:GetBucketLocation, sns:GetTopicAttributes, sns:Publish, iam:GetRolePolicy.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartSupportDataExport {
    _private: (),
}
impl StartSupportDataExport {
    /// Creates a new builder-style object to manufacture [`StartSupportDataExportInput`](crate::input::StartSupportDataExportInput)
    pub fn builder() -> crate::input::start_support_data_export_input::Builder {
        crate::input::start_support_data_export_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartSupportDataExport {
    type Output = std::result::Result<
        crate::output::StartSupportDataExportOutput,
        crate::error::StartSupportDataExportError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_support_data_export_error(response)
        } else {
            crate::operation_deser::parse_start_support_data_export_response(response)
        }
    }
}
