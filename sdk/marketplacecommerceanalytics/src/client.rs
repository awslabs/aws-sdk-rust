// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(std::fmt::Debug)]
pub(crate) struct Handle<C = aws_hyper::DynConnector> {
    client: aws_hyper::Client<C>,
    conf: crate::Config,
}

#[derive(Clone, std::fmt::Debug)]
pub struct Client<C = aws_hyper::DynConnector> {
    handle: std::sync::Arc<Handle<C>>,
}
impl<C> Client<C> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_env() -> Self {
        Self::from_conf(crate::Config::builder().build())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl<C> Client<C>
where
    C: aws_hyper::SmithyConnector,
{
    pub fn generate_data_set(&self) -> fluent_builders::GenerateDataSet<C> {
        fluent_builders::GenerateDataSet::new(self.handle.clone())
    }
    pub fn start_support_data_export(&self) -> fluent_builders::StartSupportDataExport<C> {
        fluent_builders::StartSupportDataExport::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct GenerateDataSet<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::generate_data_set_input::Builder,
    }
    impl<C> GenerateDataSet<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GenerateDataSetOutput,
            smithy_http::result::SdkError<crate::error::GenerateDataSetError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The desired data set type.</p>
        /// <p>
        /// <ul>
        /// <li>
        /// <strong>customer_subscriber_hourly_monthly_subscriptions</strong>
        /// <p>From 2017-09-15 to present: Available daily by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>customer_subscriber_annual_subscriptions</strong>
        /// <p>From 2017-09-15 to present: Available daily by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>daily_business_usage_by_instance_type</strong>
        /// <p>From 2017-09-15 to present: Available daily by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>daily_business_fees</strong>
        /// <p>From 2017-09-15 to present: Available daily by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>daily_business_free_trial_conversions</strong>
        /// <p>From 2017-09-15 to present: Available daily by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>daily_business_new_instances</strong>
        /// <p>From 2017-09-15 to present: Available daily by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>daily_business_new_product_subscribers</strong>
        /// <p>From 2017-09-15 to present: Available daily by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>daily_business_canceled_product_subscribers</strong>
        /// <p>From 2017-09-15 to present: Available daily by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>monthly_revenue_billing_and_revenue_data</strong>
        /// <p>From 2017-09-15 to present: Available monthly on the 15th day of the month by 24:00 UTC. Data includes metered transactions (e.g. hourly) from one month prior.</p>
        /// </li>
        /// <li>
        /// <strong>monthly_revenue_annual_subscriptions</strong>
        /// <p>From 2017-09-15 to present: Available monthly on the 15th day of the month by 24:00 UTC. Data includes up-front software charges (e.g. annual) from one month prior.</p>
        /// </li>
        /// <li>
        /// <strong>monthly_revenue_field_demonstration_usage</strong>
        /// <p>From 2018-03-15 to present: Available monthly on the 15th day of the month by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>monthly_revenue_flexible_payment_schedule</strong>
        /// <p>From 2018-11-15 to present: Available monthly on the 15th day of the month by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>disbursed_amount_by_product</strong>
        /// <p>From 2017-09-15 to present: Available every 30 days by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>disbursed_amount_by_instance_hours</strong>
        /// <p>From 2017-09-15 to present: Available every 30 days by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>disbursed_amount_by_customer_geo</strong>
        /// <p>From 2017-09-15 to present: Available every 30 days by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>disbursed_amount_by_age_of_uncollected_funds</strong>
        /// <p>From 2017-09-15 to present: Available every 30 days by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>disbursed_amount_by_age_of_disbursed_funds</strong>
        /// <p>From 2017-09-15 to present: Available every 30 days by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>disbursed_amount_by_age_of_past_due_funds</strong>
        /// <p>From 2018-04-07 to present: Available every 30 days by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>disbursed_amount_by_uncollected_funds_breakdown</strong>
        /// <p>From 2019-10-04 to present: Available every 30 days by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>sales_compensation_billed_revenue</strong>
        /// <p>From 2017-09-15 to present: Available monthly on the 15th day of the month by 24:00 UTC. Data includes metered transactions (e.g. hourly) from one month prior, and up-front software charges (e.g. annual) from one month prior.</p>
        /// </li>
        /// <li>
        /// <strong>us_sales_and_use_tax_records</strong>
        /// <p>From 2017-09-15 to present: Available monthly on the 15th day of the month by 24:00 UTC.</p>
        /// </li>
        /// <li>
        /// <strong>disbursed_amount_by_product_with_uncollected_funds</strong>
        /// <p>This data set is deprecated. Download related reports from AMMP instead!</p>
        /// </li>
        /// <li>
        /// <strong>customer_profile_by_industry</strong>
        /// <p>This data set is deprecated. Download related reports from AMMP instead!</p>
        /// </li>
        /// <li>
        /// <strong>customer_profile_by_revenue</strong>
        /// <p>This data set is deprecated. Download related reports from AMMP instead!</p>
        /// </li>
        /// <li>
        /// <strong>customer_profile_by_geography</strong>
        /// <p>This data set is deprecated. Download related reports from AMMP instead!</p>
        /// </li>
        /// </ul>
        /// </p>
        pub fn data_set_type(mut self, input: crate::model::DataSetType) -> Self {
            self.inner = self.inner.data_set_type(input);
            self
        }
        pub fn set_data_set_type(
            mut self,
            input: std::option::Option<crate::model::DataSetType>,
        ) -> Self {
            self.inner = self.inner.set_data_set_type(input);
            self
        }
        /// The date a data set was published.
        /// For daily data sets, provide a date with day-level granularity for the desired day.
        /// For monthly data sets except those with prefix disbursed_amount, provide a date with month-level granularity for the desired month (the day value will be ignored).
        /// For data sets with prefix disbursed_amount, provide a date with day-level granularity for the desired day. For these data sets we will look backwards in time over the range of 31 days until the first data set is found (the latest one).
        pub fn data_set_publication_date(mut self, input: smithy_types::Instant) -> Self {
            self.inner = self.inner.data_set_publication_date(input);
            self
        }
        pub fn set_data_set_publication_date(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.inner = self.inner.set_data_set_publication_date(input);
            self
        }
        /// The Amazon Resource Name (ARN) of the Role with an attached permissions policy to interact with the provided
        /// AWS services.
        pub fn role_name_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_name_arn(input);
            self
        }
        pub fn set_role_name_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_role_name_arn(input);
            self
        }
        /// The name (friendly name, not ARN) of the destination S3 bucket.
        pub fn destination_s3_bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.destination_s3_bucket_name(input);
            self
        }
        pub fn set_destination_s3_bucket_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_destination_s3_bucket_name(input);
            self
        }
        /// (Optional) The desired S3 prefix for the published data set, similar to a directory path in standard file systems.
        /// For example, if given the bucket name "mybucket" and the prefix "myprefix/mydatasets", the output file
        /// "outputfile" would be published to "s3://mybucket/myprefix/mydatasets/outputfile".
        /// If the prefix directory structure does not exist, it will be created.
        /// If no prefix is provided, the data set will be published to the S3 bucket root.
        pub fn destination_s3_prefix(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.destination_s3_prefix(input);
            self
        }
        pub fn set_destination_s3_prefix(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_destination_s3_prefix(input);
            self
        }
        /// Amazon Resource Name (ARN) for the SNS Topic that will be notified when the data set has been published or if an
        /// error has occurred.
        pub fn sns_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.sns_topic_arn(input);
            self
        }
        pub fn set_sns_topic_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_sns_topic_arn(input);
            self
        }
        /// (Optional) Key-value pairs which will be returned, unmodified, in the
        /// Amazon SNS notification message and the data set metadata file. These
        /// key-value pairs can be used to correlated responses with tracking
        /// information from other systems.
        pub fn customer_defined_values(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.customer_defined_values(k, v);
            self
        }
        pub fn set_customer_defined_values(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_customer_defined_values(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StartSupportDataExport<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::start_support_data_export_input::Builder,
    }
    impl<C> StartSupportDataExport<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartSupportDataExportOutput,
            smithy_http::result::SdkError<crate::error::StartSupportDataExportError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>
        /// Specifies the data set type to be written to the output csv file. The data set types customer_support_contacts_data and
        /// test_customer_support_contacts_data both result in a csv file containing the following fields: Product Id, Product Code, Customer Guid,
        /// Subscription Guid, Subscription Start Date, Organization, AWS Account Id, Given Name, Surname, Telephone Number, Email, Title,
        /// Country Code, ZIP Code, Operation Type, and Operation Time.
        /// </p>
        /// <p>
        /// <ul>
        /// <li><i>customer_support_contacts_data</i> Customer support contact data. The data set will contain all changes (Creates, Updates, and Deletes) to customer support contact data from the date specified in the from_date parameter.</li>
        /// <li><i>test_customer_support_contacts_data</i> An example data set containing static test data in the same format as customer_support_contacts_data</li>
        /// </ul>
        /// </p>
        pub fn data_set_type(mut self, input: crate::model::SupportDataSetType) -> Self {
            self.inner = self.inner.data_set_type(input);
            self
        }
        pub fn set_data_set_type(
            mut self,
            input: std::option::Option<crate::model::SupportDataSetType>,
        ) -> Self {
            self.inner = self.inner.set_data_set_type(input);
            self
        }
        /// The start date from which to retrieve the data set in UTC.  This parameter only affects the customer_support_contacts_data data set type.
        pub fn from_date(mut self, input: smithy_types::Instant) -> Self {
            self.inner = self.inner.from_date(input);
            self
        }
        pub fn set_from_date(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.inner = self.inner.set_from_date(input);
            self
        }
        /// The Amazon Resource Name (ARN) of the Role with an attached permissions policy to interact with the provided
        /// AWS services.
        pub fn role_name_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_name_arn(input);
            self
        }
        pub fn set_role_name_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_role_name_arn(input);
            self
        }
        /// The name (friendly name, not ARN) of the destination S3 bucket.
        pub fn destination_s3_bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.destination_s3_bucket_name(input);
            self
        }
        pub fn set_destination_s3_bucket_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_destination_s3_bucket_name(input);
            self
        }
        /// (Optional) The desired S3 prefix for the published data set, similar to a directory path in standard file systems.
        /// For example, if given the bucket name "mybucket" and the prefix "myprefix/mydatasets", the output file
        /// "outputfile" would be published to "s3://mybucket/myprefix/mydatasets/outputfile".
        /// If the prefix directory structure does not exist, it will be created.
        /// If no prefix is provided, the data set will be published to the S3 bucket root.
        pub fn destination_s3_prefix(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.destination_s3_prefix(input);
            self
        }
        pub fn set_destination_s3_prefix(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_destination_s3_prefix(input);
            self
        }
        /// Amazon Resource Name (ARN) for the SNS Topic that will be notified when the data set has been published or if an
        /// error has occurred.
        pub fn sns_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.sns_topic_arn(input);
            self
        }
        pub fn set_sns_topic_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_sns_topic_arn(input);
            self
        }
        /// (Optional) Key-value pairs which will be returned, unmodified, in the
        /// Amazon SNS notification message and the data set metadata file.
        pub fn customer_defined_values(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.customer_defined_values(k, v);
            self
        }
        pub fn set_customer_defined_values(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_customer_defined_values(input);
            self
        }
    }
}
