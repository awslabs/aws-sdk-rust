// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_transformer::_update_transformer_output::UpdateTransformerOutputBuilder;

pub use crate::operation::update_transformer::_update_transformer_input::UpdateTransformerInputBuilder;

impl crate::operation::update_transformer::builders::UpdateTransformerInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_transformer::UpdateTransformerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_transformer::UpdateTransformerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_transformer();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateTransformer`.
///
/// <p>Updates the specified parameters for a transformer. A transformer describes how to process the incoming EDI documents and extract the necessary information to the output file.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateTransformerFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_transformer::builders::UpdateTransformerInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_transformer::UpdateTransformerOutput,
        crate::operation::update_transformer::UpdateTransformerError,
    > for UpdateTransformerFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_transformer::UpdateTransformerOutput,
            crate::operation::update_transformer::UpdateTransformerError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateTransformerFluentBuilder {
    /// Creates a new `UpdateTransformer`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateTransformer as a reference.
    pub fn as_input(&self) -> &crate::operation::update_transformer::builders::UpdateTransformerInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_transformer::UpdateTransformerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_transformer::UpdateTransformerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_transformer::UpdateTransformer::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_transformer::UpdateTransformer::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_transformer::UpdateTransformerOutput,
        crate::operation::update_transformer::UpdateTransformerError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies the system-assigned unique identifier for the transformer.</p>
    pub fn transformer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.transformer_id(input.into());
        self
    }
    /// <p>Specifies the system-assigned unique identifier for the transformer.</p>
    pub fn set_transformer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_transformer_id(input);
        self
    }
    /// <p>Specifies the system-assigned unique identifier for the transformer.</p>
    pub fn get_transformer_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_transformer_id()
    }
    /// <p>Specify a new name for the transformer, if you want to update it.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>Specify a new name for the transformer, if you want to update it.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>Specify a new name for the transformer, if you want to update it.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>Specifies that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p>
    pub fn file_format(mut self, input: crate::types::FileFormat) -> Self {
        self.inner = self.inner.file_format(input);
        self
    }
    /// <p>Specifies that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p>
    pub fn set_file_format(mut self, input: ::std::option::Option<crate::types::FileFormat>) -> Self {
        self.inner = self.inner.set_file_format(input);
        self
    }
    /// <p>Specifies that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p>
    pub fn get_file_format(&self) -> &::std::option::Option<crate::types::FileFormat> {
        self.inner.get_file_format()
    }
    /// <p>Specifies the name of the mapping template for the transformer. This template is used to convert the input document into the correct set of objects.</p>
    pub fn mapping_template(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.mapping_template(input.into());
        self
    }
    /// <p>Specifies the name of the mapping template for the transformer. This template is used to convert the input document into the correct set of objects.</p>
    pub fn set_mapping_template(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_mapping_template(input);
        self
    }
    /// <p>Specifies the name of the mapping template for the transformer. This template is used to convert the input document into the correct set of objects.</p>
    pub fn get_mapping_template(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_mapping_template()
    }
    /// <p>Specifies the transformer's status. You can update the state of the transformer, from <code>active</code> to <code>inactive</code>, or <code>inactive</code> to <code>active</code>.</p>
    pub fn status(mut self, input: crate::types::TransformerStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>Specifies the transformer's status. You can update the state of the transformer, from <code>active</code> to <code>inactive</code>, or <code>inactive</code> to <code>active</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TransformerStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>Specifies the transformer's status. You can update the state of the transformer, from <code>active</code> to <code>inactive</code>, or <code>inactive</code> to <code>active</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TransformerStatus> {
        self.inner.get_status()
    }
    /// <p>Specifies the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p>
    pub fn edi_type(mut self, input: crate::types::EdiType) -> Self {
        self.inner = self.inner.edi_type(input);
        self
    }
    /// <p>Specifies the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p>
    pub fn set_edi_type(mut self, input: ::std::option::Option<crate::types::EdiType>) -> Self {
        self.inner = self.inner.set_edi_type(input);
        self
    }
    /// <p>Specifies the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p>
    pub fn get_edi_type(&self) -> &::std::option::Option<crate::types::EdiType> {
        self.inner.get_edi_type()
    }
    /// <p>Specifies a sample EDI document that is used by a transformer as a guide for processing the EDI data.</p>
    pub fn sample_document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.sample_document(input.into());
        self
    }
    /// <p>Specifies a sample EDI document that is used by a transformer as a guide for processing the EDI data.</p>
    pub fn set_sample_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_sample_document(input);
        self
    }
    /// <p>Specifies a sample EDI document that is used by a transformer as a guide for processing the EDI data.</p>
    pub fn get_sample_document(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_sample_document()
    }
}
