// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Result structure used in response to request to delete a project. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteProjectOutput {
    /// <p> Resources which were deleted. </p>
    #[doc(hidden)]
    pub deleted_resources: std::option::Option<std::vec::Vec<crate::types::Resource>>,
    /// <p> Resources which were not deleted, due to a risk of losing potentially important data or files. </p>
    #[doc(hidden)]
    pub orphaned_resources: std::option::Option<std::vec::Vec<crate::types::Resource>>,
    _request_id: Option<String>,
}
impl DeleteProjectOutput {
    /// <p> Resources which were deleted. </p>
    pub fn deleted_resources(&self) -> std::option::Option<&[crate::types::Resource]> {
        self.deleted_resources.as_deref()
    }
    /// <p> Resources which were not deleted, due to a risk of losing potentially important data or files. </p>
    pub fn orphaned_resources(&self) -> std::option::Option<&[crate::types::Resource]> {
        self.orphaned_resources.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteProjectOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteProjectOutput {
    /// Creates a new builder-style object to manufacture [`DeleteProjectOutput`](crate::operation::delete_project::DeleteProjectOutput).
    pub fn builder() -> crate::operation::delete_project::builders::DeleteProjectOutputBuilder {
        crate::operation::delete_project::builders::DeleteProjectOutputBuilder::default()
    }
}

/// A builder for [`DeleteProjectOutput`](crate::operation::delete_project::DeleteProjectOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteProjectOutputBuilder {
    pub(crate) deleted_resources: std::option::Option<std::vec::Vec<crate::types::Resource>>,
    pub(crate) orphaned_resources: std::option::Option<std::vec::Vec<crate::types::Resource>>,
    _request_id: Option<String>,
}
impl DeleteProjectOutputBuilder {
    /// Appends an item to `deleted_resources`.
    ///
    /// To override the contents of this collection use [`set_deleted_resources`](Self::set_deleted_resources).
    ///
    /// <p> Resources which were deleted. </p>
    pub fn deleted_resources(mut self, input: crate::types::Resource) -> Self {
        let mut v = self.deleted_resources.unwrap_or_default();
        v.push(input);
        self.deleted_resources = Some(v);
        self
    }
    /// <p> Resources which were deleted. </p>
    pub fn set_deleted_resources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Resource>>,
    ) -> Self {
        self.deleted_resources = input;
        self
    }
    /// Appends an item to `orphaned_resources`.
    ///
    /// To override the contents of this collection use [`set_orphaned_resources`](Self::set_orphaned_resources).
    ///
    /// <p> Resources which were not deleted, due to a risk of losing potentially important data or files. </p>
    pub fn orphaned_resources(mut self, input: crate::types::Resource) -> Self {
        let mut v = self.orphaned_resources.unwrap_or_default();
        v.push(input);
        self.orphaned_resources = Some(v);
        self
    }
    /// <p> Resources which were not deleted, due to a risk of losing potentially important data or files. </p>
    pub fn set_orphaned_resources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Resource>>,
    ) -> Self {
        self.orphaned_resources = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteProjectOutput`](crate::operation::delete_project::DeleteProjectOutput).
    pub fn build(self) -> crate::operation::delete_project::DeleteProjectOutput {
        crate::operation::delete_project::DeleteProjectOutput {
            deleted_resources: self.deleted_resources,
            orphaned_resources: self.orphaned_resources,
            _request_id: self._request_id,
        }
    }
}
