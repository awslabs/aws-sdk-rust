// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Request structure used to request generation of custom SDK and tool packages required to integrate mobile web or app clients with backed AWS resources. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportBundleInput {
    /// <p> Unique bundle identifier. </p>
    pub bundle_id: ::std::option::Option<::std::string::String>,
    /// <p> Unique project identifier. </p>
    pub project_id: ::std::option::Option<::std::string::String>,
    /// <p> Developer desktop or target application platform. </p>
    pub platform: ::std::option::Option<crate::types::Platform>,
}
impl ExportBundleInput {
    /// <p> Unique bundle identifier. </p>
    pub fn bundle_id(&self) -> ::std::option::Option<&str> {
        self.bundle_id.as_deref()
    }
    /// <p> Unique project identifier. </p>
    pub fn project_id(&self) -> ::std::option::Option<&str> {
        self.project_id.as_deref()
    }
    /// <p> Developer desktop or target application platform. </p>
    pub fn platform(&self) -> ::std::option::Option<&crate::types::Platform> {
        self.platform.as_ref()
    }
}
impl ExportBundleInput {
    /// Creates a new builder-style object to manufacture [`ExportBundleInput`](crate::operation::export_bundle::ExportBundleInput).
    pub fn builder() -> crate::operation::export_bundle::builders::ExportBundleInputBuilder {
        crate::operation::export_bundle::builders::ExportBundleInputBuilder::default()
    }
}

/// A builder for [`ExportBundleInput`](crate::operation::export_bundle::ExportBundleInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExportBundleInputBuilder {
    pub(crate) bundle_id: ::std::option::Option<::std::string::String>,
    pub(crate) project_id: ::std::option::Option<::std::string::String>,
    pub(crate) platform: ::std::option::Option<crate::types::Platform>,
}
impl ExportBundleInputBuilder {
    /// <p> Unique bundle identifier. </p>
    /// This field is required.
    pub fn bundle_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bundle_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Unique bundle identifier. </p>
    pub fn set_bundle_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bundle_id = input;
        self
    }
    /// <p> Unique bundle identifier. </p>
    pub fn get_bundle_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bundle_id
    }
    /// <p> Unique project identifier. </p>
    pub fn project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Unique project identifier. </p>
    pub fn set_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_id = input;
        self
    }
    /// <p> Unique project identifier. </p>
    pub fn get_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_id
    }
    /// <p> Developer desktop or target application platform. </p>
    pub fn platform(mut self, input: crate::types::Platform) -> Self {
        self.platform = ::std::option::Option::Some(input);
        self
    }
    /// <p> Developer desktop or target application platform. </p>
    pub fn set_platform(mut self, input: ::std::option::Option<crate::types::Platform>) -> Self {
        self.platform = input;
        self
    }
    /// <p> Developer desktop or target application platform. </p>
    pub fn get_platform(&self) -> &::std::option::Option<crate::types::Platform> {
        &self.platform
    }
    /// Consumes the builder and constructs a [`ExportBundleInput`](crate::operation::export_bundle::ExportBundleInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::export_bundle::ExportBundleInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::export_bundle::ExportBundleInput {
            bundle_id: self.bundle_id,
            project_id: self.project_id,
            platform: self.platform,
        })
    }
}
