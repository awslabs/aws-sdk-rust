// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Request structure used in requests to export project configuration details. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportProjectInput {
    /// <p> Unique project identifier. </p>
    pub project_id: ::std::option::Option<::std::string::String>,
}
impl ExportProjectInput {
    /// <p> Unique project identifier. </p>
    pub fn project_id(&self) -> ::std::option::Option<&str> {
        self.project_id.as_deref()
    }
}
impl ExportProjectInput {
    /// Creates a new builder-style object to manufacture [`ExportProjectInput`](crate::operation::export_project::ExportProjectInput).
    pub fn builder() -> crate::operation::export_project::builders::ExportProjectInputBuilder {
        crate::operation::export_project::builders::ExportProjectInputBuilder::default()
    }
}

/// A builder for [`ExportProjectInput`](crate::operation::export_project::ExportProjectInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExportProjectInputBuilder {
    pub(crate) project_id: ::std::option::Option<::std::string::String>,
}
impl ExportProjectInputBuilder {
    /// <p> Unique project identifier. </p>
    /// This field is required.
    pub fn project_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Unique project identifier. </p>
    pub fn set_project_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_id = input;
        self
    }
    /// <p> Unique project identifier. </p>
    pub fn get_project_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_id
    }
    /// Consumes the builder and constructs a [`ExportProjectInput`](crate::operation::export_project::ExportProjectInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::export_project::ExportProjectInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::export_project::ExportProjectInput { project_id: self.project_id })
    }
}
