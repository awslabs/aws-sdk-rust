// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The details of the bundle. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BundleDetails {
    /// <p> Unique bundle identifier. </p>
    pub bundle_id: ::std::option::Option<::std::string::String>,
    /// <p> Title of the download bundle. </p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p> Version of the download bundle. </p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p> Description of the download bundle. </p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p> Icon for the download bundle. </p>
    pub icon_url: ::std::option::Option<::std::string::String>,
    /// <p> Developer desktop or mobile app or website platforms. </p>
    pub available_platforms: ::std::option::Option<::std::vec::Vec<crate::types::Platform>>,
}
impl BundleDetails {
    /// <p> Unique bundle identifier. </p>
    pub fn bundle_id(&self) -> ::std::option::Option<&str> {
        self.bundle_id.as_deref()
    }
    /// <p> Title of the download bundle. </p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p> Version of the download bundle. </p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p> Description of the download bundle. </p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> Icon for the download bundle. </p>
    pub fn icon_url(&self) -> ::std::option::Option<&str> {
        self.icon_url.as_deref()
    }
    /// <p> Developer desktop or mobile app or website platforms. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.available_platforms.is_none()`.
    pub fn available_platforms(&self) -> &[crate::types::Platform] {
        self.available_platforms.as_deref().unwrap_or_default()
    }
}
impl BundleDetails {
    /// Creates a new builder-style object to manufacture [`BundleDetails`](crate::types::BundleDetails).
    pub fn builder() -> crate::types::builders::BundleDetailsBuilder {
        crate::types::builders::BundleDetailsBuilder::default()
    }
}

/// A builder for [`BundleDetails`](crate::types::BundleDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BundleDetailsBuilder {
    pub(crate) bundle_id: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) icon_url: ::std::option::Option<::std::string::String>,
    pub(crate) available_platforms: ::std::option::Option<::std::vec::Vec<crate::types::Platform>>,
}
impl BundleDetailsBuilder {
    /// <p> Unique bundle identifier. </p>
    pub fn bundle_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bundle_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Unique bundle identifier. </p>
    pub fn set_bundle_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bundle_id = input;
        self
    }
    /// <p> Unique bundle identifier. </p>
    pub fn get_bundle_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bundle_id
    }
    /// <p> Title of the download bundle. </p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Title of the download bundle. </p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p> Title of the download bundle. </p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p> Version of the download bundle. </p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Version of the download bundle. </p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p> Version of the download bundle. </p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p> Description of the download bundle. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Description of the download bundle. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> Description of the download bundle. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p> Icon for the download bundle. </p>
    pub fn icon_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.icon_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Icon for the download bundle. </p>
    pub fn set_icon_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.icon_url = input;
        self
    }
    /// <p> Icon for the download bundle. </p>
    pub fn get_icon_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.icon_url
    }
    /// Appends an item to `available_platforms`.
    ///
    /// To override the contents of this collection use [`set_available_platforms`](Self::set_available_platforms).
    ///
    /// <p> Developer desktop or mobile app or website platforms. </p>
    pub fn available_platforms(mut self, input: crate::types::Platform) -> Self {
        let mut v = self.available_platforms.unwrap_or_default();
        v.push(input);
        self.available_platforms = ::std::option::Option::Some(v);
        self
    }
    /// <p> Developer desktop or mobile app or website platforms. </p>
    pub fn set_available_platforms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Platform>>) -> Self {
        self.available_platforms = input;
        self
    }
    /// <p> Developer desktop or mobile app or website platforms. </p>
    pub fn get_available_platforms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Platform>> {
        &self.available_platforms
    }
    /// Consumes the builder and constructs a [`BundleDetails`](crate::types::BundleDetails).
    pub fn build(self) -> crate::types::BundleDetails {
        crate::types::BundleDetails {
            bundle_id: self.bundle_id,
            title: self.title,
            version: self.version,
            description: self.description,
            icon_url: self.icon_url,
            available_platforms: self.available_platforms,
        }
    }
}
