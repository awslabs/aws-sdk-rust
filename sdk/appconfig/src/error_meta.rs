// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The input fails to satisfy the constraints specified by an Amazon Web Services service.</p>
    BadRequestException(crate::types::error::BadRequestException),
    /// <p>The request could not be processed because of conflict in the current state of the resource.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>There was an internal failure in the AppConfig service.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The configuration size is too large.</p>
    PayloadTooLargeException(crate::types::error::PayloadTooLargeException),
    /// <p>The requested resource could not be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The number of hosted configuration versions exceeds the limit for the AppConfig hosted configuration store. Delete one or more versions and try again.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::PayloadTooLargeException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_application::CreateApplicationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_application::CreateApplicationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_application::CreateApplicationError> for Error {
    fn from(err: crate::operation::create_application::CreateApplicationError) -> Self {
        match err {
            crate::operation::create_application::CreateApplicationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_application::CreateApplicationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_application::CreateApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_configuration_profile::CreateConfigurationProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_configuration_profile::CreateConfigurationProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_configuration_profile::CreateConfigurationProfileError>
    for Error
{
    fn from(
        err: crate::operation::create_configuration_profile::CreateConfigurationProfileError,
    ) -> Self {
        match err {
            crate::operation::create_configuration_profile::CreateConfigurationProfileError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_configuration_profile::CreateConfigurationProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_configuration_profile::CreateConfigurationProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_configuration_profile::CreateConfigurationProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_deployment_strategy::CreateDeploymentStrategyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_deployment_strategy::CreateDeploymentStrategyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_deployment_strategy::CreateDeploymentStrategyError> for Error {
    fn from(
        err: crate::operation::create_deployment_strategy::CreateDeploymentStrategyError,
    ) -> Self {
        match err {
            crate::operation::create_deployment_strategy::CreateDeploymentStrategyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_deployment_strategy::CreateDeploymentStrategyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_deployment_strategy::CreateDeploymentStrategyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_environment::CreateEnvironmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_environment::CreateEnvironmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_environment::CreateEnvironmentError> for Error {
    fn from(err: crate::operation::create_environment::CreateEnvironmentError) -> Self {
        match err {
            crate::operation::create_environment::CreateEnvironmentError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_environment::CreateEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_environment::CreateEnvironmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_environment::CreateEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_extension::CreateExtensionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_extension::CreateExtensionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_extension::CreateExtensionError> for Error {
    fn from(err: crate::operation::create_extension::CreateExtensionError) -> Self {
        match err {
            crate::operation::create_extension::CreateExtensionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_extension::CreateExtensionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_extension::CreateExtensionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_extension::CreateExtensionError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_extension::CreateExtensionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_extension_association::CreateExtensionAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_extension_association::CreateExtensionAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_extension_association::CreateExtensionAssociationError>
    for Error
{
    fn from(
        err: crate::operation::create_extension_association::CreateExtensionAssociationError,
    ) -> Self {
        match err {
            crate::operation::create_extension_association::CreateExtensionAssociationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_extension_association::CreateExtensionAssociationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_extension_association::CreateExtensionAssociationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_extension_association::CreateExtensionAssociationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_extension_association::CreateExtensionAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError> for Error {
    fn from(err: crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError) -> Self {
        match err {
            crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::PayloadTooLargeException(inner) => Error::PayloadTooLargeException(inner),
            crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_application::DeleteApplicationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_application::DeleteApplicationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_application::DeleteApplicationError> for Error {
    fn from(err: crate::operation::delete_application::DeleteApplicationError) -> Self {
        match err {
            crate::operation::delete_application::DeleteApplicationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_application::DeleteApplicationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_application::DeleteApplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_application::DeleteApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_configuration_profile::DeleteConfigurationProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_configuration_profile::DeleteConfigurationProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_configuration_profile::DeleteConfigurationProfileError>
    for Error
{
    fn from(
        err: crate::operation::delete_configuration_profile::DeleteConfigurationProfileError,
    ) -> Self {
        match err {
            crate::operation::delete_configuration_profile::DeleteConfigurationProfileError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_configuration_profile::DeleteConfigurationProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_configuration_profile::DeleteConfigurationProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_configuration_profile::DeleteConfigurationProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_configuration_profile::DeleteConfigurationProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_deployment_strategy::DeleteDeploymentStrategyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_deployment_strategy::DeleteDeploymentStrategyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_deployment_strategy::DeleteDeploymentStrategyError> for Error {
    fn from(
        err: crate::operation::delete_deployment_strategy::DeleteDeploymentStrategyError,
    ) -> Self {
        match err {
            crate::operation::delete_deployment_strategy::DeleteDeploymentStrategyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_deployment_strategy::DeleteDeploymentStrategyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_deployment_strategy::DeleteDeploymentStrategyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_deployment_strategy::DeleteDeploymentStrategyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_environment::DeleteEnvironmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_environment::DeleteEnvironmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_environment::DeleteEnvironmentError> for Error {
    fn from(err: crate::operation::delete_environment::DeleteEnvironmentError) -> Self {
        match err {
            crate::operation::delete_environment::DeleteEnvironmentError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_extension::DeleteExtensionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_extension::DeleteExtensionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_extension::DeleteExtensionError> for Error {
    fn from(err: crate::operation::delete_extension::DeleteExtensionError) -> Self {
        match err {
            crate::operation::delete_extension::DeleteExtensionError::BadRequestException(
                inner,
            ) => Error::BadRequestException(inner),
            crate::operation::delete_extension::DeleteExtensionError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_extension::DeleteExtensionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_extension::DeleteExtensionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_extension_association::DeleteExtensionAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_extension_association::DeleteExtensionAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_extension_association::DeleteExtensionAssociationError>
    for Error
{
    fn from(
        err: crate::operation::delete_extension_association::DeleteExtensionAssociationError,
    ) -> Self {
        match err {
            crate::operation::delete_extension_association::DeleteExtensionAssociationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_extension_association::DeleteExtensionAssociationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_extension_association::DeleteExtensionAssociationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_extension_association::DeleteExtensionAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_hosted_configuration_version::DeleteHostedConfigurationVersionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_hosted_configuration_version::DeleteHostedConfigurationVersionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_hosted_configuration_version::DeleteHostedConfigurationVersionError> for Error {
    fn from(err: crate::operation::delete_hosted_configuration_version::DeleteHostedConfigurationVersionError) -> Self {
        match err {
            crate::operation::delete_hosted_configuration_version::DeleteHostedConfigurationVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_hosted_configuration_version::DeleteHostedConfigurationVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_hosted_configuration_version::DeleteHostedConfigurationVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_hosted_configuration_version::DeleteHostedConfigurationVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_application::GetApplicationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_application::GetApplicationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_application::GetApplicationError> for Error {
    fn from(err: crate::operation::get_application::GetApplicationError) -> Self {
        match err {
            crate::operation::get_application::GetApplicationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_application::GetApplicationError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_application::GetApplicationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_application::GetApplicationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_configuration::GetConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_configuration::GetConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_configuration::GetConfigurationError> for Error {
    fn from(err: crate::operation::get_configuration::GetConfigurationError) -> Self {
        match err {
            crate::operation::get_configuration::GetConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_configuration::GetConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_configuration::GetConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_configuration::GetConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_configuration_profile::GetConfigurationProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_configuration_profile::GetConfigurationProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_configuration_profile::GetConfigurationProfileError> for Error {
    fn from(
        err: crate::operation::get_configuration_profile::GetConfigurationProfileError,
    ) -> Self {
        match err {
            crate::operation::get_configuration_profile::GetConfigurationProfileError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_configuration_profile::GetConfigurationProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_configuration_profile::GetConfigurationProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_configuration_profile::GetConfigurationProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_deployment::GetDeploymentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_deployment::GetDeploymentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_deployment::GetDeploymentError> for Error {
    fn from(err: crate::operation::get_deployment::GetDeploymentError) -> Self {
        match err {
            crate::operation::get_deployment::GetDeploymentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_deployment::GetDeploymentError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_deployment::GetDeploymentError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_deployment::GetDeploymentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_deployment_strategy::GetDeploymentStrategyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_deployment_strategy::GetDeploymentStrategyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_deployment_strategy::GetDeploymentStrategyError> for Error {
    fn from(err: crate::operation::get_deployment_strategy::GetDeploymentStrategyError) -> Self {
        match err {
            crate::operation::get_deployment_strategy::GetDeploymentStrategyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_deployment_strategy::GetDeploymentStrategyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_deployment_strategy::GetDeploymentStrategyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_deployment_strategy::GetDeploymentStrategyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_environment::GetEnvironmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_environment::GetEnvironmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_environment::GetEnvironmentError> for Error {
    fn from(err: crate::operation::get_environment::GetEnvironmentError) -> Self {
        match err {
            crate::operation::get_environment::GetEnvironmentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_environment::GetEnvironmentError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_environment::GetEnvironmentError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_environment::GetEnvironmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_extension::GetExtensionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_extension::GetExtensionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_extension::GetExtensionError> for Error {
    fn from(err: crate::operation::get_extension::GetExtensionError) -> Self {
        match err {
            crate::operation::get_extension::GetExtensionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_extension::GetExtensionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_extension::GetExtensionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_extension::GetExtensionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_extension_association::GetExtensionAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_extension_association::GetExtensionAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_extension_association::GetExtensionAssociationError> for Error {
    fn from(
        err: crate::operation::get_extension_association::GetExtensionAssociationError,
    ) -> Self {
        match err {
            crate::operation::get_extension_association::GetExtensionAssociationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_extension_association::GetExtensionAssociationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_extension_association::GetExtensionAssociationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_extension_association::GetExtensionAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_hosted_configuration_version::GetHostedConfigurationVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_hosted_configuration_version::GetHostedConfigurationVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_hosted_configuration_version::GetHostedConfigurationVersionError>
    for Error
{
    fn from(
        err: crate::operation::get_hosted_configuration_version::GetHostedConfigurationVersionError,
    ) -> Self {
        match err {
            crate::operation::get_hosted_configuration_version::GetHostedConfigurationVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_hosted_configuration_version::GetHostedConfigurationVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_hosted_configuration_version::GetHostedConfigurationVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_hosted_configuration_version::GetHostedConfigurationVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_applications::ListApplicationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_applications::ListApplicationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_applications::ListApplicationsError> for Error {
    fn from(err: crate::operation::list_applications::ListApplicationsError) -> Self {
        match err {
            crate::operation::list_applications::ListApplicationsError::BadRequestException(
                inner,
            ) => Error::BadRequestException(inner),
            crate::operation::list_applications::ListApplicationsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_applications::ListApplicationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_configuration_profiles::ListConfigurationProfilesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_configuration_profiles::ListConfigurationProfilesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_configuration_profiles::ListConfigurationProfilesError> for Error {
    fn from(
        err: crate::operation::list_configuration_profiles::ListConfigurationProfilesError,
    ) -> Self {
        match err {
            crate::operation::list_configuration_profiles::ListConfigurationProfilesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_configuration_profiles::ListConfigurationProfilesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_configuration_profiles::ListConfigurationProfilesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_configuration_profiles::ListConfigurationProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_deployments::ListDeploymentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_deployments::ListDeploymentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_deployments::ListDeploymentsError> for Error {
    fn from(err: crate::operation::list_deployments::ListDeploymentsError) -> Self {
        match err {
            crate::operation::list_deployments::ListDeploymentsError::BadRequestException(
                inner,
            ) => Error::BadRequestException(inner),
            crate::operation::list_deployments::ListDeploymentsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_deployments::ListDeploymentsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_deployments::ListDeploymentsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_deployment_strategies::ListDeploymentStrategiesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_deployment_strategies::ListDeploymentStrategiesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_deployment_strategies::ListDeploymentStrategiesError> for Error {
    fn from(
        err: crate::operation::list_deployment_strategies::ListDeploymentStrategiesError,
    ) -> Self {
        match err {
            crate::operation::list_deployment_strategies::ListDeploymentStrategiesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_deployment_strategies::ListDeploymentStrategiesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_deployment_strategies::ListDeploymentStrategiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_environments::ListEnvironmentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_environments::ListEnvironmentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_environments::ListEnvironmentsError> for Error {
    fn from(err: crate::operation::list_environments::ListEnvironmentsError) -> Self {
        match err {
            crate::operation::list_environments::ListEnvironmentsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_environments::ListEnvironmentsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_environments::ListEnvironmentsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_environments::ListEnvironmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_extension_associations::ListExtensionAssociationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_extension_associations::ListExtensionAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_extension_associations::ListExtensionAssociationsError> for Error {
    fn from(
        err: crate::operation::list_extension_associations::ListExtensionAssociationsError,
    ) -> Self {
        match err {
            crate::operation::list_extension_associations::ListExtensionAssociationsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_extension_associations::ListExtensionAssociationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_extension_associations::ListExtensionAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_extensions::ListExtensionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_extensions::ListExtensionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_extensions::ListExtensionsError> for Error {
    fn from(err: crate::operation::list_extensions::ListExtensionsError) -> Self {
        match err {
            crate::operation::list_extensions::ListExtensionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::list_extensions::ListExtensionsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_extensions::ListExtensionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_hosted_configuration_versions::ListHostedConfigurationVersionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_hosted_configuration_versions::ListHostedConfigurationVersionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<crate::operation::list_hosted_configuration_versions::ListHostedConfigurationVersionsError>
    for Error
{
    fn from(
        err: crate::operation::list_hosted_configuration_versions::ListHostedConfigurationVersionsError,
    ) -> Self {
        match err {
            crate::operation::list_hosted_configuration_versions::ListHostedConfigurationVersionsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_hosted_configuration_versions::ListHostedConfigurationVersionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_hosted_configuration_versions::ListHostedConfigurationVersionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_hosted_configuration_versions::ListHostedConfigurationVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_deployment::StartDeploymentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_deployment::StartDeploymentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_deployment::StartDeploymentError> for Error {
    fn from(err: crate::operation::start_deployment::StartDeploymentError) -> Self {
        match err {
            crate::operation::start_deployment::StartDeploymentError::BadRequestException(
                inner,
            ) => Error::BadRequestException(inner),
            crate::operation::start_deployment::StartDeploymentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::start_deployment::StartDeploymentError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::start_deployment::StartDeploymentError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::start_deployment::StartDeploymentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_deployment::StopDeploymentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_deployment::StopDeploymentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_deployment::StopDeploymentError> for Error {
    fn from(err: crate::operation::stop_deployment::StopDeploymentError) -> Self {
        match err {
            crate::operation::stop_deployment::StopDeploymentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::stop_deployment::StopDeploymentError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::stop_deployment::StopDeploymentError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::stop_deployment::StopDeploymentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_application::UpdateApplicationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_application::UpdateApplicationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_application::UpdateApplicationError> for Error {
    fn from(err: crate::operation::update_application::UpdateApplicationError) -> Self {
        match err {
            crate::operation::update_application::UpdateApplicationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_application::UpdateApplicationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_application::UpdateApplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_application::UpdateApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_configuration_profile::UpdateConfigurationProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_configuration_profile::UpdateConfigurationProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_configuration_profile::UpdateConfigurationProfileError>
    for Error
{
    fn from(
        err: crate::operation::update_configuration_profile::UpdateConfigurationProfileError,
    ) -> Self {
        match err {
            crate::operation::update_configuration_profile::UpdateConfigurationProfileError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_configuration_profile::UpdateConfigurationProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_configuration_profile::UpdateConfigurationProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_configuration_profile::UpdateConfigurationProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_deployment_strategy::UpdateDeploymentStrategyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_deployment_strategy::UpdateDeploymentStrategyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_deployment_strategy::UpdateDeploymentStrategyError> for Error {
    fn from(
        err: crate::operation::update_deployment_strategy::UpdateDeploymentStrategyError,
    ) -> Self {
        match err {
            crate::operation::update_deployment_strategy::UpdateDeploymentStrategyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_deployment_strategy::UpdateDeploymentStrategyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_deployment_strategy::UpdateDeploymentStrategyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_deployment_strategy::UpdateDeploymentStrategyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_environment::UpdateEnvironmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_environment::UpdateEnvironmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_environment::UpdateEnvironmentError> for Error {
    fn from(err: crate::operation::update_environment::UpdateEnvironmentError) -> Self {
        match err {
            crate::operation::update_environment::UpdateEnvironmentError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_extension::UpdateExtensionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_extension::UpdateExtensionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_extension::UpdateExtensionError> for Error {
    fn from(err: crate::operation::update_extension::UpdateExtensionError) -> Self {
        match err {
            crate::operation::update_extension::UpdateExtensionError::BadRequestException(
                inner,
            ) => Error::BadRequestException(inner),
            crate::operation::update_extension::UpdateExtensionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_extension::UpdateExtensionError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::update_extension::UpdateExtensionError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_extension::UpdateExtensionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_extension_association::UpdateExtensionAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_extension_association::UpdateExtensionAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_extension_association::UpdateExtensionAssociationError>
    for Error
{
    fn from(
        err: crate::operation::update_extension_association::UpdateExtensionAssociationError,
    ) -> Self {
        match err {
            crate::operation::update_extension_association::UpdateExtensionAssociationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_extension_association::UpdateExtensionAssociationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_extension_association::UpdateExtensionAssociationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_extension_association::UpdateExtensionAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::validate_configuration::ValidateConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::validate_configuration::ValidateConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::validate_configuration::ValidateConfigurationError> for Error {
    fn from(err: crate::operation::validate_configuration::ValidateConfigurationError) -> Self {
        match err {
            crate::operation::validate_configuration::ValidateConfigurationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::validate_configuration::ValidateConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::validate_configuration::ValidateConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::validate_configuration::ValidateConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::PayloadTooLargeException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
