// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDeploymentStrategyOutput {
    /// <p>The deployment strategy ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the deployment strategy.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the deployment strategy.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Total amount of time the deployment lasted.</p>
    #[doc(hidden)]
    pub deployment_duration_in_minutes: i32,
    /// <p>The algorithm used to define how percentage grew over time.</p>
    #[doc(hidden)]
    pub growth_type: std::option::Option<crate::types::GrowthType>,
    /// <p>The percentage of targets that received a deployed configuration during each interval.</p>
    #[doc(hidden)]
    pub growth_factor: f32,
    /// <p>The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.</p>
    #[doc(hidden)]
    pub final_bake_time_in_minutes: i32,
    /// <p>Save the deployment strategy to a Systems Manager (SSM) document.</p>
    #[doc(hidden)]
    pub replicate_to: std::option::Option<crate::types::ReplicateTo>,
    _request_id: Option<String>,
}
impl GetDeploymentStrategyOutput {
    /// <p>The deployment strategy ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the deployment strategy.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the deployment strategy.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Total amount of time the deployment lasted.</p>
    pub fn deployment_duration_in_minutes(&self) -> i32 {
        self.deployment_duration_in_minutes
    }
    /// <p>The algorithm used to define how percentage grew over time.</p>
    pub fn growth_type(&self) -> std::option::Option<&crate::types::GrowthType> {
        self.growth_type.as_ref()
    }
    /// <p>The percentage of targets that received a deployed configuration during each interval.</p>
    pub fn growth_factor(&self) -> f32 {
        self.growth_factor
    }
    /// <p>The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.</p>
    pub fn final_bake_time_in_minutes(&self) -> i32 {
        self.final_bake_time_in_minutes
    }
    /// <p>Save the deployment strategy to a Systems Manager (SSM) document.</p>
    pub fn replicate_to(&self) -> std::option::Option<&crate::types::ReplicateTo> {
        self.replicate_to.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetDeploymentStrategyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDeploymentStrategyOutput {
    /// Creates a new builder-style object to manufacture [`GetDeploymentStrategyOutput`](crate::operation::get_deployment_strategy::GetDeploymentStrategyOutput).
    pub fn builder(
    ) -> crate::operation::get_deployment_strategy::builders::GetDeploymentStrategyOutputBuilder
    {
        crate::operation::get_deployment_strategy::builders::GetDeploymentStrategyOutputBuilder::default()
    }
}

/// A builder for [`GetDeploymentStrategyOutput`](crate::operation::get_deployment_strategy::GetDeploymentStrategyOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDeploymentStrategyOutputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) deployment_duration_in_minutes: std::option::Option<i32>,
    pub(crate) growth_type: std::option::Option<crate::types::GrowthType>,
    pub(crate) growth_factor: std::option::Option<f32>,
    pub(crate) final_bake_time_in_minutes: std::option::Option<i32>,
    pub(crate) replicate_to: std::option::Option<crate::types::ReplicateTo>,
    _request_id: Option<String>,
}
impl GetDeploymentStrategyOutputBuilder {
    /// <p>The deployment strategy ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The deployment strategy ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the deployment strategy.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the deployment strategy.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the deployment strategy.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the deployment strategy.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Total amount of time the deployment lasted.</p>
    pub fn deployment_duration_in_minutes(mut self, input: i32) -> Self {
        self.deployment_duration_in_minutes = Some(input);
        self
    }
    /// <p>Total amount of time the deployment lasted.</p>
    pub fn set_deployment_duration_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.deployment_duration_in_minutes = input;
        self
    }
    /// <p>The algorithm used to define how percentage grew over time.</p>
    pub fn growth_type(mut self, input: crate::types::GrowthType) -> Self {
        self.growth_type = Some(input);
        self
    }
    /// <p>The algorithm used to define how percentage grew over time.</p>
    pub fn set_growth_type(mut self, input: std::option::Option<crate::types::GrowthType>) -> Self {
        self.growth_type = input;
        self
    }
    /// <p>The percentage of targets that received a deployed configuration during each interval.</p>
    pub fn growth_factor(mut self, input: f32) -> Self {
        self.growth_factor = Some(input);
        self
    }
    /// <p>The percentage of targets that received a deployed configuration during each interval.</p>
    pub fn set_growth_factor(mut self, input: std::option::Option<f32>) -> Self {
        self.growth_factor = input;
        self
    }
    /// <p>The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.</p>
    pub fn final_bake_time_in_minutes(mut self, input: i32) -> Self {
        self.final_bake_time_in_minutes = Some(input);
        self
    }
    /// <p>The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.</p>
    pub fn set_final_bake_time_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.final_bake_time_in_minutes = input;
        self
    }
    /// <p>Save the deployment strategy to a Systems Manager (SSM) document.</p>
    pub fn replicate_to(mut self, input: crate::types::ReplicateTo) -> Self {
        self.replicate_to = Some(input);
        self
    }
    /// <p>Save the deployment strategy to a Systems Manager (SSM) document.</p>
    pub fn set_replicate_to(
        mut self,
        input: std::option::Option<crate::types::ReplicateTo>,
    ) -> Self {
        self.replicate_to = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDeploymentStrategyOutput`](crate::operation::get_deployment_strategy::GetDeploymentStrategyOutput).
    pub fn build(self) -> crate::operation::get_deployment_strategy::GetDeploymentStrategyOutput {
        crate::operation::get_deployment_strategy::GetDeploymentStrategyOutput {
            id: self.id,
            name: self.name,
            description: self.description,
            deployment_duration_in_minutes: self.deployment_duration_in_minutes.unwrap_or_default(),
            growth_type: self.growth_type,
            growth_factor: self.growth_factor.unwrap_or_default(),
            final_bake_time_in_minutes: self.final_bake_time_in_minutes.unwrap_or_default(),
            replicate_to: self.replicate_to,
            _request_id: self._request_id,
        }
    }
}
