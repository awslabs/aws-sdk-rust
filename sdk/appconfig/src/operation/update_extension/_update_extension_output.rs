// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateExtensionOutput {
    /// <p>The system-generated ID of the extension.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The extension name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The extension version number.</p>
    #[doc(hidden)]
    pub version_number: i32,
    /// <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>Information about the extension.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The actions defined in the extension.</p>
    #[doc(hidden)]
    pub actions: std::option::Option<
        std::collections::HashMap<crate::types::ActionPoint, std::vec::Vec<crate::types::Action>>,
    >,
    /// <p>The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the <code>CreateExtensionAssociation</code> API action. For Lambda extension actions, these parameters are included in the Lambda request object.</p>
    #[doc(hidden)]
    pub parameters: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::Parameter>,
    >,
    _request_id: Option<String>,
}
impl UpdateExtensionOutput {
    /// <p>The system-generated ID of the extension.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The extension name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The extension version number.</p>
    pub fn version_number(&self) -> i32 {
        self.version_number
    }
    /// <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Information about the extension.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The actions defined in the extension.</p>
    pub fn actions(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<crate::types::ActionPoint, std::vec::Vec<crate::types::Action>>,
    > {
        self.actions.as_ref()
    }
    /// <p>The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the <code>CreateExtensionAssociation</code> API action. For Lambda extension actions, these parameters are included in the Lambda request object.</p>
    pub fn parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, crate::types::Parameter>>
    {
        self.parameters.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateExtensionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateExtensionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateExtensionOutput`](crate::operation::update_extension::UpdateExtensionOutput).
    pub fn builder() -> crate::operation::update_extension::builders::UpdateExtensionOutputBuilder {
        crate::operation::update_extension::builders::UpdateExtensionOutputBuilder::default()
    }
}

/// A builder for [`UpdateExtensionOutput`](crate::operation::update_extension::UpdateExtensionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateExtensionOutputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) version_number: std::option::Option<i32>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) actions: std::option::Option<
        std::collections::HashMap<crate::types::ActionPoint, std::vec::Vec<crate::types::Action>>,
    >,
    pub(crate) parameters: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::Parameter>,
    >,
    _request_id: Option<String>,
}
impl UpdateExtensionOutputBuilder {
    /// <p>The system-generated ID of the extension.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The system-generated ID of the extension.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The extension name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The extension name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The extension version number.</p>
    pub fn version_number(mut self, input: i32) -> Self {
        self.version_number = Some(input);
        self
    }
    /// <p>The extension version number.</p>
    pub fn set_version_number(mut self, input: std::option::Option<i32>) -> Self {
        self.version_number = input;
        self
    }
    /// <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Information about the extension.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>Information about the extension.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Adds a key-value pair to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The actions defined in the extension.</p>
    pub fn actions(
        mut self,
        k: crate::types::ActionPoint,
        v: std::vec::Vec<crate::types::Action>,
    ) -> Self {
        let mut hash_map = self.actions.unwrap_or_default();
        hash_map.insert(k, v);
        self.actions = Some(hash_map);
        self
    }
    /// <p>The actions defined in the extension.</p>
    pub fn set_actions(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                crate::types::ActionPoint,
                std::vec::Vec<crate::types::Action>,
            >,
        >,
    ) -> Self {
        self.actions = input;
        self
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the <code>CreateExtensionAssociation</code> API action. For Lambda extension actions, these parameters are included in the Lambda request object.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::Parameter,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.parameters = Some(hash_map);
        self
    }
    /// <p>The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the <code>CreateExtensionAssociation</code> API action. For Lambda extension actions, these parameters are included in the Lambda request object.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::Parameter>,
        >,
    ) -> Self {
        self.parameters = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateExtensionOutput`](crate::operation::update_extension::UpdateExtensionOutput).
    pub fn build(self) -> crate::operation::update_extension::UpdateExtensionOutput {
        crate::operation::update_extension::UpdateExtensionOutput {
            id: self.id,
            name: self.name,
            version_number: self.version_number.unwrap_or_default(),
            arn: self.arn,
            description: self.description,
            actions: self.actions,
            parameters: self.parameters,
            _request_id: self._request_id,
        }
    }
}
