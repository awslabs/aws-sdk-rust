// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartDeploymentOutput {
    /// <p>The ID of the application that was deployed.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The ID of the environment that was deployed.</p>
    #[doc(hidden)]
    pub environment_id: std::option::Option<std::string::String>,
    /// <p>The ID of the deployment strategy that was deployed.</p>
    #[doc(hidden)]
    pub deployment_strategy_id: std::option::Option<std::string::String>,
    /// <p>The ID of the configuration profile that was deployed.</p>
    #[doc(hidden)]
    pub configuration_profile_id: std::option::Option<std::string::String>,
    /// <p>The sequence number of the deployment.</p>
    #[doc(hidden)]
    pub deployment_number: i32,
    /// <p>The name of the configuration.</p>
    #[doc(hidden)]
    pub configuration_name: std::option::Option<std::string::String>,
    /// <p>Information about the source location of the configuration.</p>
    #[doc(hidden)]
    pub configuration_location_uri: std::option::Option<std::string::String>,
    /// <p>The configuration version that was deployed.</p>
    #[doc(hidden)]
    pub configuration_version: std::option::Option<std::string::String>,
    /// <p>The description of the deployment.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Total amount of time the deployment lasted.</p>
    #[doc(hidden)]
    pub deployment_duration_in_minutes: i32,
    /// <p>The algorithm used to define how percentage grew over time.</p>
    #[doc(hidden)]
    pub growth_type: std::option::Option<crate::types::GrowthType>,
    /// <p>The percentage of targets to receive a deployed configuration during each interval.</p>
    #[doc(hidden)]
    pub growth_factor: f32,
    /// <p>The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.</p>
    #[doc(hidden)]
    pub final_bake_time_in_minutes: i32,
    /// <p>The state of the deployment.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::DeploymentState>,
    /// <p>A list containing all events related to a deployment. The most recent events are displayed first.</p>
    #[doc(hidden)]
    pub event_log: std::option::Option<std::vec::Vec<crate::types::DeploymentEvent>>,
    /// <p>The percentage of targets for which the deployment is available.</p>
    #[doc(hidden)]
    pub percentage_complete: f32,
    /// <p>The time the deployment started.</p>
    #[doc(hidden)]
    pub started_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time the deployment completed. </p>
    #[doc(hidden)]
    pub completed_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A list of extensions that were processed as part of the deployment. The extensions that were previously associated to the configuration profile, environment, or the application when <code>StartDeployment</code> was called.</p>
    #[doc(hidden)]
    pub applied_extensions: std::option::Option<std::vec::Vec<crate::types::AppliedExtension>>,
    _request_id: Option<String>,
}
impl StartDeploymentOutput {
    /// <p>The ID of the application that was deployed.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The ID of the environment that was deployed.</p>
    pub fn environment_id(&self) -> std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The ID of the deployment strategy that was deployed.</p>
    pub fn deployment_strategy_id(&self) -> std::option::Option<&str> {
        self.deployment_strategy_id.as_deref()
    }
    /// <p>The ID of the configuration profile that was deployed.</p>
    pub fn configuration_profile_id(&self) -> std::option::Option<&str> {
        self.configuration_profile_id.as_deref()
    }
    /// <p>The sequence number of the deployment.</p>
    pub fn deployment_number(&self) -> i32 {
        self.deployment_number
    }
    /// <p>The name of the configuration.</p>
    pub fn configuration_name(&self) -> std::option::Option<&str> {
        self.configuration_name.as_deref()
    }
    /// <p>Information about the source location of the configuration.</p>
    pub fn configuration_location_uri(&self) -> std::option::Option<&str> {
        self.configuration_location_uri.as_deref()
    }
    /// <p>The configuration version that was deployed.</p>
    pub fn configuration_version(&self) -> std::option::Option<&str> {
        self.configuration_version.as_deref()
    }
    /// <p>The description of the deployment.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Total amount of time the deployment lasted.</p>
    pub fn deployment_duration_in_minutes(&self) -> i32 {
        self.deployment_duration_in_minutes
    }
    /// <p>The algorithm used to define how percentage grew over time.</p>
    pub fn growth_type(&self) -> std::option::Option<&crate::types::GrowthType> {
        self.growth_type.as_ref()
    }
    /// <p>The percentage of targets to receive a deployed configuration during each interval.</p>
    pub fn growth_factor(&self) -> f32 {
        self.growth_factor
    }
    /// <p>The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.</p>
    pub fn final_bake_time_in_minutes(&self) -> i32 {
        self.final_bake_time_in_minutes
    }
    /// <p>The state of the deployment.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::DeploymentState> {
        self.state.as_ref()
    }
    /// <p>A list containing all events related to a deployment. The most recent events are displayed first.</p>
    pub fn event_log(&self) -> std::option::Option<&[crate::types::DeploymentEvent]> {
        self.event_log.as_deref()
    }
    /// <p>The percentage of targets for which the deployment is available.</p>
    pub fn percentage_complete(&self) -> f32 {
        self.percentage_complete
    }
    /// <p>The time the deployment started.</p>
    pub fn started_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The time the deployment completed. </p>
    pub fn completed_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completed_at.as_ref()
    }
    /// <p>A list of extensions that were processed as part of the deployment. The extensions that were previously associated to the configuration profile, environment, or the application when <code>StartDeployment</code> was called.</p>
    pub fn applied_extensions(&self) -> std::option::Option<&[crate::types::AppliedExtension]> {
        self.applied_extensions.as_deref()
    }
}
impl aws_http::request_id::RequestId for StartDeploymentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartDeploymentOutput {
    /// Creates a new builder-style object to manufacture [`StartDeploymentOutput`](crate::operation::start_deployment::StartDeploymentOutput).
    pub fn builder() -> crate::operation::start_deployment::builders::StartDeploymentOutputBuilder {
        crate::operation::start_deployment::builders::StartDeploymentOutputBuilder::default()
    }
}

/// A builder for [`StartDeploymentOutput`](crate::operation::start_deployment::StartDeploymentOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartDeploymentOutputBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) environment_id: std::option::Option<std::string::String>,
    pub(crate) deployment_strategy_id: std::option::Option<std::string::String>,
    pub(crate) configuration_profile_id: std::option::Option<std::string::String>,
    pub(crate) deployment_number: std::option::Option<i32>,
    pub(crate) configuration_name: std::option::Option<std::string::String>,
    pub(crate) configuration_location_uri: std::option::Option<std::string::String>,
    pub(crate) configuration_version: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) deployment_duration_in_minutes: std::option::Option<i32>,
    pub(crate) growth_type: std::option::Option<crate::types::GrowthType>,
    pub(crate) growth_factor: std::option::Option<f32>,
    pub(crate) final_bake_time_in_minutes: std::option::Option<i32>,
    pub(crate) state: std::option::Option<crate::types::DeploymentState>,
    pub(crate) event_log: std::option::Option<std::vec::Vec<crate::types::DeploymentEvent>>,
    pub(crate) percentage_complete: std::option::Option<f32>,
    pub(crate) started_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) completed_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) applied_extensions:
        std::option::Option<std::vec::Vec<crate::types::AppliedExtension>>,
    _request_id: Option<String>,
}
impl StartDeploymentOutputBuilder {
    /// <p>The ID of the application that was deployed.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The ID of the application that was deployed.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The ID of the environment that was deployed.</p>
    pub fn environment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_id = Some(input.into());
        self
    }
    /// <p>The ID of the environment that was deployed.</p>
    pub fn set_environment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The ID of the deployment strategy that was deployed.</p>
    pub fn deployment_strategy_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.deployment_strategy_id = Some(input.into());
        self
    }
    /// <p>The ID of the deployment strategy that was deployed.</p>
    pub fn set_deployment_strategy_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.deployment_strategy_id = input;
        self
    }
    /// <p>The ID of the configuration profile that was deployed.</p>
    pub fn configuration_profile_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.configuration_profile_id = Some(input.into());
        self
    }
    /// <p>The ID of the configuration profile that was deployed.</p>
    pub fn set_configuration_profile_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configuration_profile_id = input;
        self
    }
    /// <p>The sequence number of the deployment.</p>
    pub fn deployment_number(mut self, input: i32) -> Self {
        self.deployment_number = Some(input);
        self
    }
    /// <p>The sequence number of the deployment.</p>
    pub fn set_deployment_number(mut self, input: std::option::Option<i32>) -> Self {
        self.deployment_number = input;
        self
    }
    /// <p>The name of the configuration.</p>
    pub fn configuration_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.configuration_name = Some(input.into());
        self
    }
    /// <p>The name of the configuration.</p>
    pub fn set_configuration_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configuration_name = input;
        self
    }
    /// <p>Information about the source location of the configuration.</p>
    pub fn configuration_location_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.configuration_location_uri = Some(input.into());
        self
    }
    /// <p>Information about the source location of the configuration.</p>
    pub fn set_configuration_location_uri(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configuration_location_uri = input;
        self
    }
    /// <p>The configuration version that was deployed.</p>
    pub fn configuration_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.configuration_version = Some(input.into());
        self
    }
    /// <p>The configuration version that was deployed.</p>
    pub fn set_configuration_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configuration_version = input;
        self
    }
    /// <p>The description of the deployment.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the deployment.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Total amount of time the deployment lasted.</p>
    pub fn deployment_duration_in_minutes(mut self, input: i32) -> Self {
        self.deployment_duration_in_minutes = Some(input);
        self
    }
    /// <p>Total amount of time the deployment lasted.</p>
    pub fn set_deployment_duration_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.deployment_duration_in_minutes = input;
        self
    }
    /// <p>The algorithm used to define how percentage grew over time.</p>
    pub fn growth_type(mut self, input: crate::types::GrowthType) -> Self {
        self.growth_type = Some(input);
        self
    }
    /// <p>The algorithm used to define how percentage grew over time.</p>
    pub fn set_growth_type(mut self, input: std::option::Option<crate::types::GrowthType>) -> Self {
        self.growth_type = input;
        self
    }
    /// <p>The percentage of targets to receive a deployed configuration during each interval.</p>
    pub fn growth_factor(mut self, input: f32) -> Self {
        self.growth_factor = Some(input);
        self
    }
    /// <p>The percentage of targets to receive a deployed configuration during each interval.</p>
    pub fn set_growth_factor(mut self, input: std::option::Option<f32>) -> Self {
        self.growth_factor = input;
        self
    }
    /// <p>The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.</p>
    pub fn final_bake_time_in_minutes(mut self, input: i32) -> Self {
        self.final_bake_time_in_minutes = Some(input);
        self
    }
    /// <p>The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.</p>
    pub fn set_final_bake_time_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.final_bake_time_in_minutes = input;
        self
    }
    /// <p>The state of the deployment.</p>
    pub fn state(mut self, input: crate::types::DeploymentState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the deployment.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::DeploymentState>) -> Self {
        self.state = input;
        self
    }
    /// Appends an item to `event_log`.
    ///
    /// To override the contents of this collection use [`set_event_log`](Self::set_event_log).
    ///
    /// <p>A list containing all events related to a deployment. The most recent events are displayed first.</p>
    pub fn event_log(mut self, input: crate::types::DeploymentEvent) -> Self {
        let mut v = self.event_log.unwrap_or_default();
        v.push(input);
        self.event_log = Some(v);
        self
    }
    /// <p>A list containing all events related to a deployment. The most recent events are displayed first.</p>
    pub fn set_event_log(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DeploymentEvent>>,
    ) -> Self {
        self.event_log = input;
        self
    }
    /// <p>The percentage of targets for which the deployment is available.</p>
    pub fn percentage_complete(mut self, input: f32) -> Self {
        self.percentage_complete = Some(input);
        self
    }
    /// <p>The percentage of targets for which the deployment is available.</p>
    pub fn set_percentage_complete(mut self, input: std::option::Option<f32>) -> Self {
        self.percentage_complete = input;
        self
    }
    /// <p>The time the deployment started.</p>
    pub fn started_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.started_at = Some(input);
        self
    }
    /// <p>The time the deployment started.</p>
    pub fn set_started_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The time the deployment completed. </p>
    pub fn completed_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.completed_at = Some(input);
        self
    }
    /// <p>The time the deployment completed. </p>
    pub fn set_completed_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.completed_at = input;
        self
    }
    /// Appends an item to `applied_extensions`.
    ///
    /// To override the contents of this collection use [`set_applied_extensions`](Self::set_applied_extensions).
    ///
    /// <p>A list of extensions that were processed as part of the deployment. The extensions that were previously associated to the configuration profile, environment, or the application when <code>StartDeployment</code> was called.</p>
    pub fn applied_extensions(mut self, input: crate::types::AppliedExtension) -> Self {
        let mut v = self.applied_extensions.unwrap_or_default();
        v.push(input);
        self.applied_extensions = Some(v);
        self
    }
    /// <p>A list of extensions that were processed as part of the deployment. The extensions that were previously associated to the configuration profile, environment, or the application when <code>StartDeployment</code> was called.</p>
    pub fn set_applied_extensions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AppliedExtension>>,
    ) -> Self {
        self.applied_extensions = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartDeploymentOutput`](crate::operation::start_deployment::StartDeploymentOutput).
    pub fn build(self) -> crate::operation::start_deployment::StartDeploymentOutput {
        crate::operation::start_deployment::StartDeploymentOutput {
            application_id: self.application_id,
            environment_id: self.environment_id,
            deployment_strategy_id: self.deployment_strategy_id,
            configuration_profile_id: self.configuration_profile_id,
            deployment_number: self.deployment_number.unwrap_or_default(),
            configuration_name: self.configuration_name,
            configuration_location_uri: self.configuration_location_uri,
            configuration_version: self.configuration_version,
            description: self.description,
            deployment_duration_in_minutes: self.deployment_duration_in_minutes.unwrap_or_default(),
            growth_type: self.growth_type,
            growth_factor: self.growth_factor.unwrap_or_default(),
            final_bake_time_in_minutes: self.final_bake_time_in_minutes.unwrap_or_default(),
            state: self.state,
            event_log: self.event_log,
            percentage_complete: self.percentage_complete.unwrap_or_default(),
            started_at: self.started_at,
            completed_at: self.completed_at,
            applied_extensions: self.applied_extensions,
            _request_id: self._request_id,
        }
    }
}
