// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateConfigurationProfileInput {
    /// <p>The application ID.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The ID of the configuration profile.</p>
    #[doc(hidden)]
    pub configuration_profile_id: std::option::Option<std::string::String>,
    /// <p>The name of the configuration profile.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description of the configuration profile.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p>
    #[doc(hidden)]
    pub retrieval_role_arn: std::option::Option<std::string::String>,
    /// <p>A list of methods for validating the configuration.</p>
    #[doc(hidden)]
    pub validators: std::option::Option<std::vec::Vec<crate::types::Validator>>,
}
impl UpdateConfigurationProfileInput {
    /// <p>The application ID.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The ID of the configuration profile.</p>
    pub fn configuration_profile_id(&self) -> std::option::Option<&str> {
        self.configuration_profile_id.as_deref()
    }
    /// <p>The name of the configuration profile.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the configuration profile.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p>
    pub fn retrieval_role_arn(&self) -> std::option::Option<&str> {
        self.retrieval_role_arn.as_deref()
    }
    /// <p>A list of methods for validating the configuration.</p>
    pub fn validators(&self) -> std::option::Option<&[crate::types::Validator]> {
        self.validators.as_deref()
    }
}
impl UpdateConfigurationProfileInput {
    /// Creates a new builder-style object to manufacture [`UpdateConfigurationProfileInput`](crate::operation::update_configuration_profile::UpdateConfigurationProfileInput).
    pub fn builder() -> crate::operation::update_configuration_profile::builders::UpdateConfigurationProfileInputBuilder{
        crate::operation::update_configuration_profile::builders::UpdateConfigurationProfileInputBuilder::default()
    }
}

/// A builder for [`UpdateConfigurationProfileInput`](crate::operation::update_configuration_profile::UpdateConfigurationProfileInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateConfigurationProfileInputBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) configuration_profile_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) retrieval_role_arn: std::option::Option<std::string::String>,
    pub(crate) validators: std::option::Option<std::vec::Vec<crate::types::Validator>>,
}
impl UpdateConfigurationProfileInputBuilder {
    /// <p>The application ID.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The application ID.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The ID of the configuration profile.</p>
    pub fn configuration_profile_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.configuration_profile_id = Some(input.into());
        self
    }
    /// <p>The ID of the configuration profile.</p>
    pub fn set_configuration_profile_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configuration_profile_id = input;
        self
    }
    /// <p>The name of the configuration profile.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the configuration profile.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description of the configuration profile.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the configuration profile.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p>
    pub fn retrieval_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.retrieval_role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p>
    pub fn set_retrieval_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.retrieval_role_arn = input;
        self
    }
    /// Appends an item to `validators`.
    ///
    /// To override the contents of this collection use [`set_validators`](Self::set_validators).
    ///
    /// <p>A list of methods for validating the configuration.</p>
    pub fn validators(mut self, input: crate::types::Validator) -> Self {
        let mut v = self.validators.unwrap_or_default();
        v.push(input);
        self.validators = Some(v);
        self
    }
    /// <p>A list of methods for validating the configuration.</p>
    pub fn set_validators(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Validator>>,
    ) -> Self {
        self.validators = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateConfigurationProfileInput`](crate::operation::update_configuration_profile::UpdateConfigurationProfileInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_configuration_profile::UpdateConfigurationProfileInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_configuration_profile::UpdateConfigurationProfileInput {
                application_id: self.application_id,
                configuration_profile_id: self.configuration_profile_id,
                name: self.name,
                description: self.description,
                retrieval_role_arn: self.retrieval_role_arn,
                validators: self.validators,
            },
        )
    }
}
