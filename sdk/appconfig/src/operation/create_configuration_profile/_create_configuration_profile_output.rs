// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateConfigurationProfileOutput {
    /// <p>The application ID.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The configuration profile ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the configuration profile.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The configuration profile description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The URI location of the configuration.</p>
    #[doc(hidden)]
    pub location_uri: std::option::Option<std::string::String>,
    /// <p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p>
    #[doc(hidden)]
    pub retrieval_role_arn: std::option::Option<std::string::String>,
    /// <p>A list of methods for validating the configuration.</p>
    #[doc(hidden)]
    pub validators: std::option::Option<std::vec::Vec<crate::types::Validator>>,
    /// <p>The type of configurations contained in the profile. AppConfig supports <code>feature flags</code> and <code>freeform</code> configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for <code>Type</code>:</p>
    /// <p> <code>AWS.AppConfig.FeatureFlags</code> </p>
    /// <p> <code>AWS.Freeform</code> </p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateConfigurationProfileOutput {
    /// <p>The application ID.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The configuration profile ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the configuration profile.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The configuration profile description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The URI location of the configuration.</p>
    pub fn location_uri(&self) -> std::option::Option<&str> {
        self.location_uri.as_deref()
    }
    /// <p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p>
    pub fn retrieval_role_arn(&self) -> std::option::Option<&str> {
        self.retrieval_role_arn.as_deref()
    }
    /// <p>A list of methods for validating the configuration.</p>
    pub fn validators(&self) -> std::option::Option<&[crate::types::Validator]> {
        self.validators.as_deref()
    }
    /// <p>The type of configurations contained in the profile. AppConfig supports <code>feature flags</code> and <code>freeform</code> configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for <code>Type</code>:</p>
    /// <p> <code>AWS.AppConfig.FeatureFlags</code> </p>
    /// <p> <code>AWS.Freeform</code> </p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateConfigurationProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateConfigurationProfileOutput {
    /// Creates a new builder-style object to manufacture [`CreateConfigurationProfileOutput`](crate::operation::create_configuration_profile::CreateConfigurationProfileOutput).
    pub fn builder() -> crate::operation::create_configuration_profile::builders::CreateConfigurationProfileOutputBuilder{
        crate::operation::create_configuration_profile::builders::CreateConfigurationProfileOutputBuilder::default()
    }
}

/// A builder for [`CreateConfigurationProfileOutput`](crate::operation::create_configuration_profile::CreateConfigurationProfileOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateConfigurationProfileOutputBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) location_uri: std::option::Option<std::string::String>,
    pub(crate) retrieval_role_arn: std::option::Option<std::string::String>,
    pub(crate) validators: std::option::Option<std::vec::Vec<crate::types::Validator>>,
    pub(crate) r#type: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateConfigurationProfileOutputBuilder {
    /// <p>The application ID.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The application ID.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The configuration profile ID.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The configuration profile ID.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the configuration profile.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the configuration profile.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The configuration profile description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The configuration profile description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The URI location of the configuration.</p>
    pub fn location_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.location_uri = Some(input.into());
        self
    }
    /// <p>The URI location of the configuration.</p>
    pub fn set_location_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location_uri = input;
        self
    }
    /// <p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p>
    pub fn retrieval_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.retrieval_role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p>
    pub fn set_retrieval_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.retrieval_role_arn = input;
        self
    }
    /// Appends an item to `validators`.
    ///
    /// To override the contents of this collection use [`set_validators`](Self::set_validators).
    ///
    /// <p>A list of methods for validating the configuration.</p>
    pub fn validators(mut self, input: crate::types::Validator) -> Self {
        let mut v = self.validators.unwrap_or_default();
        v.push(input);
        self.validators = Some(v);
        self
    }
    /// <p>A list of methods for validating the configuration.</p>
    pub fn set_validators(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Validator>>,
    ) -> Self {
        self.validators = input;
        self
    }
    /// <p>The type of configurations contained in the profile. AppConfig supports <code>feature flags</code> and <code>freeform</code> configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for <code>Type</code>:</p>
    /// <p> <code>AWS.AppConfig.FeatureFlags</code> </p>
    /// <p> <code>AWS.Freeform</code> </p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of configurations contained in the profile. AppConfig supports <code>feature flags</code> and <code>freeform</code> configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for <code>Type</code>:</p>
    /// <p> <code>AWS.AppConfig.FeatureFlags</code> </p>
    /// <p> <code>AWS.Freeform</code> </p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateConfigurationProfileOutput`](crate::operation::create_configuration_profile::CreateConfigurationProfileOutput).
    pub fn build(
        self,
    ) -> crate::operation::create_configuration_profile::CreateConfigurationProfileOutput {
        crate::operation::create_configuration_profile::CreateConfigurationProfileOutput {
            application_id: self.application_id,
            id: self.id,
            name: self.name,
            description: self.description,
            location_uri: self.location_uri,
            retrieval_role_arn: self.retrieval_role_arn,
            validators: self.validators,
            r#type: self.r#type,
            _request_id: self._request_id,
        }
    }
}
