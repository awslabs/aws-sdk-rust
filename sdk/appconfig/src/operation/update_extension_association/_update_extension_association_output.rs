// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateExtensionAssociationOutput {
    /// <p>The system-generated ID for the association.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The ARN of the extension defined in the association.</p>
    #[doc(hidden)]
    pub extension_arn: std::option::Option<std::string::String>,
    /// <p>The ARNs of applications, configuration profiles, or environments defined in the association.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The parameter names and values defined in the association.</p>
    #[doc(hidden)]
    pub parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The version number for the extension defined in the association.</p>
    #[doc(hidden)]
    pub extension_version_number: i32,
    _request_id: Option<String>,
}
impl UpdateExtensionAssociationOutput {
    /// <p>The system-generated ID for the association.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ARN of the extension defined in the association.</p>
    pub fn extension_arn(&self) -> std::option::Option<&str> {
        self.extension_arn.as_deref()
    }
    /// <p>The ARNs of applications, configuration profiles, or environments defined in the association.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The parameter names and values defined in the association.</p>
    pub fn parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.parameters.as_ref()
    }
    /// <p>The version number for the extension defined in the association.</p>
    pub fn extension_version_number(&self) -> i32 {
        self.extension_version_number
    }
}
impl aws_http::request_id::RequestId for UpdateExtensionAssociationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateExtensionAssociationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateExtensionAssociationOutput`](crate::operation::update_extension_association::UpdateExtensionAssociationOutput).
    pub fn builder() -> crate::operation::update_extension_association::builders::UpdateExtensionAssociationOutputBuilder{
        crate::operation::update_extension_association::builders::UpdateExtensionAssociationOutputBuilder::default()
    }
}

/// A builder for [`UpdateExtensionAssociationOutput`](crate::operation::update_extension_association::UpdateExtensionAssociationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateExtensionAssociationOutputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) extension_arn: std::option::Option<std::string::String>,
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) extension_version_number: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl UpdateExtensionAssociationOutputBuilder {
    /// <p>The system-generated ID for the association.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The system-generated ID for the association.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ARN of the extension defined in the association.</p>
    pub fn extension_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.extension_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the extension defined in the association.</p>
    pub fn set_extension_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.extension_arn = input;
        self
    }
    /// <p>The ARNs of applications, configuration profiles, or environments defined in the association.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>The ARNs of applications, configuration profiles, or environments defined in the association.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The parameter names and values defined in the association.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = Some(hash_map);
        self
    }
    /// <p>The parameter names and values defined in the association.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The version number for the extension defined in the association.</p>
    pub fn extension_version_number(mut self, input: i32) -> Self {
        self.extension_version_number = Some(input);
        self
    }
    /// <p>The version number for the extension defined in the association.</p>
    pub fn set_extension_version_number(mut self, input: std::option::Option<i32>) -> Self {
        self.extension_version_number = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateExtensionAssociationOutput`](crate::operation::update_extension_association::UpdateExtensionAssociationOutput).
    pub fn build(
        self,
    ) -> crate::operation::update_extension_association::UpdateExtensionAssociationOutput {
        crate::operation::update_extension_association::UpdateExtensionAssociationOutput {
            id: self.id,
            extension_arn: self.extension_arn,
            resource_arn: self.resource_arn,
            arn: self.arn,
            parameters: self.parameters,
            extension_version_number: self.extension_version_number.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
