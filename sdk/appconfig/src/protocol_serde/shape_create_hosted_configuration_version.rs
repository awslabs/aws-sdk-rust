// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_create_hosted_configuration_version_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionOutput,
    crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "BadRequestException" => crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::BadRequestException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::BadRequestExceptionBuilder::default();
                output = crate::protocol_serde::shape_bad_request_exception::de_bad_request_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ConflictException" => crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ConflictExceptionBuilder::default();
                output = crate::protocol_serde::shape_conflict_exception::de_conflict_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalServerException" => {
            crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InternalServerExceptionBuilder::default();
                    output = crate::protocol_serde::shape_internal_server_exception::de_internal_server_exception_json_err(_response_body, output)
                        .map_err(crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "PayloadTooLargeException" => {
            crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::PayloadTooLargeException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::PayloadTooLargeExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_payload_too_large_exception::de_payload_too_large_exception_json_err(_response_body, output)
                            .map_err(crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ResourceNotFoundExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_resource_not_found_exception::de_resource_not_found_exception_json_err(_response_body, output)
                            .map_err(crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ServiceQuotaExceededException" => {
            crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::ServiceQuotaExceededException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ServiceQuotaExceededExceptionBuilder::default();
                    output = crate::protocol_serde::shape_service_quota_exceeded_exception::de_service_quota_exceeded_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_hosted_configuration_version_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionOutput,
    crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::create_hosted_configuration_version::builders::CreateHostedConfigurationVersionOutputBuilder::default();
        output = output.set_application_id(
            crate::protocol_serde::shape_create_hosted_configuration_version_output::de_application_id_header(_response_headers).map_err(|_| {
                crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::unhandled(
                    "Failed to parse ApplicationId from header `Application-Id",
                )
            })?,
        );
        output = output.set_configuration_profile_id(
            crate::protocol_serde::shape_create_hosted_configuration_version_output::de_configuration_profile_id_header(_response_headers).map_err(
                |_| {
                    crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::unhandled(
                        "Failed to parse ConfigurationProfileId from header `Configuration-Profile-Id",
                    )
                },
            )?,
        );
        output = output.set_content(crate::protocol_serde::shape_create_hosted_configuration_version_output::de_content_payload(_response_body)?);
        output = output.set_content_type(
            crate::protocol_serde::shape_create_hosted_configuration_version_output::de_content_type_header(_response_headers).map_err(|_| {
                crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::unhandled(
                    "Failed to parse ContentType from header `Content-Type",
                )
            })?,
        );
        output = output.set_description(
            crate::protocol_serde::shape_create_hosted_configuration_version_output::de_description_header(_response_headers).map_err(|_| {
                crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::unhandled(
                    "Failed to parse Description from header `Description",
                )
            })?,
        );
        output = output.set_kms_key_arn(
            crate::protocol_serde::shape_create_hosted_configuration_version_output::de_kms_key_arn_header(_response_headers).map_err(|_| {
                crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::unhandled(
                    "Failed to parse KmsKeyArn from header `KmsKeyArn",
                )
            })?,
        );
        output = output.set_version_label(
            crate::protocol_serde::shape_create_hosted_configuration_version_output::de_version_label_header(_response_headers).map_err(|_| {
                crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::unhandled(
                    "Failed to parse VersionLabel from header `VersionLabel",
                )
            })?,
        );
        output = output.set_version_number(
            crate::protocol_serde::shape_create_hosted_configuration_version_output::de_version_number_header(_response_headers).map_err(|_| {
                crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionError::unhandled(
                    "Failed to parse VersionNumber from header `Version-Number",
                )
            })?,
        );
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_create_hosted_configuration_version_headers(
    input: &crate::operation::create_hosted_configuration_version::CreateHostedConfigurationVersionInput,
    mut builder: ::http::request::Builder,
) -> std::result::Result<::http::request::Builder, ::aws_smithy_types::error::operation::BuildError> {
    if let ::std::option::Option::Some(inner_1) = &input.description {
        let formatted_2 = inner_1.as_str();
        if !formatted_2.is_empty() {
            let header_value = formatted_2;
            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                ::aws_smithy_types::error::operation::BuildError::invalid_field(
                    "description",
                    format!("`{}` cannot be used as a header value: {}", &header_value, err),
                )
            })?;
            builder = builder.header("Description", header_value);
        }
    }
    if let ::std::option::Option::Some(inner_3) = &input.content_type {
        let formatted_4 = inner_3.as_str();
        if !formatted_4.is_empty() {
            let header_value = formatted_4;
            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                ::aws_smithy_types::error::operation::BuildError::invalid_field(
                    "content_type",
                    format!("`{}` cannot be used as a header value: {}", &header_value, err),
                )
            })?;
            builder = builder.header("Content-Type", header_value);
        }
    }
    if let ::std::option::Option::Some(inner_5) = &input.latest_version_number {
        let mut encoder = ::aws_smithy_types::primitive::Encoder::from(*inner_5);
        let formatted_6 = encoder.encode();
        if !formatted_6.is_empty() {
            let header_value = formatted_6;
            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                ::aws_smithy_types::error::operation::BuildError::invalid_field(
                    "latest_version_number",
                    format!("`{}` cannot be used as a header value: {}", &header_value, err),
                )
            })?;
            builder = builder.header("Latest-Version-Number", header_value);
        }
    }
    if let ::std::option::Option::Some(inner_7) = &input.version_label {
        let formatted_8 = inner_7.as_str();
        if !formatted_8.is_empty() {
            let header_value = formatted_8;
            let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                ::aws_smithy_types::error::operation::BuildError::invalid_field(
                    "version_label",
                    format!("`{}` cannot be used as a header value: {}", &header_value, err),
                )
            })?;
            builder = builder.header("VersionLabel", header_value);
        }
    }
    Ok(builder)
}
