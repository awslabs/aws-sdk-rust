// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateApplicationInput,
) {
    if let Some(var_1) = &input.description {
        object.key("Description").string(var_1);
    }
    if let Some(var_2) = &input.name {
        object.key("Name").string(var_2);
    }
    if let Some(var_3) = &input.tags {
        let mut object_4 = object.key("Tags").start_object();
        for (key_5, value_6) in var_3 {
            {
                object_4.key(key_5).string(value_6);
            }
        }
        object_4.finish();
    }
}

pub fn serialize_structure_create_configuration_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConfigurationProfileInput,
) {
    if let Some(var_7) = &input.description {
        object.key("Description").string(var_7);
    }
    if let Some(var_8) = &input.location_uri {
        object.key("LocationUri").string(var_8);
    }
    if let Some(var_9) = &input.name {
        object.key("Name").string(var_9);
    }
    if let Some(var_10) = &input.retrieval_role_arn {
        object.key("RetrievalRoleArn").string(var_10);
    }
    if let Some(var_11) = &input.tags {
        let mut object_12 = object.key("Tags").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13).string(value_14);
            }
        }
        object_12.finish();
    }
    if let Some(var_15) = &input.validators {
        let mut array_16 = object.key("Validators").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_validator(&mut object_18, item_17);
                object_18.finish();
            }
        }
        array_16.finish();
    }
}

pub fn serialize_structure_create_deployment_strategy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeploymentStrategyInput,
) {
    if let Some(var_19) = &input.deployment_duration_in_minutes {
        object.key("DeploymentDurationInMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.description {
        object.key("Description").string(var_20);
    }
    if input.final_bake_time_in_minutes != 0 {
        object.key("FinalBakeTimeInMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.final_bake_time_in_minutes).into()),
        );
    }
    if let Some(var_21) = &input.growth_factor {
        object.key("GrowthFactor").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_21).into()),
        );
    }
    if let Some(var_22) = &input.growth_type {
        object.key("GrowthType").string(var_22.as_str());
    }
    if let Some(var_23) = &input.name {
        object.key("Name").string(var_23);
    }
    if let Some(var_24) = &input.replicate_to {
        object.key("ReplicateTo").string(var_24.as_str());
    }
    if let Some(var_25) = &input.tags {
        let mut object_26 = object.key("Tags").start_object();
        for (key_27, value_28) in var_25 {
            {
                object_26.key(key_27).string(value_28);
            }
        }
        object_26.finish();
    }
}

pub fn serialize_structure_create_environment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEnvironmentInput,
) {
    if let Some(var_29) = &input.description {
        object.key("Description").string(var_29);
    }
    if let Some(var_30) = &input.monitors {
        let mut array_31 = object.key("Monitors").start_array();
        for item_32 in var_30 {
            {
                let mut object_33 = array_31.value().start_object();
                crate::json_ser::serialize_structure_monitor(&mut object_33, item_32);
                object_33.finish();
            }
        }
        array_31.finish();
    }
    if let Some(var_34) = &input.name {
        object.key("Name").string(var_34);
    }
    if let Some(var_35) = &input.tags {
        let mut object_36 = object.key("Tags").start_object();
        for (key_37, value_38) in var_35 {
            {
                object_36.key(key_37).string(value_38);
            }
        }
        object_36.finish();
    }
}

pub fn serialize_structure_start_deployment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDeploymentInput,
) {
    if let Some(var_39) = &input.configuration_profile_id {
        object.key("ConfigurationProfileId").string(var_39);
    }
    if let Some(var_40) = &input.configuration_version {
        object.key("ConfigurationVersion").string(var_40);
    }
    if let Some(var_41) = &input.deployment_strategy_id {
        object.key("DeploymentStrategyId").string(var_41);
    }
    if let Some(var_42) = &input.description {
        object.key("Description").string(var_42);
    }
    if let Some(var_43) = &input.tags {
        let mut object_44 = object.key("Tags").start_object();
        for (key_45, value_46) in var_43 {
            {
                object_44.key(key_45).string(value_46);
            }
        }
        object_44.finish();
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_47) = &input.tags {
        let mut object_48 = object.key("Tags").start_object();
        for (key_49, value_50) in var_47 {
            {
                object_48.key(key_49).string(value_50);
            }
        }
        object_48.finish();
    }
}

pub fn serialize_structure_update_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateApplicationInput,
) {
    if let Some(var_51) = &input.description {
        object.key("Description").string(var_51);
    }
    if let Some(var_52) = &input.name {
        object.key("Name").string(var_52);
    }
}

pub fn serialize_structure_update_configuration_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConfigurationProfileInput,
) {
    if let Some(var_53) = &input.description {
        object.key("Description").string(var_53);
    }
    if let Some(var_54) = &input.name {
        object.key("Name").string(var_54);
    }
    if let Some(var_55) = &input.retrieval_role_arn {
        object.key("RetrievalRoleArn").string(var_55);
    }
    if let Some(var_56) = &input.validators {
        let mut array_57 = object.key("Validators").start_array();
        for item_58 in var_56 {
            {
                let mut object_59 = array_57.value().start_object();
                crate::json_ser::serialize_structure_validator(&mut object_59, item_58);
                object_59.finish();
            }
        }
        array_57.finish();
    }
}

pub fn serialize_structure_update_deployment_strategy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDeploymentStrategyInput,
) {
    if let Some(var_60) = &input.deployment_duration_in_minutes {
        object.key("DeploymentDurationInMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_60).into()),
        );
    }
    if let Some(var_61) = &input.description {
        object.key("Description").string(var_61);
    }
    if let Some(var_62) = &input.final_bake_time_in_minutes {
        object.key("FinalBakeTimeInMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_62).into()),
        );
    }
    if let Some(var_63) = &input.growth_factor {
        object.key("GrowthFactor").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_63).into()),
        );
    }
    if let Some(var_64) = &input.growth_type {
        object.key("GrowthType").string(var_64.as_str());
    }
}

pub fn serialize_structure_update_environment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEnvironmentInput,
) {
    if let Some(var_65) = &input.description {
        object.key("Description").string(var_65);
    }
    if let Some(var_66) = &input.monitors {
        let mut array_67 = object.key("Monitors").start_array();
        for item_68 in var_66 {
            {
                let mut object_69 = array_67.value().start_object();
                crate::json_ser::serialize_structure_monitor(&mut object_69, item_68);
                object_69.finish();
            }
        }
        array_67.finish();
    }
    if let Some(var_70) = &input.name {
        object.key("Name").string(var_70);
    }
}

pub fn serialize_structure_validator(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Validator,
) {
    if let Some(var_71) = &input.r#type {
        object.key("Type").string(var_71.as_str());
    }
    if let Some(var_72) = &input.content {
        object.key("Content").string(var_72);
    }
}

pub fn serialize_structure_monitor(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Monitor,
) {
    if let Some(var_73) = &input.alarm_arn {
        object.key("AlarmArn").string(var_73);
    }
    if let Some(var_74) = &input.alarm_role_arn {
        object.key("AlarmRoleArn").string(var_74);
    }
}
