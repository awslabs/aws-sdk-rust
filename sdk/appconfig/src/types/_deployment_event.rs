// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that describes a deployment event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeploymentEvent {
    /// <p>The type of deployment event. Deployment event types include the start, stop, or completion of a deployment; a percentage update; the start or stop of a bake period; and the start or completion of a rollback.</p>
    pub event_type: ::std::option::Option<crate::types::DeploymentEventType>,
    /// <p>The entity that triggered the deployment event. Events can be triggered by a user, AppConfig, an Amazon CloudWatch alarm, or an internal error.</p>
    pub triggered_by: ::std::option::Option<crate::types::TriggeredBy>,
    /// <p>A description of the deployment event. Descriptions include, but are not limited to, the following:</p>
    /// <ul>
    /// <li> <p>The Amazon Web Services account or the Amazon CloudWatch alarm ARN that initiated a rollback.</p> </li>
    /// <li> <p>The percentage of hosts that received the deployment.</p> </li>
    /// <li> <p>A recommendation to attempt a new deployment (in the case of an internal error).</p> </li>
    /// </ul>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The list of extensions that were invoked as part of the deployment.</p>
    pub action_invocations: ::std::option::Option<::std::vec::Vec<crate::types::ActionInvocation>>,
    /// <p>The date and time the event occurred.</p>
    pub occurred_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DeploymentEvent {
    /// <p>The type of deployment event. Deployment event types include the start, stop, or completion of a deployment; a percentage update; the start or stop of a bake period; and the start or completion of a rollback.</p>
    pub fn event_type(&self) -> ::std::option::Option<&crate::types::DeploymentEventType> {
        self.event_type.as_ref()
    }
    /// <p>The entity that triggered the deployment event. Events can be triggered by a user, AppConfig, an Amazon CloudWatch alarm, or an internal error.</p>
    pub fn triggered_by(&self) -> ::std::option::Option<&crate::types::TriggeredBy> {
        self.triggered_by.as_ref()
    }
    /// <p>A description of the deployment event. Descriptions include, but are not limited to, the following:</p>
    /// <ul>
    /// <li> <p>The Amazon Web Services account or the Amazon CloudWatch alarm ARN that initiated a rollback.</p> </li>
    /// <li> <p>The percentage of hosts that received the deployment.</p> </li>
    /// <li> <p>A recommendation to attempt a new deployment (in the case of an internal error).</p> </li>
    /// </ul>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The list of extensions that were invoked as part of the deployment.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.action_invocations.is_none()`.
    pub fn action_invocations(&self) -> &[crate::types::ActionInvocation] {
        self.action_invocations.as_deref().unwrap_or_default()
    }
    /// <p>The date and time the event occurred.</p>
    pub fn occurred_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.occurred_at.as_ref()
    }
}
impl DeploymentEvent {
    /// Creates a new builder-style object to manufacture [`DeploymentEvent`](crate::types::DeploymentEvent).
    pub fn builder() -> crate::types::builders::DeploymentEventBuilder {
        crate::types::builders::DeploymentEventBuilder::default()
    }
}

/// A builder for [`DeploymentEvent`](crate::types::DeploymentEvent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeploymentEventBuilder {
    pub(crate) event_type: ::std::option::Option<crate::types::DeploymentEventType>,
    pub(crate) triggered_by: ::std::option::Option<crate::types::TriggeredBy>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) action_invocations: ::std::option::Option<::std::vec::Vec<crate::types::ActionInvocation>>,
    pub(crate) occurred_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DeploymentEventBuilder {
    /// <p>The type of deployment event. Deployment event types include the start, stop, or completion of a deployment; a percentage update; the start or stop of a bake period; and the start or completion of a rollback.</p>
    pub fn event_type(mut self, input: crate::types::DeploymentEventType) -> Self {
        self.event_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of deployment event. Deployment event types include the start, stop, or completion of a deployment; a percentage update; the start or stop of a bake period; and the start or completion of a rollback.</p>
    pub fn set_event_type(mut self, input: ::std::option::Option<crate::types::DeploymentEventType>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>The type of deployment event. Deployment event types include the start, stop, or completion of a deployment; a percentage update; the start or stop of a bake period; and the start or completion of a rollback.</p>
    pub fn get_event_type(&self) -> &::std::option::Option<crate::types::DeploymentEventType> {
        &self.event_type
    }
    /// <p>The entity that triggered the deployment event. Events can be triggered by a user, AppConfig, an Amazon CloudWatch alarm, or an internal error.</p>
    pub fn triggered_by(mut self, input: crate::types::TriggeredBy) -> Self {
        self.triggered_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The entity that triggered the deployment event. Events can be triggered by a user, AppConfig, an Amazon CloudWatch alarm, or an internal error.</p>
    pub fn set_triggered_by(mut self, input: ::std::option::Option<crate::types::TriggeredBy>) -> Self {
        self.triggered_by = input;
        self
    }
    /// <p>The entity that triggered the deployment event. Events can be triggered by a user, AppConfig, an Amazon CloudWatch alarm, or an internal error.</p>
    pub fn get_triggered_by(&self) -> &::std::option::Option<crate::types::TriggeredBy> {
        &self.triggered_by
    }
    /// <p>A description of the deployment event. Descriptions include, but are not limited to, the following:</p>
    /// <ul>
    /// <li> <p>The Amazon Web Services account or the Amazon CloudWatch alarm ARN that initiated a rollback.</p> </li>
    /// <li> <p>The percentage of hosts that received the deployment.</p> </li>
    /// <li> <p>A recommendation to attempt a new deployment (in the case of an internal error).</p> </li>
    /// </ul>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the deployment event. Descriptions include, but are not limited to, the following:</p>
    /// <ul>
    /// <li> <p>The Amazon Web Services account or the Amazon CloudWatch alarm ARN that initiated a rollback.</p> </li>
    /// <li> <p>The percentage of hosts that received the deployment.</p> </li>
    /// <li> <p>A recommendation to attempt a new deployment (in the case of an internal error).</p> </li>
    /// </ul>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the deployment event. Descriptions include, but are not limited to, the following:</p>
    /// <ul>
    /// <li> <p>The Amazon Web Services account or the Amazon CloudWatch alarm ARN that initiated a rollback.</p> </li>
    /// <li> <p>The percentage of hosts that received the deployment.</p> </li>
    /// <li> <p>A recommendation to attempt a new deployment (in the case of an internal error).</p> </li>
    /// </ul>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `action_invocations`.
    ///
    /// To override the contents of this collection use [`set_action_invocations`](Self::set_action_invocations).
    ///
    /// <p>The list of extensions that were invoked as part of the deployment.</p>
    pub fn action_invocations(mut self, input: crate::types::ActionInvocation) -> Self {
        let mut v = self.action_invocations.unwrap_or_default();
        v.push(input);
        self.action_invocations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of extensions that were invoked as part of the deployment.</p>
    pub fn set_action_invocations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ActionInvocation>>) -> Self {
        self.action_invocations = input;
        self
    }
    /// <p>The list of extensions that were invoked as part of the deployment.</p>
    pub fn get_action_invocations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ActionInvocation>> {
        &self.action_invocations
    }
    /// <p>The date and time the event occurred.</p>
    pub fn occurred_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.occurred_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time the event occurred.</p>
    pub fn set_occurred_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.occurred_at = input;
        self
    }
    /// <p>The date and time the event occurred.</p>
    pub fn get_occurred_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.occurred_at
    }
    /// Consumes the builder and constructs a [`DeploymentEvent`](crate::types::DeploymentEvent).
    pub fn build(self) -> crate::types::DeploymentEvent {
        crate::types::DeploymentEvent {
            event_type: self.event_type,
            triggered_by: self.triggered_by,
            description: self.description,
            action_invocations: self.action_invocations,
            occurred_at: self.occurred_at,
        }
    }
}
