// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an association between an extension and an AppConfig resource such as an application, environment, or configuration profile. Call <code>GetExtensionAssociation</code> to get more information about an association.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExtensionAssociationSummary {
    /// <p>The extension association ID. This ID is used to call other <code>ExtensionAssociation</code> API actions such as <code>GetExtensionAssociation</code> or <code>DeleteExtensionAssociation</code>.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    #[doc(hidden)]
    pub extension_arn: std::option::Option<std::string::String>,
    /// <p>The ARNs of applications, configuration profiles, or environments defined in the association.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
}
impl ExtensionAssociationSummary {
    /// <p>The extension association ID. This ID is used to call other <code>ExtensionAssociation</code> API actions such as <code>GetExtensionAssociation</code> or <code>DeleteExtensionAssociation</code>.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    pub fn extension_arn(&self) -> std::option::Option<&str> {
        self.extension_arn.as_deref()
    }
    /// <p>The ARNs of applications, configuration profiles, or environments defined in the association.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
}
impl ExtensionAssociationSummary {
    /// Creates a new builder-style object to manufacture [`ExtensionAssociationSummary`](crate::types::ExtensionAssociationSummary).
    pub fn builder() -> crate::types::builders::ExtensionAssociationSummaryBuilder {
        crate::types::builders::ExtensionAssociationSummaryBuilder::default()
    }
}

/// A builder for [`ExtensionAssociationSummary`](crate::types::ExtensionAssociationSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExtensionAssociationSummaryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) extension_arn: std::option::Option<std::string::String>,
    pub(crate) resource_arn: std::option::Option<std::string::String>,
}
impl ExtensionAssociationSummaryBuilder {
    /// <p>The extension association ID. This ID is used to call other <code>ExtensionAssociation</code> API actions such as <code>GetExtensionAssociation</code> or <code>DeleteExtensionAssociation</code>.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The extension association ID. This ID is used to call other <code>ExtensionAssociation</code> API actions such as <code>GetExtensionAssociation</code> or <code>DeleteExtensionAssociation</code>.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    pub fn extension_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.extension_arn = Some(input.into());
        self
    }
    /// <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    pub fn set_extension_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.extension_arn = input;
        self
    }
    /// <p>The ARNs of applications, configuration profiles, or environments defined in the association.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>The ARNs of applications, configuration profiles, or environments defined in the association.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`ExtensionAssociationSummary`](crate::types::ExtensionAssociationSummary).
    pub fn build(self) -> crate::types::ExtensionAssociationSummary {
        crate::types::ExtensionAssociationSummary {
            id: self.id,
            extension_arn: self.extension_arn,
            resource_arn: self.resource_arn,
        }
    }
}
