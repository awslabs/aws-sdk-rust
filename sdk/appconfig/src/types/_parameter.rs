// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A value such as an Amazon Resource Name (ARN) or an Amazon Simple Notification Service topic entered in an extension when invoked. Parameter values are specified in an extension association. For more information about extensions, see <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html">Working with AppConfig extensions</a> in the <i>AppConfig User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Parameter {
    /// <p>Information about the parameter.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A parameter value must be specified in the extension association.</p>
    #[doc(hidden)]
    pub required: bool,
}
impl Parameter {
    /// <p>Information about the parameter.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A parameter value must be specified in the extension association.</p>
    pub fn required(&self) -> bool {
        self.required
    }
}
impl Parameter {
    /// Creates a new builder-style object to manufacture [`Parameter`](crate::types::Parameter).
    pub fn builder() -> crate::types::builders::ParameterBuilder {
        crate::types::builders::ParameterBuilder::default()
    }
}

/// A builder for [`Parameter`](crate::types::Parameter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ParameterBuilder {
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) required: std::option::Option<bool>,
}
impl ParameterBuilder {
    /// <p>Information about the parameter.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>Information about the parameter.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A parameter value must be specified in the extension association.</p>
    pub fn required(mut self, input: bool) -> Self {
        self.required = Some(input);
        self
    }
    /// <p>A parameter value must be specified in the extension association.</p>
    pub fn set_required(mut self, input: std::option::Option<bool>) -> Self {
        self.required = input;
        self
    }
    /// Consumes the builder and constructs a [`Parameter`](crate::types::Parameter).
    pub fn build(self) -> crate::types::Parameter {
        crate::types::Parameter {
            description: self.description,
            required: self.required.unwrap_or_default(),
        }
    }
}
