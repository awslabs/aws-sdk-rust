// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An extension that was invoked as part of a deployment event.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ActionInvocation {
    /// <p>The name, the ID, or the Amazon Resource Name (ARN) of the extension.</p>
    #[doc(hidden)]
    pub extension_identifier: std::option::Option<std::string::String>,
    /// <p>The name of the action.</p>
    #[doc(hidden)]
    pub action_name: std::option::Option<std::string::String>,
    /// <p>The extension URI associated to the action point in the extension definition. The URI can be an Amazon Resource Name (ARN) for one of the following: an Lambda function, an Amazon Simple Queue Service queue, an Amazon Simple Notification Service topic, or the Amazon EventBridge default event bus.</p>
    #[doc(hidden)]
    pub uri: std::option::Option<std::string::String>,
    /// <p>An Amazon Resource Name (ARN) for an Identity and Access Management assume role.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The error message when an extension invocation fails.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
    /// <p>The error code when an extension invocation fails.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<std::string::String>,
    /// <p>A system-generated ID for this invocation.</p>
    #[doc(hidden)]
    pub invocation_id: std::option::Option<std::string::String>,
}
impl ActionInvocation {
    /// <p>The name, the ID, or the Amazon Resource Name (ARN) of the extension.</p>
    pub fn extension_identifier(&self) -> std::option::Option<&str> {
        self.extension_identifier.as_deref()
    }
    /// <p>The name of the action.</p>
    pub fn action_name(&self) -> std::option::Option<&str> {
        self.action_name.as_deref()
    }
    /// <p>The extension URI associated to the action point in the extension definition. The URI can be an Amazon Resource Name (ARN) for one of the following: an Lambda function, an Amazon Simple Queue Service queue, an Amazon Simple Notification Service topic, or the Amazon EventBridge default event bus.</p>
    pub fn uri(&self) -> std::option::Option<&str> {
        self.uri.as_deref()
    }
    /// <p>An Amazon Resource Name (ARN) for an Identity and Access Management assume role.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The error message when an extension invocation fails.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The error code when an extension invocation fails.</p>
    pub fn error_code(&self) -> std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>A system-generated ID for this invocation.</p>
    pub fn invocation_id(&self) -> std::option::Option<&str> {
        self.invocation_id.as_deref()
    }
}
impl ActionInvocation {
    /// Creates a new builder-style object to manufacture [`ActionInvocation`](crate::types::ActionInvocation).
    pub fn builder() -> crate::types::builders::ActionInvocationBuilder {
        crate::types::builders::ActionInvocationBuilder::default()
    }
}

/// A builder for [`ActionInvocation`](crate::types::ActionInvocation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActionInvocationBuilder {
    pub(crate) extension_identifier: std::option::Option<std::string::String>,
    pub(crate) action_name: std::option::Option<std::string::String>,
    pub(crate) uri: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) error_message: std::option::Option<std::string::String>,
    pub(crate) error_code: std::option::Option<std::string::String>,
    pub(crate) invocation_id: std::option::Option<std::string::String>,
}
impl ActionInvocationBuilder {
    /// <p>The name, the ID, or the Amazon Resource Name (ARN) of the extension.</p>
    pub fn extension_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.extension_identifier = Some(input.into());
        self
    }
    /// <p>The name, the ID, or the Amazon Resource Name (ARN) of the extension.</p>
    pub fn set_extension_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.extension_identifier = input;
        self
    }
    /// <p>The name of the action.</p>
    pub fn action_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.action_name = Some(input.into());
        self
    }
    /// <p>The name of the action.</p>
    pub fn set_action_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.action_name = input;
        self
    }
    /// <p>The extension URI associated to the action point in the extension definition. The URI can be an Amazon Resource Name (ARN) for one of the following: an Lambda function, an Amazon Simple Queue Service queue, an Amazon Simple Notification Service topic, or the Amazon EventBridge default event bus.</p>
    pub fn uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.uri = Some(input.into());
        self
    }
    /// <p>The extension URI associated to the action point in the extension definition. The URI can be an Amazon Resource Name (ARN) for one of the following: an Lambda function, an Amazon Simple Queue Service queue, an Amazon Simple Notification Service topic, or the Amazon EventBridge default event bus.</p>
    pub fn set_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.uri = input;
        self
    }
    /// <p>An Amazon Resource Name (ARN) for an Identity and Access Management assume role.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>An Amazon Resource Name (ARN) for an Identity and Access Management assume role.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The error message when an extension invocation fails.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>The error message when an extension invocation fails.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The error code when an extension invocation fails.</p>
    pub fn error_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_code = Some(input.into());
        self
    }
    /// <p>The error code when an extension invocation fails.</p>
    pub fn set_error_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>A system-generated ID for this invocation.</p>
    pub fn invocation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.invocation_id = Some(input.into());
        self
    }
    /// <p>A system-generated ID for this invocation.</p>
    pub fn set_invocation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.invocation_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ActionInvocation`](crate::types::ActionInvocation).
    pub fn build(self) -> crate::types::ActionInvocation {
        crate::types::ActionInvocation {
            extension_identifier: self.extension_identifier,
            action_name: self.action_name,
            uri: self.uri,
            role_arn: self.role_arn,
            error_message: self.error_message,
            error_code: self.error_code,
            invocation_id: self.invocation_id,
        }
    }
}
