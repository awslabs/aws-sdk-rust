// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListExtensions`](crate::client::fluent_builders::ListExtensions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListExtensions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListExtensions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListExtensions::set_max_results): <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListExtensions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListExtensions::set_next_token): <p>A token to start the list. Use this token to get the next set of results. </p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ListExtensions::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ListExtensions::set_name): <p>The extension name.</p>
    /// - On success, responds with [`ListExtensionsOutput`](crate::output::ListExtensionsOutput) with field(s):
    ///   - [`items(Option<Vec<ExtensionSummary>>)`](crate::output::ListExtensionsOutput::items): <p>The list of available extensions. The list includes Amazon Web Services-authored and user-created extensions.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListExtensionsOutput::next_token): <p>The token for the next set of items to return. Use this token to get the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListExtensionsError>`](crate::error::ListExtensionsError)
    pub fn list_extensions(&self) -> crate::client::fluent_builders::ListExtensions {
        crate::client::fluent_builders::ListExtensions::new(self.handle.clone())
    }
}
