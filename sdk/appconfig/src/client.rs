// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon AppConfig
///
/// Client for invoking operations on Amazon AppConfig. Each operation on Amazon AppConfig is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_appconfig::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_appconfig::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_appconfig::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateApplication`](crate::client::fluent_builders::CreateApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateApplication::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateApplication::set_name): <p>A name for the application.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateApplication::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateApplication::set_description): <p>A description of the application.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateApplication::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateApplication::set_tags): <p>Metadata to assign to the application. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.</p>
    /// - On success, responds with [`CreateApplicationOutput`](crate::output::CreateApplicationOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::CreateApplicationOutput::id): <p>The application ID.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateApplicationOutput::name): <p>The application name.</p>
    ///   - [`description(Option<String>)`](crate::output::CreateApplicationOutput::description): <p>The description of the application.</p>
    /// - On failure, responds with [`SdkError<CreateApplicationError>`](crate::error::CreateApplicationError)
    pub fn create_application(&self) -> crate::client::fluent_builders::CreateApplication {
        crate::client::fluent_builders::CreateApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateConfigurationProfile`](crate::client::fluent_builders::CreateConfigurationProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::CreateConfigurationProfile::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::CreateConfigurationProfile::set_application_id): <p>The application ID.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateConfigurationProfile::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateConfigurationProfile::set_name): <p>A name for the configuration profile.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateConfigurationProfile::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateConfigurationProfile::set_description): <p>A description of the configuration profile.</p>
    ///   - [`location_uri(impl Into<String>)`](crate::client::fluent_builders::CreateConfigurationProfile::location_uri) / [`set_location_uri(Option<String>)`](crate::client::fluent_builders::CreateConfigurationProfile::set_location_uri): <p>A URI to locate the configuration. You can specify the AppConfig hosted configuration store, Systems Manager (SSM) document, an SSM Parameter Store parameter, or an Amazon S3 object. For the hosted configuration store and for feature flags, specify <code>hosted</code>. For an SSM document, specify either the document name in the format <code>ssm-document://   <document_name></document_name></code> or the Amazon Resource Name (ARN). For a parameter, specify either the parameter name in the format <code>ssm-parameter://   <parameter_name></parameter_name></code> or the ARN. For an Amazon S3 object, specify the URI in the following format: <code>s3://   <bucket>    /    <objectkey>     </objectkey>   </bucket></code>. Here is an example: <code>s3://my-bucket/my-app/us-east-1/my-config.json</code> </p>
    ///   - [`retrieval_role_arn(impl Into<String>)`](crate::client::fluent_builders::CreateConfigurationProfile::retrieval_role_arn) / [`set_retrieval_role_arn(Option<String>)`](crate::client::fluent_builders::CreateConfigurationProfile::set_retrieval_role_arn): <p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p> <important>   <p>A retrieval role ARN is not required for configurations stored in the AppConfig hosted configuration store. It is required for all other sources that store your configuration. </p>  </important>
    ///   - [`validators(Vec<Validator>)`](crate::client::fluent_builders::CreateConfigurationProfile::validators) / [`set_validators(Option<Vec<Validator>>)`](crate::client::fluent_builders::CreateConfigurationProfile::set_validators): <p>A list of methods for validating the configuration.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateConfigurationProfile::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateConfigurationProfile::set_tags): <p>Metadata to assign to the configuration profile. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.</p>
    ///   - [`r#type(impl Into<String>)`](crate::client::fluent_builders::CreateConfigurationProfile::type) / [`set_type(Option<String>)`](crate::client::fluent_builders::CreateConfigurationProfile::set_type): <p>The type of configurations contained in the profile. AppConfig supports <code>feature flags</code> and <code>freeform</code> configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for <code>Type</code>:</p>  <p> <code>AWS.AppConfig.FeatureFlags</code> </p>  <p> <code>AWS.Freeform</code> </p>
    /// - On success, responds with [`CreateConfigurationProfileOutput`](crate::output::CreateConfigurationProfileOutput) with field(s):
    ///   - [`application_id(Option<String>)`](crate::output::CreateConfigurationProfileOutput::application_id): <p>The application ID.</p>
    ///   - [`id(Option<String>)`](crate::output::CreateConfigurationProfileOutput::id): <p>The configuration profile ID.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateConfigurationProfileOutput::name): <p>The name of the configuration profile.</p>
    ///   - [`description(Option<String>)`](crate::output::CreateConfigurationProfileOutput::description): <p>The configuration profile description.</p>
    ///   - [`location_uri(Option<String>)`](crate::output::CreateConfigurationProfileOutput::location_uri): <p>The URI location of the configuration.</p>
    ///   - [`retrieval_role_arn(Option<String>)`](crate::output::CreateConfigurationProfileOutput::retrieval_role_arn): <p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p>
    ///   - [`validators(Option<Vec<Validator>>)`](crate::output::CreateConfigurationProfileOutput::validators): <p>A list of methods for validating the configuration.</p>
    ///   - [`r#type(Option<String>)`](crate::output::CreateConfigurationProfileOutput::type): <p>The type of configurations contained in the profile. AppConfig supports <code>feature flags</code> and <code>freeform</code> configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for <code>Type</code>:</p>  <p> <code>AWS.AppConfig.FeatureFlags</code> </p>  <p> <code>AWS.Freeform</code> </p>
    /// - On failure, responds with [`SdkError<CreateConfigurationProfileError>`](crate::error::CreateConfigurationProfileError)
    pub fn create_configuration_profile(
        &self,
    ) -> crate::client::fluent_builders::CreateConfigurationProfile {
        crate::client::fluent_builders::CreateConfigurationProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateDeploymentStrategy`](crate::client::fluent_builders::CreateDeploymentStrategy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateDeploymentStrategy::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateDeploymentStrategy::set_name): <p>A name for the deployment strategy.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateDeploymentStrategy::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateDeploymentStrategy::set_description): <p>A description of the deployment strategy.</p>
    ///   - [`deployment_duration_in_minutes(i32)`](crate::client::fluent_builders::CreateDeploymentStrategy::deployment_duration_in_minutes) / [`set_deployment_duration_in_minutes(Option<i32>)`](crate::client::fluent_builders::CreateDeploymentStrategy::set_deployment_duration_in_minutes): <p>Total amount of time for a deployment to last.</p>
    ///   - [`final_bake_time_in_minutes(i32)`](crate::client::fluent_builders::CreateDeploymentStrategy::final_bake_time_in_minutes) / [`set_final_bake_time_in_minutes(i32)`](crate::client::fluent_builders::CreateDeploymentStrategy::set_final_bake_time_in_minutes): <p>Specifies the amount of time AppConfig monitors for Amazon CloudWatch alarms after the configuration has been deployed to 100% of its targets, before considering the deployment to be complete. If an alarm is triggered during this time, AppConfig rolls back the deployment. You must configure permissions for AppConfig to roll back based on CloudWatch alarms. For more information, see <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/getting-started-with-appconfig-cloudwatch-alarms-permissions.html">Configuring permissions for rollback based on Amazon CloudWatch alarms</a> in the <i>AppConfig User Guide</i>.</p>
    ///   - [`growth_factor(f32)`](crate::client::fluent_builders::CreateDeploymentStrategy::growth_factor) / [`set_growth_factor(Option<f32>)`](crate::client::fluent_builders::CreateDeploymentStrategy::set_growth_factor): <p>The percentage of targets to receive a deployed configuration during each interval.</p>
    ///   - [`growth_type(GrowthType)`](crate::client::fluent_builders::CreateDeploymentStrategy::growth_type) / [`set_growth_type(Option<GrowthType>)`](crate::client::fluent_builders::CreateDeploymentStrategy::set_growth_type): <p>The algorithm used to define how percentage grows over time. AppConfig supports the following growth types:</p>  <p> <b>Linear</b>: For this type, AppConfig processes the deployment by dividing the total number of targets by the value specified for <code>Step percentage</code>. For example, a linear deployment that uses a <code>Step percentage</code> of 10 deploys the configuration to 10 percent of the hosts. After those deployments are complete, the system deploys the configuration to the next 10 percent. This continues until 100% of the targets have successfully received the configuration.</p>  <p> <b>Exponential</b>: For this type, AppConfig processes the deployment exponentially using the following formula: <code>G*(2^N)</code>. In this formula, <code>G</code> is the growth factor specified by the user and <code>N</code> is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:</p>  <p> <code>2*(2^0)</code> </p>  <p> <code>2*(2^1)</code> </p>  <p> <code>2*(2^2)</code> </p>  <p>Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.</p>
    ///   - [`replicate_to(ReplicateTo)`](crate::client::fluent_builders::CreateDeploymentStrategy::replicate_to) / [`set_replicate_to(Option<ReplicateTo>)`](crate::client::fluent_builders::CreateDeploymentStrategy::set_replicate_to): <p>Save the deployment strategy to a Systems Manager (SSM) document.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateDeploymentStrategy::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateDeploymentStrategy::set_tags): <p>Metadata to assign to the deployment strategy. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.</p>
    /// - On success, responds with [`CreateDeploymentStrategyOutput`](crate::output::CreateDeploymentStrategyOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::CreateDeploymentStrategyOutput::id): <p>The deployment strategy ID.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateDeploymentStrategyOutput::name): <p>The name of the deployment strategy.</p>
    ///   - [`description(Option<String>)`](crate::output::CreateDeploymentStrategyOutput::description): <p>The description of the deployment strategy.</p>
    ///   - [`deployment_duration_in_minutes(i32)`](crate::output::CreateDeploymentStrategyOutput::deployment_duration_in_minutes): <p>Total amount of time the deployment lasted.</p>
    ///   - [`growth_type(Option<GrowthType>)`](crate::output::CreateDeploymentStrategyOutput::growth_type): <p>The algorithm used to define how percentage grew over time.</p>
    ///   - [`growth_factor(f32)`](crate::output::CreateDeploymentStrategyOutput::growth_factor): <p>The percentage of targets that received a deployed configuration during each interval.</p>
    ///   - [`final_bake_time_in_minutes(i32)`](crate::output::CreateDeploymentStrategyOutput::final_bake_time_in_minutes): <p>The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.</p>
    ///   - [`replicate_to(Option<ReplicateTo>)`](crate::output::CreateDeploymentStrategyOutput::replicate_to): <p>Save the deployment strategy to a Systems Manager (SSM) document.</p>
    /// - On failure, responds with [`SdkError<CreateDeploymentStrategyError>`](crate::error::CreateDeploymentStrategyError)
    pub fn create_deployment_strategy(
        &self,
    ) -> crate::client::fluent_builders::CreateDeploymentStrategy {
        crate::client::fluent_builders::CreateDeploymentStrategy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateEnvironment`](crate::client::fluent_builders::CreateEnvironment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::CreateEnvironment::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::CreateEnvironment::set_application_id): <p>The application ID.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateEnvironment::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateEnvironment::set_name): <p>A name for the environment.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateEnvironment::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateEnvironment::set_description): <p>A description of the environment.</p>
    ///   - [`monitors(Vec<Monitor>)`](crate::client::fluent_builders::CreateEnvironment::monitors) / [`set_monitors(Option<Vec<Monitor>>)`](crate::client::fluent_builders::CreateEnvironment::set_monitors): <p>Amazon CloudWatch alarms to monitor during the deployment process.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateEnvironment::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateEnvironment::set_tags): <p>Metadata to assign to the environment. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.</p>
    /// - On success, responds with [`CreateEnvironmentOutput`](crate::output::CreateEnvironmentOutput) with field(s):
    ///   - [`application_id(Option<String>)`](crate::output::CreateEnvironmentOutput::application_id): <p>The application ID.</p>
    ///   - [`id(Option<String>)`](crate::output::CreateEnvironmentOutput::id): <p>The environment ID.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateEnvironmentOutput::name): <p>The name of the environment.</p>
    ///   - [`description(Option<String>)`](crate::output::CreateEnvironmentOutput::description): <p>The description of the environment.</p>
    ///   - [`state(Option<EnvironmentState>)`](crate::output::CreateEnvironmentOutput::state): <p>The state of the environment. An environment can be in one of the following states: <code>READY_FOR_DEPLOYMENT</code>, <code>DEPLOYING</code>, <code>ROLLING_BACK</code>, or <code>ROLLED_BACK</code> </p>
    ///   - [`monitors(Option<Vec<Monitor>>)`](crate::output::CreateEnvironmentOutput::monitors): <p>Amazon CloudWatch alarms monitored during the deployment.</p>
    /// - On failure, responds with [`SdkError<CreateEnvironmentError>`](crate::error::CreateEnvironmentError)
    pub fn create_environment(&self) -> crate::client::fluent_builders::CreateEnvironment {
        crate::client::fluent_builders::CreateEnvironment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateExtension`](crate::client::fluent_builders::CreateExtension) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateExtension::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateExtension::set_name): <p>A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateExtension::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateExtension::set_description): <p>Information about the extension.</p>
    ///   - [`actions(HashMap<ActionPoint, Vec<Action>>)`](crate::client::fluent_builders::CreateExtension::actions) / [`set_actions(Option<HashMap<ActionPoint, Vec<Action>>>)`](crate::client::fluent_builders::CreateExtension::set_actions): <p>The actions defined in the extension.</p>
    ///   - [`parameters(HashMap<String, Parameter>)`](crate::client::fluent_builders::CreateExtension::parameters) / [`set_parameters(Option<HashMap<String, Parameter>>)`](crate::client::fluent_builders::CreateExtension::set_parameters): <p>The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the <code>CreateExtensionAssociation</code> API action. For Lambda extension actions, these parameters are included in the Lambda request object.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateExtension::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateExtension::set_tags): <p>Adds one or more tags for the specified extension. Tags are metadata that help you categorize resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define. </p>
    ///   - [`latest_version_number(i32)`](crate::client::fluent_builders::CreateExtension::latest_version_number) / [`set_latest_version_number(Option<i32>)`](crate::client::fluent_builders::CreateExtension::set_latest_version_number): <p>You can omit this field when you create an extension. When you create a new version, specify the most recent current version number. For example, you create version 3, enter 2 for this field.</p>
    /// - On success, responds with [`CreateExtensionOutput`](crate::output::CreateExtensionOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::CreateExtensionOutput::id): <p>The system-generated ID of the extension.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateExtensionOutput::name): <p>The extension name.</p>
    ///   - [`version_number(i32)`](crate::output::CreateExtensionOutput::version_number): <p>The extension version number.</p>
    ///   - [`arn(Option<String>)`](crate::output::CreateExtensionOutput::arn): <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    ///   - [`description(Option<String>)`](crate::output::CreateExtensionOutput::description): <p>Information about the extension.</p>
    ///   - [`actions(Option<HashMap<ActionPoint, Vec<Action>>>)`](crate::output::CreateExtensionOutput::actions): <p>The actions defined in the extension.</p>
    ///   - [`parameters(Option<HashMap<String, Parameter>>)`](crate::output::CreateExtensionOutput::parameters): <p>The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the <code>CreateExtensionAssociation</code> API action. For Lambda extension actions, these parameters are included in the Lambda request object.</p>
    /// - On failure, responds with [`SdkError<CreateExtensionError>`](crate::error::CreateExtensionError)
    pub fn create_extension(&self) -> crate::client::fluent_builders::CreateExtension {
        crate::client::fluent_builders::CreateExtension::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateExtensionAssociation`](crate::client::fluent_builders::CreateExtensionAssociation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`extension_identifier(impl Into<String>)`](crate::client::fluent_builders::CreateExtensionAssociation::extension_identifier) / [`set_extension_identifier(Option<String>)`](crate::client::fluent_builders::CreateExtensionAssociation::set_extension_identifier): <p>The name, the ID, or the Amazon Resource Name (ARN) of the extension.</p>
    ///   - [`extension_version_number(i32)`](crate::client::fluent_builders::CreateExtensionAssociation::extension_version_number) / [`set_extension_version_number(Option<i32>)`](crate::client::fluent_builders::CreateExtensionAssociation::set_extension_version_number): <p>The version number of the extension. If not specified, AppConfig uses the maximum version of the extension.</p>
    ///   - [`resource_identifier(impl Into<String>)`](crate::client::fluent_builders::CreateExtensionAssociation::resource_identifier) / [`set_resource_identifier(Option<String>)`](crate::client::fluent_builders::CreateExtensionAssociation::set_resource_identifier): <p>The ARN of an application, configuration profile, or environment.</p>
    ///   - [`parameters(HashMap<String, String>)`](crate::client::fluent_builders::CreateExtensionAssociation::parameters) / [`set_parameters(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateExtensionAssociation::set_parameters): <p>The parameter names and values defined in the extensions. Extension parameters marked <code>Required</code> must be entered for this field.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateExtensionAssociation::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateExtensionAssociation::set_tags): <p>Adds one or more tags for the specified extension association. Tags are metadata that help you categorize resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define. </p>
    /// - On success, responds with [`CreateExtensionAssociationOutput`](crate::output::CreateExtensionAssociationOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::CreateExtensionAssociationOutput::id): <p>The system-generated ID for the association.</p>
    ///   - [`extension_arn(Option<String>)`](crate::output::CreateExtensionAssociationOutput::extension_arn): <p>The ARN of the extension defined in the association.</p>
    ///   - [`resource_arn(Option<String>)`](crate::output::CreateExtensionAssociationOutput::resource_arn): <p>The ARNs of applications, configuration profiles, or environments defined in the association.</p>
    ///   - [`arn(Option<String>)`](crate::output::CreateExtensionAssociationOutput::arn): <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    ///   - [`parameters(Option<HashMap<String, String>>)`](crate::output::CreateExtensionAssociationOutput::parameters): <p>The parameter names and values defined in the association.</p>
    ///   - [`extension_version_number(i32)`](crate::output::CreateExtensionAssociationOutput::extension_version_number): <p>The version number for the extension defined in the association.</p>
    /// - On failure, responds with [`SdkError<CreateExtensionAssociationError>`](crate::error::CreateExtensionAssociationError)
    pub fn create_extension_association(
        &self,
    ) -> crate::client::fluent_builders::CreateExtensionAssociation {
        crate::client::fluent_builders::CreateExtensionAssociation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateHostedConfigurationVersion`](crate::client::fluent_builders::CreateHostedConfigurationVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::CreateHostedConfigurationVersion::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::CreateHostedConfigurationVersion::set_application_id): <p>The application ID.</p>
    ///   - [`configuration_profile_id(impl Into<String>)`](crate::client::fluent_builders::CreateHostedConfigurationVersion::configuration_profile_id) / [`set_configuration_profile_id(Option<String>)`](crate::client::fluent_builders::CreateHostedConfigurationVersion::set_configuration_profile_id): <p>The configuration profile ID.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateHostedConfigurationVersion::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateHostedConfigurationVersion::set_description): <p>A description of the configuration.</p>
    ///   - [`content(Blob)`](crate::client::fluent_builders::CreateHostedConfigurationVersion::content) / [`set_content(Option<Blob>)`](crate::client::fluent_builders::CreateHostedConfigurationVersion::set_content): <p>The content of the configuration or the configuration data.</p>
    ///   - [`content_type(impl Into<String>)`](crate::client::fluent_builders::CreateHostedConfigurationVersion::content_type) / [`set_content_type(Option<String>)`](crate::client::fluent_builders::CreateHostedConfigurationVersion::set_content_type): <p>A standard MIME type describing the format of the configuration content. For more information, see <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a>.</p>
    ///   - [`latest_version_number(i32)`](crate::client::fluent_builders::CreateHostedConfigurationVersion::latest_version_number) / [`set_latest_version_number(Option<i32>)`](crate::client::fluent_builders::CreateHostedConfigurationVersion::set_latest_version_number): <p>An optional locking token used to prevent race conditions from overwriting configuration updates when creating a new version. To ensure your data is not overwritten when creating multiple hosted configuration versions in rapid succession, specify the version number of the latest hosted configuration version.</p>
    /// - On success, responds with [`CreateHostedConfigurationVersionOutput`](crate::output::CreateHostedConfigurationVersionOutput) with field(s):
    ///   - [`application_id(Option<String>)`](crate::output::CreateHostedConfigurationVersionOutput::application_id): <p>The application ID.</p>
    ///   - [`configuration_profile_id(Option<String>)`](crate::output::CreateHostedConfigurationVersionOutput::configuration_profile_id): <p>The configuration profile ID.</p>
    ///   - [`version_number(i32)`](crate::output::CreateHostedConfigurationVersionOutput::version_number): <p>The configuration version.</p>
    ///   - [`description(Option<String>)`](crate::output::CreateHostedConfigurationVersionOutput::description): <p>A description of the configuration.</p>
    ///   - [`content(Option<Blob>)`](crate::output::CreateHostedConfigurationVersionOutput::content): <p>The content of the configuration or the configuration data.</p>
    ///   - [`content_type(Option<String>)`](crate::output::CreateHostedConfigurationVersionOutput::content_type): <p>A standard MIME type describing the format of the configuration content. For more information, see <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a>.</p>
    /// - On failure, responds with [`SdkError<CreateHostedConfigurationVersionError>`](crate::error::CreateHostedConfigurationVersionError)
    pub fn create_hosted_configuration_version(
        &self,
    ) -> crate::client::fluent_builders::CreateHostedConfigurationVersion {
        crate::client::fluent_builders::CreateHostedConfigurationVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteApplication`](crate::client::fluent_builders::DeleteApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::DeleteApplication::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::DeleteApplication::set_application_id): <p>The ID of the application to delete.</p>
    /// - On success, responds with [`DeleteApplicationOutput`](crate::output::DeleteApplicationOutput)

    /// - On failure, responds with [`SdkError<DeleteApplicationError>`](crate::error::DeleteApplicationError)
    pub fn delete_application(&self) -> crate::client::fluent_builders::DeleteApplication {
        crate::client::fluent_builders::DeleteApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteConfigurationProfile`](crate::client::fluent_builders::DeleteConfigurationProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::DeleteConfigurationProfile::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::DeleteConfigurationProfile::set_application_id): <p>The application ID that includes the configuration profile you want to delete.</p>
    ///   - [`configuration_profile_id(impl Into<String>)`](crate::client::fluent_builders::DeleteConfigurationProfile::configuration_profile_id) / [`set_configuration_profile_id(Option<String>)`](crate::client::fluent_builders::DeleteConfigurationProfile::set_configuration_profile_id): <p>The ID of the configuration profile you want to delete.</p>
    /// - On success, responds with [`DeleteConfigurationProfileOutput`](crate::output::DeleteConfigurationProfileOutput)

    /// - On failure, responds with [`SdkError<DeleteConfigurationProfileError>`](crate::error::DeleteConfigurationProfileError)
    pub fn delete_configuration_profile(
        &self,
    ) -> crate::client::fluent_builders::DeleteConfigurationProfile {
        crate::client::fluent_builders::DeleteConfigurationProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDeploymentStrategy`](crate::client::fluent_builders::DeleteDeploymentStrategy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`deployment_strategy_id(impl Into<String>)`](crate::client::fluent_builders::DeleteDeploymentStrategy::deployment_strategy_id) / [`set_deployment_strategy_id(Option<String>)`](crate::client::fluent_builders::DeleteDeploymentStrategy::set_deployment_strategy_id): <p>The ID of the deployment strategy you want to delete.</p>
    /// - On success, responds with [`DeleteDeploymentStrategyOutput`](crate::output::DeleteDeploymentStrategyOutput)

    /// - On failure, responds with [`SdkError<DeleteDeploymentStrategyError>`](crate::error::DeleteDeploymentStrategyError)
    pub fn delete_deployment_strategy(
        &self,
    ) -> crate::client::fluent_builders::DeleteDeploymentStrategy {
        crate::client::fluent_builders::DeleteDeploymentStrategy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteEnvironment`](crate::client::fluent_builders::DeleteEnvironment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::DeleteEnvironment::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::DeleteEnvironment::set_application_id): <p>The application ID that includes the environment that you want to delete.</p>
    ///   - [`environment_id(impl Into<String>)`](crate::client::fluent_builders::DeleteEnvironment::environment_id) / [`set_environment_id(Option<String>)`](crate::client::fluent_builders::DeleteEnvironment::set_environment_id): <p>The ID of the environment that you want to delete.</p>
    /// - On success, responds with [`DeleteEnvironmentOutput`](crate::output::DeleteEnvironmentOutput)

    /// - On failure, responds with [`SdkError<DeleteEnvironmentError>`](crate::error::DeleteEnvironmentError)
    pub fn delete_environment(&self) -> crate::client::fluent_builders::DeleteEnvironment {
        crate::client::fluent_builders::DeleteEnvironment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteExtension`](crate::client::fluent_builders::DeleteExtension) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`extension_identifier(impl Into<String>)`](crate::client::fluent_builders::DeleteExtension::extension_identifier) / [`set_extension_identifier(Option<String>)`](crate::client::fluent_builders::DeleteExtension::set_extension_identifier): <p>The name, ID, or Amazon Resource Name (ARN) of the extension you want to delete.</p>
    ///   - [`version_number(i32)`](crate::client::fluent_builders::DeleteExtension::version_number) / [`set_version_number(Option<i32>)`](crate::client::fluent_builders::DeleteExtension::set_version_number): <p>A specific version of an extension to delete. If omitted, the highest version is deleted.</p>
    /// - On success, responds with [`DeleteExtensionOutput`](crate::output::DeleteExtensionOutput)

    /// - On failure, responds with [`SdkError<DeleteExtensionError>`](crate::error::DeleteExtensionError)
    pub fn delete_extension(&self) -> crate::client::fluent_builders::DeleteExtension {
        crate::client::fluent_builders::DeleteExtension::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteExtensionAssociation`](crate::client::fluent_builders::DeleteExtensionAssociation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`extension_association_id(impl Into<String>)`](crate::client::fluent_builders::DeleteExtensionAssociation::extension_association_id) / [`set_extension_association_id(Option<String>)`](crate::client::fluent_builders::DeleteExtensionAssociation::set_extension_association_id): <p>The ID of the extension association to delete.</p>
    /// - On success, responds with [`DeleteExtensionAssociationOutput`](crate::output::DeleteExtensionAssociationOutput)

    /// - On failure, responds with [`SdkError<DeleteExtensionAssociationError>`](crate::error::DeleteExtensionAssociationError)
    pub fn delete_extension_association(
        &self,
    ) -> crate::client::fluent_builders::DeleteExtensionAssociation {
        crate::client::fluent_builders::DeleteExtensionAssociation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteHostedConfigurationVersion`](crate::client::fluent_builders::DeleteHostedConfigurationVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::DeleteHostedConfigurationVersion::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::DeleteHostedConfigurationVersion::set_application_id): <p>The application ID.</p>
    ///   - [`configuration_profile_id(impl Into<String>)`](crate::client::fluent_builders::DeleteHostedConfigurationVersion::configuration_profile_id) / [`set_configuration_profile_id(Option<String>)`](crate::client::fluent_builders::DeleteHostedConfigurationVersion::set_configuration_profile_id): <p>The configuration profile ID.</p>
    ///   - [`version_number(i32)`](crate::client::fluent_builders::DeleteHostedConfigurationVersion::version_number) / [`set_version_number(i32)`](crate::client::fluent_builders::DeleteHostedConfigurationVersion::set_version_number): <p>The versions number to delete.</p>
    /// - On success, responds with [`DeleteHostedConfigurationVersionOutput`](crate::output::DeleteHostedConfigurationVersionOutput)

    /// - On failure, responds with [`SdkError<DeleteHostedConfigurationVersionError>`](crate::error::DeleteHostedConfigurationVersionError)
    pub fn delete_hosted_configuration_version(
        &self,
    ) -> crate::client::fluent_builders::DeleteHostedConfigurationVersion {
        crate::client::fluent_builders::DeleteHostedConfigurationVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetApplication`](crate::client::fluent_builders::GetApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::GetApplication::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::GetApplication::set_application_id): <p>The ID of the application you want to get.</p>
    /// - On success, responds with [`GetApplicationOutput`](crate::output::GetApplicationOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetApplicationOutput::id): <p>The application ID.</p>
    ///   - [`name(Option<String>)`](crate::output::GetApplicationOutput::name): <p>The application name.</p>
    ///   - [`description(Option<String>)`](crate::output::GetApplicationOutput::description): <p>The description of the application.</p>
    /// - On failure, responds with [`SdkError<GetApplicationError>`](crate::error::GetApplicationError)
    pub fn get_application(&self) -> crate::client::fluent_builders::GetApplication {
        crate::client::fluent_builders::GetApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetConfiguration`](crate::client::fluent_builders::GetConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application(impl Into<String>)`](crate::client::fluent_builders::GetConfiguration::application) / [`set_application(Option<String>)`](crate::client::fluent_builders::GetConfiguration::set_application): <p>The application to get. Specify either the application name or the application ID.</p>
    ///   - [`environment(impl Into<String>)`](crate::client::fluent_builders::GetConfiguration::environment) / [`set_environment(Option<String>)`](crate::client::fluent_builders::GetConfiguration::set_environment): <p>The environment to get. Specify either the environment name or the environment ID.</p>
    ///   - [`configuration(impl Into<String>)`](crate::client::fluent_builders::GetConfiguration::configuration) / [`set_configuration(Option<String>)`](crate::client::fluent_builders::GetConfiguration::set_configuration): <p>The configuration to get. Specify either the configuration name or the configuration ID.</p>
    ///   - [`client_id(impl Into<String>)`](crate::client::fluent_builders::GetConfiguration::client_id) / [`set_client_id(Option<String>)`](crate::client::fluent_builders::GetConfiguration::set_client_id): <p>The clientId parameter in the following command is a unique, user-specified ID to identify the client for the configuration. This ID enables AppConfig to deploy the configuration in intervals, as defined in the deployment strategy. </p>
    ///   - [`client_configuration_version(impl Into<String>)`](crate::client::fluent_builders::GetConfiguration::client_configuration_version) / [`set_client_configuration_version(Option<String>)`](crate::client::fluent_builders::GetConfiguration::set_client_configuration_version): <p>The configuration version returned in the most recent <code>GetConfiguration</code> response.</p> <important>   <p>AppConfig uses the value of the <code>ClientConfigurationVersion</code> parameter to identify the configuration version on your clients. If you don’t send <code>ClientConfigurationVersion</code> with each call to <code>GetConfiguration</code>, your clients receive the current configuration. You are charged each time your clients receive a configuration.</p>   <p>To avoid excess charges, we recommend that you include the <code>ClientConfigurationVersion</code> value with every call to <code>GetConfiguration</code>. This value must be saved on your client. Subsequent calls to <code>GetConfiguration</code> must pass this value by using the <code>ClientConfigurationVersion</code> parameter. </p>  </important>  <p>For more information about working with configurations, see <a href="http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration.html">Retrieving the Configuration</a> in the <i>AppConfig User Guide</i>.</p>
    /// - On success, responds with [`GetConfigurationOutput`](crate::output::GetConfigurationOutput) with field(s):
    ///   - [`content(Option<Blob>)`](crate::output::GetConfigurationOutput::content): <p>The content of the configuration or the configuration data.</p> <important>   <p>The <code>Content</code> attribute only contains data if the system finds new or updated configuration data. If there is no new or updated data and <code>ClientConfigurationVersion</code> matches the version of the current configuration, AppConfig returns a <code>204 No Content</code> HTTP response code and the <code>Content</code> value will be empty.</p>  </important>
    ///   - [`configuration_version(Option<String>)`](crate::output::GetConfigurationOutput::configuration_version): <p>The configuration version.</p>
    ///   - [`content_type(Option<String>)`](crate::output::GetConfigurationOutput::content_type): <p>A standard MIME type describing the format of the configuration content. For more information, see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a>.</p>
    /// - On failure, responds with [`SdkError<GetConfigurationError>`](crate::error::GetConfigurationError)
    #[deprecated(
        note = "This API has been deprecated in favor of the GetLatestConfiguration API used in conjunction with StartConfigurationSession."
    )]
    pub fn get_configuration(&self) -> crate::client::fluent_builders::GetConfiguration {
        crate::client::fluent_builders::GetConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetConfigurationProfile`](crate::client::fluent_builders::GetConfigurationProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::GetConfigurationProfile::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::GetConfigurationProfile::set_application_id): <p>The ID of the application that includes the configuration profile you want to get.</p>
    ///   - [`configuration_profile_id(impl Into<String>)`](crate::client::fluent_builders::GetConfigurationProfile::configuration_profile_id) / [`set_configuration_profile_id(Option<String>)`](crate::client::fluent_builders::GetConfigurationProfile::set_configuration_profile_id): <p>The ID of the configuration profile that you want to get.</p>
    /// - On success, responds with [`GetConfigurationProfileOutput`](crate::output::GetConfigurationProfileOutput) with field(s):
    ///   - [`application_id(Option<String>)`](crate::output::GetConfigurationProfileOutput::application_id): <p>The application ID.</p>
    ///   - [`id(Option<String>)`](crate::output::GetConfigurationProfileOutput::id): <p>The configuration profile ID.</p>
    ///   - [`name(Option<String>)`](crate::output::GetConfigurationProfileOutput::name): <p>The name of the configuration profile.</p>
    ///   - [`description(Option<String>)`](crate::output::GetConfigurationProfileOutput::description): <p>The configuration profile description.</p>
    ///   - [`location_uri(Option<String>)`](crate::output::GetConfigurationProfileOutput::location_uri): <p>The URI location of the configuration.</p>
    ///   - [`retrieval_role_arn(Option<String>)`](crate::output::GetConfigurationProfileOutput::retrieval_role_arn): <p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p>
    ///   - [`validators(Option<Vec<Validator>>)`](crate::output::GetConfigurationProfileOutput::validators): <p>A list of methods for validating the configuration.</p>
    ///   - [`r#type(Option<String>)`](crate::output::GetConfigurationProfileOutput::type): <p>The type of configurations contained in the profile. AppConfig supports <code>feature flags</code> and <code>freeform</code> configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for <code>Type</code>:</p>  <p> <code>AWS.AppConfig.FeatureFlags</code> </p>  <p> <code>AWS.Freeform</code> </p>
    /// - On failure, responds with [`SdkError<GetConfigurationProfileError>`](crate::error::GetConfigurationProfileError)
    pub fn get_configuration_profile(
        &self,
    ) -> crate::client::fluent_builders::GetConfigurationProfile {
        crate::client::fluent_builders::GetConfigurationProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDeployment`](crate::client::fluent_builders::GetDeployment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::GetDeployment::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::GetDeployment::set_application_id): <p>The ID of the application that includes the deployment you want to get. </p>
    ///   - [`environment_id(impl Into<String>)`](crate::client::fluent_builders::GetDeployment::environment_id) / [`set_environment_id(Option<String>)`](crate::client::fluent_builders::GetDeployment::set_environment_id): <p>The ID of the environment that includes the deployment you want to get. </p>
    ///   - [`deployment_number(i32)`](crate::client::fluent_builders::GetDeployment::deployment_number) / [`set_deployment_number(Option<i32>)`](crate::client::fluent_builders::GetDeployment::set_deployment_number): <p>The sequence number of the deployment.</p>
    /// - On success, responds with [`GetDeploymentOutput`](crate::output::GetDeploymentOutput) with field(s):
    ///   - [`application_id(Option<String>)`](crate::output::GetDeploymentOutput::application_id): <p>The ID of the application that was deployed.</p>
    ///   - [`environment_id(Option<String>)`](crate::output::GetDeploymentOutput::environment_id): <p>The ID of the environment that was deployed.</p>
    ///   - [`deployment_strategy_id(Option<String>)`](crate::output::GetDeploymentOutput::deployment_strategy_id): <p>The ID of the deployment strategy that was deployed.</p>
    ///   - [`configuration_profile_id(Option<String>)`](crate::output::GetDeploymentOutput::configuration_profile_id): <p>The ID of the configuration profile that was deployed.</p>
    ///   - [`deployment_number(i32)`](crate::output::GetDeploymentOutput::deployment_number): <p>The sequence number of the deployment.</p>
    ///   - [`configuration_name(Option<String>)`](crate::output::GetDeploymentOutput::configuration_name): <p>The name of the configuration.</p>
    ///   - [`configuration_location_uri(Option<String>)`](crate::output::GetDeploymentOutput::configuration_location_uri): <p>Information about the source location of the configuration.</p>
    ///   - [`configuration_version(Option<String>)`](crate::output::GetDeploymentOutput::configuration_version): <p>The configuration version that was deployed.</p>
    ///   - [`description(Option<String>)`](crate::output::GetDeploymentOutput::description): <p>The description of the deployment.</p>
    ///   - [`deployment_duration_in_minutes(i32)`](crate::output::GetDeploymentOutput::deployment_duration_in_minutes): <p>Total amount of time the deployment lasted.</p>
    ///   - [`growth_type(Option<GrowthType>)`](crate::output::GetDeploymentOutput::growth_type): <p>The algorithm used to define how percentage grew over time.</p>
    ///   - [`growth_factor(f32)`](crate::output::GetDeploymentOutput::growth_factor): <p>The percentage of targets to receive a deployed configuration during each interval.</p>
    ///   - [`final_bake_time_in_minutes(i32)`](crate::output::GetDeploymentOutput::final_bake_time_in_minutes): <p>The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.</p>
    ///   - [`state(Option<DeploymentState>)`](crate::output::GetDeploymentOutput::state): <p>The state of the deployment.</p>
    ///   - [`event_log(Option<Vec<DeploymentEvent>>)`](crate::output::GetDeploymentOutput::event_log): <p>A list containing all events related to a deployment. The most recent events are displayed first.</p>
    ///   - [`percentage_complete(f32)`](crate::output::GetDeploymentOutput::percentage_complete): <p>The percentage of targets for which the deployment is available.</p>
    ///   - [`started_at(Option<DateTime>)`](crate::output::GetDeploymentOutput::started_at): <p>The time the deployment started.</p>
    ///   - [`completed_at(Option<DateTime>)`](crate::output::GetDeploymentOutput::completed_at): <p>The time the deployment completed. </p>
    ///   - [`applied_extensions(Option<Vec<AppliedExtension>>)`](crate::output::GetDeploymentOutput::applied_extensions): <p>A list of extensions that were processed as part of the deployment. The extensions that were previously associated to the configuration profile, environment, or the application when <code>StartDeployment</code> was called.</p>
    /// - On failure, responds with [`SdkError<GetDeploymentError>`](crate::error::GetDeploymentError)
    pub fn get_deployment(&self) -> crate::client::fluent_builders::GetDeployment {
        crate::client::fluent_builders::GetDeployment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDeploymentStrategy`](crate::client::fluent_builders::GetDeploymentStrategy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`deployment_strategy_id(impl Into<String>)`](crate::client::fluent_builders::GetDeploymentStrategy::deployment_strategy_id) / [`set_deployment_strategy_id(Option<String>)`](crate::client::fluent_builders::GetDeploymentStrategy::set_deployment_strategy_id): <p>The ID of the deployment strategy to get.</p>
    /// - On success, responds with [`GetDeploymentStrategyOutput`](crate::output::GetDeploymentStrategyOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetDeploymentStrategyOutput::id): <p>The deployment strategy ID.</p>
    ///   - [`name(Option<String>)`](crate::output::GetDeploymentStrategyOutput::name): <p>The name of the deployment strategy.</p>
    ///   - [`description(Option<String>)`](crate::output::GetDeploymentStrategyOutput::description): <p>The description of the deployment strategy.</p>
    ///   - [`deployment_duration_in_minutes(i32)`](crate::output::GetDeploymentStrategyOutput::deployment_duration_in_minutes): <p>Total amount of time the deployment lasted.</p>
    ///   - [`growth_type(Option<GrowthType>)`](crate::output::GetDeploymentStrategyOutput::growth_type): <p>The algorithm used to define how percentage grew over time.</p>
    ///   - [`growth_factor(f32)`](crate::output::GetDeploymentStrategyOutput::growth_factor): <p>The percentage of targets that received a deployed configuration during each interval.</p>
    ///   - [`final_bake_time_in_minutes(i32)`](crate::output::GetDeploymentStrategyOutput::final_bake_time_in_minutes): <p>The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.</p>
    ///   - [`replicate_to(Option<ReplicateTo>)`](crate::output::GetDeploymentStrategyOutput::replicate_to): <p>Save the deployment strategy to a Systems Manager (SSM) document.</p>
    /// - On failure, responds with [`SdkError<GetDeploymentStrategyError>`](crate::error::GetDeploymentStrategyError)
    pub fn get_deployment_strategy(&self) -> crate::client::fluent_builders::GetDeploymentStrategy {
        crate::client::fluent_builders::GetDeploymentStrategy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetEnvironment`](crate::client::fluent_builders::GetEnvironment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::GetEnvironment::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::GetEnvironment::set_application_id): <p>The ID of the application that includes the environment you want to get.</p>
    ///   - [`environment_id(impl Into<String>)`](crate::client::fluent_builders::GetEnvironment::environment_id) / [`set_environment_id(Option<String>)`](crate::client::fluent_builders::GetEnvironment::set_environment_id): <p>The ID of the environment that you want to get.</p>
    /// - On success, responds with [`GetEnvironmentOutput`](crate::output::GetEnvironmentOutput) with field(s):
    ///   - [`application_id(Option<String>)`](crate::output::GetEnvironmentOutput::application_id): <p>The application ID.</p>
    ///   - [`id(Option<String>)`](crate::output::GetEnvironmentOutput::id): <p>The environment ID.</p>
    ///   - [`name(Option<String>)`](crate::output::GetEnvironmentOutput::name): <p>The name of the environment.</p>
    ///   - [`description(Option<String>)`](crate::output::GetEnvironmentOutput::description): <p>The description of the environment.</p>
    ///   - [`state(Option<EnvironmentState>)`](crate::output::GetEnvironmentOutput::state): <p>The state of the environment. An environment can be in one of the following states: <code>READY_FOR_DEPLOYMENT</code>, <code>DEPLOYING</code>, <code>ROLLING_BACK</code>, or <code>ROLLED_BACK</code> </p>
    ///   - [`monitors(Option<Vec<Monitor>>)`](crate::output::GetEnvironmentOutput::monitors): <p>Amazon CloudWatch alarms monitored during the deployment.</p>
    /// - On failure, responds with [`SdkError<GetEnvironmentError>`](crate::error::GetEnvironmentError)
    pub fn get_environment(&self) -> crate::client::fluent_builders::GetEnvironment {
        crate::client::fluent_builders::GetEnvironment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetExtension`](crate::client::fluent_builders::GetExtension) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`extension_identifier(impl Into<String>)`](crate::client::fluent_builders::GetExtension::extension_identifier) / [`set_extension_identifier(Option<String>)`](crate::client::fluent_builders::GetExtension::set_extension_identifier): <p>The name, the ID, or the Amazon Resource Name (ARN) of the extension.</p>
    ///   - [`version_number(i32)`](crate::client::fluent_builders::GetExtension::version_number) / [`set_version_number(Option<i32>)`](crate::client::fluent_builders::GetExtension::set_version_number): <p>The extension version number. If no version number was defined, AppConfig uses the highest version.</p>
    /// - On success, responds with [`GetExtensionOutput`](crate::output::GetExtensionOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetExtensionOutput::id): <p>The system-generated ID of the extension.</p>
    ///   - [`name(Option<String>)`](crate::output::GetExtensionOutput::name): <p>The extension name.</p>
    ///   - [`version_number(i32)`](crate::output::GetExtensionOutput::version_number): <p>The extension version number.</p>
    ///   - [`arn(Option<String>)`](crate::output::GetExtensionOutput::arn): <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    ///   - [`description(Option<String>)`](crate::output::GetExtensionOutput::description): <p>Information about the extension.</p>
    ///   - [`actions(Option<HashMap<ActionPoint, Vec<Action>>>)`](crate::output::GetExtensionOutput::actions): <p>The actions defined in the extension.</p>
    ///   - [`parameters(Option<HashMap<String, Parameter>>)`](crate::output::GetExtensionOutput::parameters): <p>The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the <code>CreateExtensionAssociation</code> API action. For Lambda extension actions, these parameters are included in the Lambda request object.</p>
    /// - On failure, responds with [`SdkError<GetExtensionError>`](crate::error::GetExtensionError)
    pub fn get_extension(&self) -> crate::client::fluent_builders::GetExtension {
        crate::client::fluent_builders::GetExtension::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetExtensionAssociation`](crate::client::fluent_builders::GetExtensionAssociation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`extension_association_id(impl Into<String>)`](crate::client::fluent_builders::GetExtensionAssociation::extension_association_id) / [`set_extension_association_id(Option<String>)`](crate::client::fluent_builders::GetExtensionAssociation::set_extension_association_id): <p>The extension association ID to get.</p>
    /// - On success, responds with [`GetExtensionAssociationOutput`](crate::output::GetExtensionAssociationOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::GetExtensionAssociationOutput::id): <p>The system-generated ID for the association.</p>
    ///   - [`extension_arn(Option<String>)`](crate::output::GetExtensionAssociationOutput::extension_arn): <p>The ARN of the extension defined in the association.</p>
    ///   - [`resource_arn(Option<String>)`](crate::output::GetExtensionAssociationOutput::resource_arn): <p>The ARNs of applications, configuration profiles, or environments defined in the association.</p>
    ///   - [`arn(Option<String>)`](crate::output::GetExtensionAssociationOutput::arn): <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    ///   - [`parameters(Option<HashMap<String, String>>)`](crate::output::GetExtensionAssociationOutput::parameters): <p>The parameter names and values defined in the association.</p>
    ///   - [`extension_version_number(i32)`](crate::output::GetExtensionAssociationOutput::extension_version_number): <p>The version number for the extension defined in the association.</p>
    /// - On failure, responds with [`SdkError<GetExtensionAssociationError>`](crate::error::GetExtensionAssociationError)
    pub fn get_extension_association(
        &self,
    ) -> crate::client::fluent_builders::GetExtensionAssociation {
        crate::client::fluent_builders::GetExtensionAssociation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetHostedConfigurationVersion`](crate::client::fluent_builders::GetHostedConfigurationVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::GetHostedConfigurationVersion::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::GetHostedConfigurationVersion::set_application_id): <p>The application ID.</p>
    ///   - [`configuration_profile_id(impl Into<String>)`](crate::client::fluent_builders::GetHostedConfigurationVersion::configuration_profile_id) / [`set_configuration_profile_id(Option<String>)`](crate::client::fluent_builders::GetHostedConfigurationVersion::set_configuration_profile_id): <p>The configuration profile ID.</p>
    ///   - [`version_number(i32)`](crate::client::fluent_builders::GetHostedConfigurationVersion::version_number) / [`set_version_number(i32)`](crate::client::fluent_builders::GetHostedConfigurationVersion::set_version_number): <p>The version.</p>
    /// - On success, responds with [`GetHostedConfigurationVersionOutput`](crate::output::GetHostedConfigurationVersionOutput) with field(s):
    ///   - [`application_id(Option<String>)`](crate::output::GetHostedConfigurationVersionOutput::application_id): <p>The application ID.</p>
    ///   - [`configuration_profile_id(Option<String>)`](crate::output::GetHostedConfigurationVersionOutput::configuration_profile_id): <p>The configuration profile ID.</p>
    ///   - [`version_number(i32)`](crate::output::GetHostedConfigurationVersionOutput::version_number): <p>The configuration version.</p>
    ///   - [`description(Option<String>)`](crate::output::GetHostedConfigurationVersionOutput::description): <p>A description of the configuration.</p>
    ///   - [`content(Option<Blob>)`](crate::output::GetHostedConfigurationVersionOutput::content): <p>The content of the configuration or the configuration data.</p>
    ///   - [`content_type(Option<String>)`](crate::output::GetHostedConfigurationVersionOutput::content_type): <p>A standard MIME type describing the format of the configuration content. For more information, see <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a>.</p>
    /// - On failure, responds with [`SdkError<GetHostedConfigurationVersionError>`](crate::error::GetHostedConfigurationVersionError)
    pub fn get_hosted_configuration_version(
        &self,
    ) -> crate::client::fluent_builders::GetHostedConfigurationVersion {
        crate::client::fluent_builders::GetHostedConfigurationVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListApplications`](crate::client::fluent_builders::ListApplications) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListApplications::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListApplications::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListApplications::set_max_results): <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListApplications::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListApplications::set_next_token): <p>A token to start the list. Next token is a pagination token generated by AppConfig to describe what page the previous List call ended on. For the first List request, the nextToken should not be set. On subsequent calls, the nextToken parameter should be set to the previous responses nextToken value. Use this token to get the next set of results. </p>
    /// - On success, responds with [`ListApplicationsOutput`](crate::output::ListApplicationsOutput) with field(s):
    ///   - [`items(Option<Vec<Application>>)`](crate::output::ListApplicationsOutput::items): <p>The elements from this collection.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListApplicationsOutput::next_token): <p>The token for the next set of items to return. Use this token to get the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListApplicationsError>`](crate::error::ListApplicationsError)
    pub fn list_applications(&self) -> crate::client::fluent_builders::ListApplications {
        crate::client::fluent_builders::ListApplications::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListConfigurationProfiles`](crate::client::fluent_builders::ListConfigurationProfiles) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListConfigurationProfiles::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::ListConfigurationProfiles::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::ListConfigurationProfiles::set_application_id): <p>The application ID.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListConfigurationProfiles::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListConfigurationProfiles::set_max_results): <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListConfigurationProfiles::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListConfigurationProfiles::set_next_token): <p>A token to start the list. Use this token to get the next set of results.</p>
    ///   - [`r#type(impl Into<String>)`](crate::client::fluent_builders::ListConfigurationProfiles::type) / [`set_type(Option<String>)`](crate::client::fluent_builders::ListConfigurationProfiles::set_type): <p>A filter based on the type of configurations that the configuration profile contains. A configuration can be a feature flag or a freeform configuration.</p>
    /// - On success, responds with [`ListConfigurationProfilesOutput`](crate::output::ListConfigurationProfilesOutput) with field(s):
    ///   - [`items(Option<Vec<ConfigurationProfileSummary>>)`](crate::output::ListConfigurationProfilesOutput::items): <p>The elements from this collection.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListConfigurationProfilesOutput::next_token): <p>The token for the next set of items to return. Use this token to get the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListConfigurationProfilesError>`](crate::error::ListConfigurationProfilesError)
    pub fn list_configuration_profiles(
        &self,
    ) -> crate::client::fluent_builders::ListConfigurationProfiles {
        crate::client::fluent_builders::ListConfigurationProfiles::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDeployments`](crate::client::fluent_builders::ListDeployments) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDeployments::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::ListDeployments::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::ListDeployments::set_application_id): <p>The application ID.</p>
    ///   - [`environment_id(impl Into<String>)`](crate::client::fluent_builders::ListDeployments::environment_id) / [`set_environment_id(Option<String>)`](crate::client::fluent_builders::ListDeployments::set_environment_id): <p>The environment ID.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDeployments::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDeployments::set_max_results): <p>The maximum number of items that may be returned for this call. If there are items that have not yet been returned, the response will include a non-null <code>NextToken</code> that you can provide in a subsequent call to get the next set of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDeployments::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDeployments::set_next_token): <p>The token returned by a prior call to this operation indicating the next set of results to be returned. If not specified, the operation will return the first set of results.</p>
    /// - On success, responds with [`ListDeploymentsOutput`](crate::output::ListDeploymentsOutput) with field(s):
    ///   - [`items(Option<Vec<DeploymentSummary>>)`](crate::output::ListDeploymentsOutput::items): <p>The elements from this collection.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDeploymentsOutput::next_token): <p>The token for the next set of items to return. Use this token to get the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListDeploymentsError>`](crate::error::ListDeploymentsError)
    pub fn list_deployments(&self) -> crate::client::fluent_builders::ListDeployments {
        crate::client::fluent_builders::ListDeployments::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDeploymentStrategies`](crate::client::fluent_builders::ListDeploymentStrategies) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDeploymentStrategies::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDeploymentStrategies::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDeploymentStrategies::set_max_results): <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDeploymentStrategies::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDeploymentStrategies::set_next_token): <p>A token to start the list. Use this token to get the next set of results.</p>
    /// - On success, responds with [`ListDeploymentStrategiesOutput`](crate::output::ListDeploymentStrategiesOutput) with field(s):
    ///   - [`items(Option<Vec<DeploymentStrategy>>)`](crate::output::ListDeploymentStrategiesOutput::items): <p>The elements from this collection.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDeploymentStrategiesOutput::next_token): <p>The token for the next set of items to return. Use this token to get the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListDeploymentStrategiesError>`](crate::error::ListDeploymentStrategiesError)
    pub fn list_deployment_strategies(
        &self,
    ) -> crate::client::fluent_builders::ListDeploymentStrategies {
        crate::client::fluent_builders::ListDeploymentStrategies::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListEnvironments`](crate::client::fluent_builders::ListEnvironments) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListEnvironments::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::ListEnvironments::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::ListEnvironments::set_application_id): <p>The application ID.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListEnvironments::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListEnvironments::set_max_results): <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListEnvironments::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListEnvironments::set_next_token): <p>A token to start the list. Use this token to get the next set of results.</p>
    /// - On success, responds with [`ListEnvironmentsOutput`](crate::output::ListEnvironmentsOutput) with field(s):
    ///   - [`items(Option<Vec<Environment>>)`](crate::output::ListEnvironmentsOutput::items): <p>The elements from this collection.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListEnvironmentsOutput::next_token): <p>The token for the next set of items to return. Use this token to get the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListEnvironmentsError>`](crate::error::ListEnvironmentsError)
    pub fn list_environments(&self) -> crate::client::fluent_builders::ListEnvironments {
        crate::client::fluent_builders::ListEnvironments::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListExtensionAssociations`](crate::client::fluent_builders::ListExtensionAssociations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListExtensionAssociations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_identifier(impl Into<String>)`](crate::client::fluent_builders::ListExtensionAssociations::resource_identifier) / [`set_resource_identifier(Option<String>)`](crate::client::fluent_builders::ListExtensionAssociations::set_resource_identifier): <p>The ARN of an application, configuration profile, or environment.</p>
    ///   - [`extension_identifier(impl Into<String>)`](crate::client::fluent_builders::ListExtensionAssociations::extension_identifier) / [`set_extension_identifier(Option<String>)`](crate::client::fluent_builders::ListExtensionAssociations::set_extension_identifier): <p>The name, the ID, or the Amazon Resource Name (ARN) of the extension.</p>
    ///   - [`extension_version_number(i32)`](crate::client::fluent_builders::ListExtensionAssociations::extension_version_number) / [`set_extension_version_number(Option<i32>)`](crate::client::fluent_builders::ListExtensionAssociations::set_extension_version_number): <p>The version number for the extension defined in the association.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListExtensionAssociations::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListExtensionAssociations::set_max_results): <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListExtensionAssociations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListExtensionAssociations::set_next_token): <p>A token to start the list. Use this token to get the next set of results or pass null to get the first set of results. </p>
    /// - On success, responds with [`ListExtensionAssociationsOutput`](crate::output::ListExtensionAssociationsOutput) with field(s):
    ///   - [`items(Option<Vec<ExtensionAssociationSummary>>)`](crate::output::ListExtensionAssociationsOutput::items): <p>The list of extension associations. Each item represents an extension association to an application, environment, or configuration profile. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListExtensionAssociationsOutput::next_token): <p>The token for the next set of items to return. Use this token to get the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListExtensionAssociationsError>`](crate::error::ListExtensionAssociationsError)
    pub fn list_extension_associations(
        &self,
    ) -> crate::client::fluent_builders::ListExtensionAssociations {
        crate::client::fluent_builders::ListExtensionAssociations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListExtensions`](crate::client::fluent_builders::ListExtensions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListExtensions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListExtensions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListExtensions::set_max_results): <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListExtensions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListExtensions::set_next_token): <p>A token to start the list. Use this token to get the next set of results. </p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ListExtensions::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ListExtensions::set_name): <p>The extension name.</p>
    /// - On success, responds with [`ListExtensionsOutput`](crate::output::ListExtensionsOutput) with field(s):
    ///   - [`items(Option<Vec<ExtensionSummary>>)`](crate::output::ListExtensionsOutput::items): <p>The list of available extensions. The list includes Amazon Web Services-authored and user-created extensions.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListExtensionsOutput::next_token): <p>The token for the next set of items to return. Use this token to get the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListExtensionsError>`](crate::error::ListExtensionsError)
    pub fn list_extensions(&self) -> crate::client::fluent_builders::ListExtensions {
        crate::client::fluent_builders::ListExtensions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListHostedConfigurationVersions`](crate::client::fluent_builders::ListHostedConfigurationVersions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListHostedConfigurationVersions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::ListHostedConfigurationVersions::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::ListHostedConfigurationVersions::set_application_id): <p>The application ID.</p>
    ///   - [`configuration_profile_id(impl Into<String>)`](crate::client::fluent_builders::ListHostedConfigurationVersions::configuration_profile_id) / [`set_configuration_profile_id(Option<String>)`](crate::client::fluent_builders::ListHostedConfigurationVersions::set_configuration_profile_id): <p>The configuration profile ID.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListHostedConfigurationVersions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListHostedConfigurationVersions::set_max_results): <p>The maximum number of items to return for this call. The call also returns a token that you can specify in a subsequent call to get the next set of results.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListHostedConfigurationVersions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListHostedConfigurationVersions::set_next_token): <p>A token to start the list. Use this token to get the next set of results. </p>
    /// - On success, responds with [`ListHostedConfigurationVersionsOutput`](crate::output::ListHostedConfigurationVersionsOutput) with field(s):
    ///   - [`items(Option<Vec<HostedConfigurationVersionSummary>>)`](crate::output::ListHostedConfigurationVersionsOutput::items): <p>The elements from this collection.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListHostedConfigurationVersionsOutput::next_token): <p>The token for the next set of items to return. Use this token to get the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListHostedConfigurationVersionsError>`](crate::error::ListHostedConfigurationVersionsError)
    pub fn list_hosted_configuration_versions(
        &self,
    ) -> crate::client::fluent_builders::ListHostedConfigurationVersions {
        crate::client::fluent_builders::ListHostedConfigurationVersions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The resource ARN.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>Metadata to assign to AppConfig resources. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartDeployment`](crate::client::fluent_builders::StartDeployment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::StartDeployment::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::StartDeployment::set_application_id): <p>The application ID.</p>
    ///   - [`environment_id(impl Into<String>)`](crate::client::fluent_builders::StartDeployment::environment_id) / [`set_environment_id(Option<String>)`](crate::client::fluent_builders::StartDeployment::set_environment_id): <p>The environment ID.</p>
    ///   - [`deployment_strategy_id(impl Into<String>)`](crate::client::fluent_builders::StartDeployment::deployment_strategy_id) / [`set_deployment_strategy_id(Option<String>)`](crate::client::fluent_builders::StartDeployment::set_deployment_strategy_id): <p>The deployment strategy ID.</p>
    ///   - [`configuration_profile_id(impl Into<String>)`](crate::client::fluent_builders::StartDeployment::configuration_profile_id) / [`set_configuration_profile_id(Option<String>)`](crate::client::fluent_builders::StartDeployment::set_configuration_profile_id): <p>The configuration profile ID.</p>
    ///   - [`configuration_version(impl Into<String>)`](crate::client::fluent_builders::StartDeployment::configuration_version) / [`set_configuration_version(Option<String>)`](crate::client::fluent_builders::StartDeployment::set_configuration_version): <p>The configuration version to deploy.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::StartDeployment::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::StartDeployment::set_description): <p>A description of the deployment.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::StartDeployment::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::StartDeployment::set_tags): <p>Metadata to assign to the deployment. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.</p>
    /// - On success, responds with [`StartDeploymentOutput`](crate::output::StartDeploymentOutput) with field(s):
    ///   - [`application_id(Option<String>)`](crate::output::StartDeploymentOutput::application_id): <p>The ID of the application that was deployed.</p>
    ///   - [`environment_id(Option<String>)`](crate::output::StartDeploymentOutput::environment_id): <p>The ID of the environment that was deployed.</p>
    ///   - [`deployment_strategy_id(Option<String>)`](crate::output::StartDeploymentOutput::deployment_strategy_id): <p>The ID of the deployment strategy that was deployed.</p>
    ///   - [`configuration_profile_id(Option<String>)`](crate::output::StartDeploymentOutput::configuration_profile_id): <p>The ID of the configuration profile that was deployed.</p>
    ///   - [`deployment_number(i32)`](crate::output::StartDeploymentOutput::deployment_number): <p>The sequence number of the deployment.</p>
    ///   - [`configuration_name(Option<String>)`](crate::output::StartDeploymentOutput::configuration_name): <p>The name of the configuration.</p>
    ///   - [`configuration_location_uri(Option<String>)`](crate::output::StartDeploymentOutput::configuration_location_uri): <p>Information about the source location of the configuration.</p>
    ///   - [`configuration_version(Option<String>)`](crate::output::StartDeploymentOutput::configuration_version): <p>The configuration version that was deployed.</p>
    ///   - [`description(Option<String>)`](crate::output::StartDeploymentOutput::description): <p>The description of the deployment.</p>
    ///   - [`deployment_duration_in_minutes(i32)`](crate::output::StartDeploymentOutput::deployment_duration_in_minutes): <p>Total amount of time the deployment lasted.</p>
    ///   - [`growth_type(Option<GrowthType>)`](crate::output::StartDeploymentOutput::growth_type): <p>The algorithm used to define how percentage grew over time.</p>
    ///   - [`growth_factor(f32)`](crate::output::StartDeploymentOutput::growth_factor): <p>The percentage of targets to receive a deployed configuration during each interval.</p>
    ///   - [`final_bake_time_in_minutes(i32)`](crate::output::StartDeploymentOutput::final_bake_time_in_minutes): <p>The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.</p>
    ///   - [`state(Option<DeploymentState>)`](crate::output::StartDeploymentOutput::state): <p>The state of the deployment.</p>
    ///   - [`event_log(Option<Vec<DeploymentEvent>>)`](crate::output::StartDeploymentOutput::event_log): <p>A list containing all events related to a deployment. The most recent events are displayed first.</p>
    ///   - [`percentage_complete(f32)`](crate::output::StartDeploymentOutput::percentage_complete): <p>The percentage of targets for which the deployment is available.</p>
    ///   - [`started_at(Option<DateTime>)`](crate::output::StartDeploymentOutput::started_at): <p>The time the deployment started.</p>
    ///   - [`completed_at(Option<DateTime>)`](crate::output::StartDeploymentOutput::completed_at): <p>The time the deployment completed. </p>
    ///   - [`applied_extensions(Option<Vec<AppliedExtension>>)`](crate::output::StartDeploymentOutput::applied_extensions): <p>A list of extensions that were processed as part of the deployment. The extensions that were previously associated to the configuration profile, environment, or the application when <code>StartDeployment</code> was called.</p>
    /// - On failure, responds with [`SdkError<StartDeploymentError>`](crate::error::StartDeploymentError)
    pub fn start_deployment(&self) -> crate::client::fluent_builders::StartDeployment {
        crate::client::fluent_builders::StartDeployment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopDeployment`](crate::client::fluent_builders::StopDeployment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::StopDeployment::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::StopDeployment::set_application_id): <p>The application ID.</p>
    ///   - [`environment_id(impl Into<String>)`](crate::client::fluent_builders::StopDeployment::environment_id) / [`set_environment_id(Option<String>)`](crate::client::fluent_builders::StopDeployment::set_environment_id): <p>The environment ID.</p>
    ///   - [`deployment_number(i32)`](crate::client::fluent_builders::StopDeployment::deployment_number) / [`set_deployment_number(Option<i32>)`](crate::client::fluent_builders::StopDeployment::set_deployment_number): <p>The sequence number of the deployment.</p>
    /// - On success, responds with [`StopDeploymentOutput`](crate::output::StopDeploymentOutput) with field(s):
    ///   - [`application_id(Option<String>)`](crate::output::StopDeploymentOutput::application_id): <p>The ID of the application that was deployed.</p>
    ///   - [`environment_id(Option<String>)`](crate::output::StopDeploymentOutput::environment_id): <p>The ID of the environment that was deployed.</p>
    ///   - [`deployment_strategy_id(Option<String>)`](crate::output::StopDeploymentOutput::deployment_strategy_id): <p>The ID of the deployment strategy that was deployed.</p>
    ///   - [`configuration_profile_id(Option<String>)`](crate::output::StopDeploymentOutput::configuration_profile_id): <p>The ID of the configuration profile that was deployed.</p>
    ///   - [`deployment_number(i32)`](crate::output::StopDeploymentOutput::deployment_number): <p>The sequence number of the deployment.</p>
    ///   - [`configuration_name(Option<String>)`](crate::output::StopDeploymentOutput::configuration_name): <p>The name of the configuration.</p>
    ///   - [`configuration_location_uri(Option<String>)`](crate::output::StopDeploymentOutput::configuration_location_uri): <p>Information about the source location of the configuration.</p>
    ///   - [`configuration_version(Option<String>)`](crate::output::StopDeploymentOutput::configuration_version): <p>The configuration version that was deployed.</p>
    ///   - [`description(Option<String>)`](crate::output::StopDeploymentOutput::description): <p>The description of the deployment.</p>
    ///   - [`deployment_duration_in_minutes(i32)`](crate::output::StopDeploymentOutput::deployment_duration_in_minutes): <p>Total amount of time the deployment lasted.</p>
    ///   - [`growth_type(Option<GrowthType>)`](crate::output::StopDeploymentOutput::growth_type): <p>The algorithm used to define how percentage grew over time.</p>
    ///   - [`growth_factor(f32)`](crate::output::StopDeploymentOutput::growth_factor): <p>The percentage of targets to receive a deployed configuration during each interval.</p>
    ///   - [`final_bake_time_in_minutes(i32)`](crate::output::StopDeploymentOutput::final_bake_time_in_minutes): <p>The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.</p>
    ///   - [`state(Option<DeploymentState>)`](crate::output::StopDeploymentOutput::state): <p>The state of the deployment.</p>
    ///   - [`event_log(Option<Vec<DeploymentEvent>>)`](crate::output::StopDeploymentOutput::event_log): <p>A list containing all events related to a deployment. The most recent events are displayed first.</p>
    ///   - [`percentage_complete(f32)`](crate::output::StopDeploymentOutput::percentage_complete): <p>The percentage of targets for which the deployment is available.</p>
    ///   - [`started_at(Option<DateTime>)`](crate::output::StopDeploymentOutput::started_at): <p>The time the deployment started.</p>
    ///   - [`completed_at(Option<DateTime>)`](crate::output::StopDeploymentOutput::completed_at): <p>The time the deployment completed. </p>
    ///   - [`applied_extensions(Option<Vec<AppliedExtension>>)`](crate::output::StopDeploymentOutput::applied_extensions): <p>A list of extensions that were processed as part of the deployment. The extensions that were previously associated to the configuration profile, environment, or the application when <code>StartDeployment</code> was called.</p>
    /// - On failure, responds with [`SdkError<StopDeploymentError>`](crate::error::StopDeploymentError)
    pub fn stop_deployment(&self) -> crate::client::fluent_builders::StopDeployment {
        crate::client::fluent_builders::StopDeployment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The ARN of the resource for which to retrieve tags.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The key-value string map. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The ARN of the resource for which to remove tags.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The tag keys to delete.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateApplication`](crate::client::fluent_builders::UpdateApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::UpdateApplication::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::UpdateApplication::set_application_id): <p>The application ID.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateApplication::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateApplication::set_name): <p>The name of the application.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateApplication::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateApplication::set_description): <p>A description of the application.</p>
    /// - On success, responds with [`UpdateApplicationOutput`](crate::output::UpdateApplicationOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::UpdateApplicationOutput::id): <p>The application ID.</p>
    ///   - [`name(Option<String>)`](crate::output::UpdateApplicationOutput::name): <p>The application name.</p>
    ///   - [`description(Option<String>)`](crate::output::UpdateApplicationOutput::description): <p>The description of the application.</p>
    /// - On failure, responds with [`SdkError<UpdateApplicationError>`](crate::error::UpdateApplicationError)
    pub fn update_application(&self) -> crate::client::fluent_builders::UpdateApplication {
        crate::client::fluent_builders::UpdateApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateConfigurationProfile`](crate::client::fluent_builders::UpdateConfigurationProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::UpdateConfigurationProfile::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::UpdateConfigurationProfile::set_application_id): <p>The application ID.</p>
    ///   - [`configuration_profile_id(impl Into<String>)`](crate::client::fluent_builders::UpdateConfigurationProfile::configuration_profile_id) / [`set_configuration_profile_id(Option<String>)`](crate::client::fluent_builders::UpdateConfigurationProfile::set_configuration_profile_id): <p>The ID of the configuration profile.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateConfigurationProfile::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateConfigurationProfile::set_name): <p>The name of the configuration profile.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateConfigurationProfile::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateConfigurationProfile::set_description): <p>A description of the configuration profile.</p>
    ///   - [`retrieval_role_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateConfigurationProfile::retrieval_role_arn) / [`set_retrieval_role_arn(Option<String>)`](crate::client::fluent_builders::UpdateConfigurationProfile::set_retrieval_role_arn): <p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p>
    ///   - [`validators(Vec<Validator>)`](crate::client::fluent_builders::UpdateConfigurationProfile::validators) / [`set_validators(Option<Vec<Validator>>)`](crate::client::fluent_builders::UpdateConfigurationProfile::set_validators): <p>A list of methods for validating the configuration.</p>
    /// - On success, responds with [`UpdateConfigurationProfileOutput`](crate::output::UpdateConfigurationProfileOutput) with field(s):
    ///   - [`application_id(Option<String>)`](crate::output::UpdateConfigurationProfileOutput::application_id): <p>The application ID.</p>
    ///   - [`id(Option<String>)`](crate::output::UpdateConfigurationProfileOutput::id): <p>The configuration profile ID.</p>
    ///   - [`name(Option<String>)`](crate::output::UpdateConfigurationProfileOutput::name): <p>The name of the configuration profile.</p>
    ///   - [`description(Option<String>)`](crate::output::UpdateConfigurationProfileOutput::description): <p>The configuration profile description.</p>
    ///   - [`location_uri(Option<String>)`](crate::output::UpdateConfigurationProfileOutput::location_uri): <p>The URI location of the configuration.</p>
    ///   - [`retrieval_role_arn(Option<String>)`](crate::output::UpdateConfigurationProfileOutput::retrieval_role_arn): <p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p>
    ///   - [`validators(Option<Vec<Validator>>)`](crate::output::UpdateConfigurationProfileOutput::validators): <p>A list of methods for validating the configuration.</p>
    ///   - [`r#type(Option<String>)`](crate::output::UpdateConfigurationProfileOutput::type): <p>The type of configurations contained in the profile. AppConfig supports <code>feature flags</code> and <code>freeform</code> configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for <code>Type</code>:</p>  <p> <code>AWS.AppConfig.FeatureFlags</code> </p>  <p> <code>AWS.Freeform</code> </p>
    /// - On failure, responds with [`SdkError<UpdateConfigurationProfileError>`](crate::error::UpdateConfigurationProfileError)
    pub fn update_configuration_profile(
        &self,
    ) -> crate::client::fluent_builders::UpdateConfigurationProfile {
        crate::client::fluent_builders::UpdateConfigurationProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateDeploymentStrategy`](crate::client::fluent_builders::UpdateDeploymentStrategy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`deployment_strategy_id(impl Into<String>)`](crate::client::fluent_builders::UpdateDeploymentStrategy::deployment_strategy_id) / [`set_deployment_strategy_id(Option<String>)`](crate::client::fluent_builders::UpdateDeploymentStrategy::set_deployment_strategy_id): <p>The deployment strategy ID.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateDeploymentStrategy::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateDeploymentStrategy::set_description): <p>A description of the deployment strategy.</p>
    ///   - [`deployment_duration_in_minutes(i32)`](crate::client::fluent_builders::UpdateDeploymentStrategy::deployment_duration_in_minutes) / [`set_deployment_duration_in_minutes(Option<i32>)`](crate::client::fluent_builders::UpdateDeploymentStrategy::set_deployment_duration_in_minutes): <p>Total amount of time for a deployment to last.</p>
    ///   - [`final_bake_time_in_minutes(i32)`](crate::client::fluent_builders::UpdateDeploymentStrategy::final_bake_time_in_minutes) / [`set_final_bake_time_in_minutes(Option<i32>)`](crate::client::fluent_builders::UpdateDeploymentStrategy::set_final_bake_time_in_minutes): <p>The amount of time that AppConfig monitors for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.</p>
    ///   - [`growth_factor(f32)`](crate::client::fluent_builders::UpdateDeploymentStrategy::growth_factor) / [`set_growth_factor(Option<f32>)`](crate::client::fluent_builders::UpdateDeploymentStrategy::set_growth_factor): <p>The percentage of targets to receive a deployed configuration during each interval.</p>
    ///   - [`growth_type(GrowthType)`](crate::client::fluent_builders::UpdateDeploymentStrategy::growth_type) / [`set_growth_type(Option<GrowthType>)`](crate::client::fluent_builders::UpdateDeploymentStrategy::set_growth_type): <p>The algorithm used to define how percentage grows over time. AppConfig supports the following growth types:</p>  <p> <b>Linear</b>: For this type, AppConfig processes the deployment by increments of the growth factor evenly distributed over the deployment time. For example, a linear deployment that uses a growth factor of 20 initially makes the configuration available to 20 percent of the targets. After 1/5th of the deployment time has passed, the system updates the percentage to 40 percent. This continues until 100% of the targets are set to receive the deployed configuration.</p>  <p> <b>Exponential</b>: For this type, AppConfig processes the deployment exponentially using the following formula: <code>G*(2^N)</code>. In this formula, <code>G</code> is the growth factor specified by the user and <code>N</code> is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:</p>  <p> <code>2*(2^0)</code> </p>  <p> <code>2*(2^1)</code> </p>  <p> <code>2*(2^2)</code> </p>  <p>Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.</p>
    /// - On success, responds with [`UpdateDeploymentStrategyOutput`](crate::output::UpdateDeploymentStrategyOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::UpdateDeploymentStrategyOutput::id): <p>The deployment strategy ID.</p>
    ///   - [`name(Option<String>)`](crate::output::UpdateDeploymentStrategyOutput::name): <p>The name of the deployment strategy.</p>
    ///   - [`description(Option<String>)`](crate::output::UpdateDeploymentStrategyOutput::description): <p>The description of the deployment strategy.</p>
    ///   - [`deployment_duration_in_minutes(i32)`](crate::output::UpdateDeploymentStrategyOutput::deployment_duration_in_minutes): <p>Total amount of time the deployment lasted.</p>
    ///   - [`growth_type(Option<GrowthType>)`](crate::output::UpdateDeploymentStrategyOutput::growth_type): <p>The algorithm used to define how percentage grew over time.</p>
    ///   - [`growth_factor(f32)`](crate::output::UpdateDeploymentStrategyOutput::growth_factor): <p>The percentage of targets that received a deployed configuration during each interval.</p>
    ///   - [`final_bake_time_in_minutes(i32)`](crate::output::UpdateDeploymentStrategyOutput::final_bake_time_in_minutes): <p>The amount of time that AppConfig monitored for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.</p>
    ///   - [`replicate_to(Option<ReplicateTo>)`](crate::output::UpdateDeploymentStrategyOutput::replicate_to): <p>Save the deployment strategy to a Systems Manager (SSM) document.</p>
    /// - On failure, responds with [`SdkError<UpdateDeploymentStrategyError>`](crate::error::UpdateDeploymentStrategyError)
    pub fn update_deployment_strategy(
        &self,
    ) -> crate::client::fluent_builders::UpdateDeploymentStrategy {
        crate::client::fluent_builders::UpdateDeploymentStrategy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateEnvironment`](crate::client::fluent_builders::UpdateEnvironment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::UpdateEnvironment::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::UpdateEnvironment::set_application_id): <p>The application ID.</p>
    ///   - [`environment_id(impl Into<String>)`](crate::client::fluent_builders::UpdateEnvironment::environment_id) / [`set_environment_id(Option<String>)`](crate::client::fluent_builders::UpdateEnvironment::set_environment_id): <p>The environment ID.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateEnvironment::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateEnvironment::set_name): <p>The name of the environment.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateEnvironment::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateEnvironment::set_description): <p>A description of the environment.</p>
    ///   - [`monitors(Vec<Monitor>)`](crate::client::fluent_builders::UpdateEnvironment::monitors) / [`set_monitors(Option<Vec<Monitor>>)`](crate::client::fluent_builders::UpdateEnvironment::set_monitors): <p>Amazon CloudWatch alarms to monitor during the deployment process.</p>
    /// - On success, responds with [`UpdateEnvironmentOutput`](crate::output::UpdateEnvironmentOutput) with field(s):
    ///   - [`application_id(Option<String>)`](crate::output::UpdateEnvironmentOutput::application_id): <p>The application ID.</p>
    ///   - [`id(Option<String>)`](crate::output::UpdateEnvironmentOutput::id): <p>The environment ID.</p>
    ///   - [`name(Option<String>)`](crate::output::UpdateEnvironmentOutput::name): <p>The name of the environment.</p>
    ///   - [`description(Option<String>)`](crate::output::UpdateEnvironmentOutput::description): <p>The description of the environment.</p>
    ///   - [`state(Option<EnvironmentState>)`](crate::output::UpdateEnvironmentOutput::state): <p>The state of the environment. An environment can be in one of the following states: <code>READY_FOR_DEPLOYMENT</code>, <code>DEPLOYING</code>, <code>ROLLING_BACK</code>, or <code>ROLLED_BACK</code> </p>
    ///   - [`monitors(Option<Vec<Monitor>>)`](crate::output::UpdateEnvironmentOutput::monitors): <p>Amazon CloudWatch alarms monitored during the deployment.</p>
    /// - On failure, responds with [`SdkError<UpdateEnvironmentError>`](crate::error::UpdateEnvironmentError)
    pub fn update_environment(&self) -> crate::client::fluent_builders::UpdateEnvironment {
        crate::client::fluent_builders::UpdateEnvironment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateExtension`](crate::client::fluent_builders::UpdateExtension) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`extension_identifier(impl Into<String>)`](crate::client::fluent_builders::UpdateExtension::extension_identifier) / [`set_extension_identifier(Option<String>)`](crate::client::fluent_builders::UpdateExtension::set_extension_identifier): <p>The name, the ID, or the Amazon Resource Name (ARN) of the extension.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateExtension::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateExtension::set_description): <p>Information about the extension.</p>
    ///   - [`actions(HashMap<ActionPoint, Vec<Action>>)`](crate::client::fluent_builders::UpdateExtension::actions) / [`set_actions(Option<HashMap<ActionPoint, Vec<Action>>>)`](crate::client::fluent_builders::UpdateExtension::set_actions): <p>The actions defined in the extension.</p>
    ///   - [`parameters(HashMap<String, Parameter>)`](crate::client::fluent_builders::UpdateExtension::parameters) / [`set_parameters(Option<HashMap<String, Parameter>>)`](crate::client::fluent_builders::UpdateExtension::set_parameters): <p>One or more parameters for the actions called by the extension.</p>
    ///   - [`version_number(i32)`](crate::client::fluent_builders::UpdateExtension::version_number) / [`set_version_number(Option<i32>)`](crate::client::fluent_builders::UpdateExtension::set_version_number): <p>The extension version number.</p>
    /// - On success, responds with [`UpdateExtensionOutput`](crate::output::UpdateExtensionOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::UpdateExtensionOutput::id): <p>The system-generated ID of the extension.</p>
    ///   - [`name(Option<String>)`](crate::output::UpdateExtensionOutput::name): <p>The extension name.</p>
    ///   - [`version_number(i32)`](crate::output::UpdateExtensionOutput::version_number): <p>The extension version number.</p>
    ///   - [`arn(Option<String>)`](crate::output::UpdateExtensionOutput::arn): <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    ///   - [`description(Option<String>)`](crate::output::UpdateExtensionOutput::description): <p>Information about the extension.</p>
    ///   - [`actions(Option<HashMap<ActionPoint, Vec<Action>>>)`](crate::output::UpdateExtensionOutput::actions): <p>The actions defined in the extension.</p>
    ///   - [`parameters(Option<HashMap<String, Parameter>>)`](crate::output::UpdateExtensionOutput::parameters): <p>The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the <code>CreateExtensionAssociation</code> API action. For Lambda extension actions, these parameters are included in the Lambda request object.</p>
    /// - On failure, responds with [`SdkError<UpdateExtensionError>`](crate::error::UpdateExtensionError)
    pub fn update_extension(&self) -> crate::client::fluent_builders::UpdateExtension {
        crate::client::fluent_builders::UpdateExtension::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateExtensionAssociation`](crate::client::fluent_builders::UpdateExtensionAssociation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`extension_association_id(impl Into<String>)`](crate::client::fluent_builders::UpdateExtensionAssociation::extension_association_id) / [`set_extension_association_id(Option<String>)`](crate::client::fluent_builders::UpdateExtensionAssociation::set_extension_association_id): <p>The system-generated ID for the association.</p>
    ///   - [`parameters(HashMap<String, String>)`](crate::client::fluent_builders::UpdateExtensionAssociation::parameters) / [`set_parameters(Option<HashMap<String, String>>)`](crate::client::fluent_builders::UpdateExtensionAssociation::set_parameters): <p>The parameter names and values defined in the extension.</p>
    /// - On success, responds with [`UpdateExtensionAssociationOutput`](crate::output::UpdateExtensionAssociationOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::UpdateExtensionAssociationOutput::id): <p>The system-generated ID for the association.</p>
    ///   - [`extension_arn(Option<String>)`](crate::output::UpdateExtensionAssociationOutput::extension_arn): <p>The ARN of the extension defined in the association.</p>
    ///   - [`resource_arn(Option<String>)`](crate::output::UpdateExtensionAssociationOutput::resource_arn): <p>The ARNs of applications, configuration profiles, or environments defined in the association.</p>
    ///   - [`arn(Option<String>)`](crate::output::UpdateExtensionAssociationOutput::arn): <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
    ///   - [`parameters(Option<HashMap<String, String>>)`](crate::output::UpdateExtensionAssociationOutput::parameters): <p>The parameter names and values defined in the association.</p>
    ///   - [`extension_version_number(i32)`](crate::output::UpdateExtensionAssociationOutput::extension_version_number): <p>The version number for the extension defined in the association.</p>
    /// - On failure, responds with [`SdkError<UpdateExtensionAssociationError>`](crate::error::UpdateExtensionAssociationError)
    pub fn update_extension_association(
        &self,
    ) -> crate::client::fluent_builders::UpdateExtensionAssociation {
        crate::client::fluent_builders::UpdateExtensionAssociation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ValidateConfiguration`](crate::client::fluent_builders::ValidateConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::client::fluent_builders::ValidateConfiguration::application_id) / [`set_application_id(Option<String>)`](crate::client::fluent_builders::ValidateConfiguration::set_application_id): <p>The application ID.</p>
    ///   - [`configuration_profile_id(impl Into<String>)`](crate::client::fluent_builders::ValidateConfiguration::configuration_profile_id) / [`set_configuration_profile_id(Option<String>)`](crate::client::fluent_builders::ValidateConfiguration::set_configuration_profile_id): <p>The configuration profile ID.</p>
    ///   - [`configuration_version(impl Into<String>)`](crate::client::fluent_builders::ValidateConfiguration::configuration_version) / [`set_configuration_version(Option<String>)`](crate::client::fluent_builders::ValidateConfiguration::set_configuration_version): <p>The version of the configuration to validate.</p>
    /// - On success, responds with [`ValidateConfigurationOutput`](crate::output::ValidateConfigurationOutput)

    /// - On failure, responds with [`SdkError<ValidateConfigurationError>`](crate::error::ValidateConfigurationError)
    pub fn validate_configuration(&self) -> crate::client::fluent_builders::ValidateConfiguration {
        crate::client::fluent_builders::ValidateConfiguration::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
