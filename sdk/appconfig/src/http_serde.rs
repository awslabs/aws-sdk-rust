// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_header_create_hosted_configuration_version_create_hosted_configuration_version_output_application_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Application-Id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_hosted_configuration_version_create_hosted_configuration_version_output_configuration_profile_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Configuration-Profile-Id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_create_hosted_configuration_version_create_hosted_configuration_version_output_content(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<smithy_types::Blob>,
    crate::error::CreateHostedConfigurationVersionError,
> {
    (!body.is_empty())
        .then(|| Ok(smithy_types::Blob::new(body)))
        .transpose()
}

pub fn deser_header_create_hosted_configuration_version_create_hosted_configuration_version_output_content_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Type").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_hosted_configuration_version_create_hosted_configuration_version_output_description(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Description").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_hosted_configuration_version_create_hosted_configuration_version_output_version_number(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Version-Number").iter();
    let var_1: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_1.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_1 = var_1;
        Ok(var_1.pop())
    }
}

pub fn deser_header_get_configuration_get_configuration_output_configuration_version(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Configuration-Version").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_configuration_get_configuration_output_content(
    body: &[u8],
) -> std::result::Result<std::option::Option<smithy_types::Blob>, crate::error::GetConfigurationError>
{
    (!body.is_empty())
        .then(|| Ok(smithy_types::Blob::new(body)))
        .transpose()
}

pub fn deser_header_get_configuration_get_configuration_output_content_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Type").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_hosted_configuration_version_get_hosted_configuration_version_output_application_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Application-Id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_hosted_configuration_version_get_hosted_configuration_version_output_configuration_profile_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Configuration-Profile-Id").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_hosted_configuration_version_get_hosted_configuration_version_output_content(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<smithy_types::Blob>,
    crate::error::GetHostedConfigurationVersionError,
> {
    (!body.is_empty())
        .then(|| Ok(smithy_types::Blob::new(body)))
        .transpose()
}

pub fn deser_header_get_hosted_configuration_version_get_hosted_configuration_version_output_content_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Type").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_hosted_configuration_version_get_hosted_configuration_version_output_description(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Description").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_hosted_configuration_version_get_hosted_configuration_version_output_version_number(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Version-Number").iter();
    let var_2: Vec<i32> = smithy_http::header::read_many(headers)?;
    if var_2.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_2 = var_2;
        Ok(var_2.pop())
    }
}
