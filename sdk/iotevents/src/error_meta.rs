// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>An internal failure occurred.</p>
    InternalFailureException(crate::types::error::InternalFailureException),
    /// <p>The request was invalid.</p>
    InvalidRequestException(crate::types::error::InvalidRequestException),
    /// <p>A limit was exceeded.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The resource already exists.</p>
    ResourceAlreadyExistsException(crate::types::error::ResourceAlreadyExistsException),
    /// <p>The resource is in use.</p>
    ResourceInUseException(crate::types::error::ResourceInUseException),
    /// <p>The resource was not found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The service is currently unavailable.</p>
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    /// <p>The request could not be completed due to throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The requested operation is not supported.</p>
    UnsupportedOperationException(crate::types::error::UnsupportedOperationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InternalFailureException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UnsupportedOperationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_alarm_model::CreateAlarmModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_alarm_model::CreateAlarmModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_alarm_model::CreateAlarmModelError> for Error {
    fn from(err: crate::operation::create_alarm_model::CreateAlarmModelError) -> Self {
        match err {
            crate::operation::create_alarm_model::CreateAlarmModelError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::create_alarm_model::CreateAlarmModelError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_alarm_model::CreateAlarmModelError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_alarm_model::CreateAlarmModelError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::operation::create_alarm_model::CreateAlarmModelError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_alarm_model::CreateAlarmModelError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::create_alarm_model::CreateAlarmModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_alarm_model::CreateAlarmModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_detector_model::CreateDetectorModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_detector_model::CreateDetectorModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_detector_model::CreateDetectorModelError> for Error {
    fn from(err: crate::operation::create_detector_model::CreateDetectorModelError) -> Self {
        match err {
            crate::operation::create_detector_model::CreateDetectorModelError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::create_detector_model::CreateDetectorModelError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::create_detector_model::CreateDetectorModelError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_detector_model::CreateDetectorModelError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::operation::create_detector_model::CreateDetectorModelError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_detector_model::CreateDetectorModelError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::create_detector_model::CreateDetectorModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_detector_model::CreateDetectorModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_input::CreateInputError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_input::CreateInputError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_input::CreateInputError> for Error {
    fn from(err: crate::operation::create_input::CreateInputError) -> Self {
        match err {
            crate::operation::create_input::CreateInputError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::create_input::CreateInputError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_input::CreateInputError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_input::CreateInputError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_input::CreateInputError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_input::CreateInputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_alarm_model::DeleteAlarmModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_alarm_model::DeleteAlarmModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_alarm_model::DeleteAlarmModelError> for Error {
    fn from(err: crate::operation::delete_alarm_model::DeleteAlarmModelError) -> Self {
        match err {
            crate::operation::delete_alarm_model::DeleteAlarmModelError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_alarm_model::DeleteAlarmModelError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_alarm_model::DeleteAlarmModelError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_alarm_model::DeleteAlarmModelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_alarm_model::DeleteAlarmModelError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::delete_alarm_model::DeleteAlarmModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_alarm_model::DeleteAlarmModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_detector_model::DeleteDetectorModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_detector_model::DeleteDetectorModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_detector_model::DeleteDetectorModelError> for Error {
    fn from(err: crate::operation::delete_detector_model::DeleteDetectorModelError) -> Self {
        match err {
            crate::operation::delete_detector_model::DeleteDetectorModelError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::delete_detector_model::DeleteDetectorModelError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::delete_detector_model::DeleteDetectorModelError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_detector_model::DeleteDetectorModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_detector_model::DeleteDetectorModelError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::delete_detector_model::DeleteDetectorModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_detector_model::DeleteDetectorModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_input::DeleteInputError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_input::DeleteInputError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_input::DeleteInputError> for Error {
    fn from(err: crate::operation::delete_input::DeleteInputError) -> Self {
        match err {
            crate::operation::delete_input::DeleteInputError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::delete_input::DeleteInputError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_input::DeleteInputError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_input::DeleteInputError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_input::DeleteInputError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_input::DeleteInputError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_input::DeleteInputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_alarm_model::DescribeAlarmModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_alarm_model::DescribeAlarmModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_alarm_model::DescribeAlarmModelError> for Error {
    fn from(err: crate::operation::describe_alarm_model::DescribeAlarmModelError) -> Self {
        match err {
            crate::operation::describe_alarm_model::DescribeAlarmModelError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::describe_alarm_model::DescribeAlarmModelError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_alarm_model::DescribeAlarmModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_alarm_model::DescribeAlarmModelError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::describe_alarm_model::DescribeAlarmModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_alarm_model::DescribeAlarmModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_detector_model::DescribeDetectorModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_detector_model::DescribeDetectorModelError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_detector_model::DescribeDetectorModelError> for Error {
    fn from(err: crate::operation::describe_detector_model::DescribeDetectorModelError) -> Self {
        match err {
            crate::operation::describe_detector_model::DescribeDetectorModelError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::describe_detector_model::DescribeDetectorModelError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::describe_detector_model::DescribeDetectorModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_detector_model::DescribeDetectorModelError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::describe_detector_model::DescribeDetectorModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_detector_model::DescribeDetectorModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_detector_model_analysis::DescribeDetectorModelAnalysisError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_detector_model_analysis::DescribeDetectorModelAnalysisError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_detector_model_analysis::DescribeDetectorModelAnalysisError> for Error {
    fn from(err: crate::operation::describe_detector_model_analysis::DescribeDetectorModelAnalysisError) -> Self {
        match err {
            crate::operation::describe_detector_model_analysis::DescribeDetectorModelAnalysisError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::describe_detector_model_analysis::DescribeDetectorModelAnalysisError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::describe_detector_model_analysis::DescribeDetectorModelAnalysisError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_detector_model_analysis::DescribeDetectorModelAnalysisError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::describe_detector_model_analysis::DescribeDetectorModelAnalysisError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_detector_model_analysis::DescribeDetectorModelAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_input::DescribeInputError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_input::DescribeInputError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_input::DescribeInputError> for Error {
    fn from(err: crate::operation::describe_input::DescribeInputError) -> Self {
        match err {
            crate::operation::describe_input::DescribeInputError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::describe_input::DescribeInputError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_input::DescribeInputError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_input::DescribeInputError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::describe_input::DescribeInputError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_input::DescribeInputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_logging_options::DescribeLoggingOptionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_logging_options::DescribeLoggingOptionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_logging_options::DescribeLoggingOptionsError> for Error {
    fn from(err: crate::operation::describe_logging_options::DescribeLoggingOptionsError) -> Self {
        match err {
            crate::operation::describe_logging_options::DescribeLoggingOptionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::describe_logging_options::DescribeLoggingOptionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::describe_logging_options::DescribeLoggingOptionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_logging_options::DescribeLoggingOptionsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::describe_logging_options::DescribeLoggingOptionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_logging_options::DescribeLoggingOptionsError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::operation::describe_logging_options::DescribeLoggingOptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_detector_model_analysis_results::GetDetectorModelAnalysisResultsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_detector_model_analysis_results::GetDetectorModelAnalysisResultsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_detector_model_analysis_results::GetDetectorModelAnalysisResultsError> for Error {
    fn from(err: crate::operation::get_detector_model_analysis_results::GetDetectorModelAnalysisResultsError) -> Self {
        match err {
            crate::operation::get_detector_model_analysis_results::GetDetectorModelAnalysisResultsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::get_detector_model_analysis_results::GetDetectorModelAnalysisResultsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_detector_model_analysis_results::GetDetectorModelAnalysisResultsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_detector_model_analysis_results::GetDetectorModelAnalysisResultsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_detector_model_analysis_results::GetDetectorModelAnalysisResultsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_detector_model_analysis_results::GetDetectorModelAnalysisResultsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_alarm_models::ListAlarmModelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_alarm_models::ListAlarmModelsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_alarm_models::ListAlarmModelsError> for Error {
    fn from(err: crate::operation::list_alarm_models::ListAlarmModelsError) -> Self {
        match err {
            crate::operation::list_alarm_models::ListAlarmModelsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_alarm_models::ListAlarmModelsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_alarm_models::ListAlarmModelsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_alarm_models::ListAlarmModelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_alarm_models::ListAlarmModelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_alarm_model_versions::ListAlarmModelVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_alarm_model_versions::ListAlarmModelVersionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_alarm_model_versions::ListAlarmModelVersionsError> for Error {
    fn from(err: crate::operation::list_alarm_model_versions::ListAlarmModelVersionsError) -> Self {
        match err {
            crate::operation::list_alarm_model_versions::ListAlarmModelVersionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::list_alarm_model_versions::ListAlarmModelVersionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_alarm_model_versions::ListAlarmModelVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_alarm_model_versions::ListAlarmModelVersionsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_alarm_model_versions::ListAlarmModelVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_alarm_model_versions::ListAlarmModelVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_detector_models::ListDetectorModelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_detector_models::ListDetectorModelsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_detector_models::ListDetectorModelsError> for Error {
    fn from(err: crate::operation::list_detector_models::ListDetectorModelsError) -> Self {
        match err {
            crate::operation::list_detector_models::ListDetectorModelsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::list_detector_models::ListDetectorModelsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_detector_models::ListDetectorModelsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_detector_models::ListDetectorModelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_detector_models::ListDetectorModelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_detector_model_versions::ListDetectorModelVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_detector_model_versions::ListDetectorModelVersionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_detector_model_versions::ListDetectorModelVersionsError> for Error {
    fn from(err: crate::operation::list_detector_model_versions::ListDetectorModelVersionsError) -> Self {
        match err {
            crate::operation::list_detector_model_versions::ListDetectorModelVersionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::list_detector_model_versions::ListDetectorModelVersionsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_detector_model_versions::ListDetectorModelVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_detector_model_versions::ListDetectorModelVersionsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_detector_model_versions::ListDetectorModelVersionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_detector_model_versions::ListDetectorModelVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_input_routings::ListInputRoutingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_input_routings::ListInputRoutingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_input_routings::ListInputRoutingsError> for Error {
    fn from(err: crate::operation::list_input_routings::ListInputRoutingsError) -> Self {
        match err {
            crate::operation::list_input_routings::ListInputRoutingsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_input_routings::ListInputRoutingsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_input_routings::ListInputRoutingsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_input_routings::ListInputRoutingsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_input_routings::ListInputRoutingsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_input_routings::ListInputRoutingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_inputs::ListInputsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_inputs::ListInputsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_inputs::ListInputsError> for Error {
    fn from(err: crate::operation::list_inputs::ListInputsError) -> Self {
        match err {
            crate::operation::list_inputs::ListInputsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_inputs::ListInputsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_inputs::ListInputsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_inputs::ListInputsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_inputs::ListInputsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_logging_options::PutLoggingOptionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_logging_options::PutLoggingOptionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_logging_options::PutLoggingOptionsError> for Error {
    fn from(err: crate::operation::put_logging_options::PutLoggingOptionsError) -> Self {
        match err {
            crate::operation::put_logging_options::PutLoggingOptionsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::put_logging_options::PutLoggingOptionsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::put_logging_options::PutLoggingOptionsError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::put_logging_options::PutLoggingOptionsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::put_logging_options::PutLoggingOptionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_logging_options::PutLoggingOptionsError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::operation::put_logging_options::PutLoggingOptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_detector_model_analysis::StartDetectorModelAnalysisError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_detector_model_analysis::StartDetectorModelAnalysisError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_detector_model_analysis::StartDetectorModelAnalysisError> for Error {
    fn from(err: crate::operation::start_detector_model_analysis::StartDetectorModelAnalysisError) -> Self {
        match err {
            crate::operation::start_detector_model_analysis::StartDetectorModelAnalysisError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::start_detector_model_analysis::StartDetectorModelAnalysisError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::start_detector_model_analysis::StartDetectorModelAnalysisError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::start_detector_model_analysis::StartDetectorModelAnalysisError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::start_detector_model_analysis::StartDetectorModelAnalysisError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_detector_model_analysis::StartDetectorModelAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::tag_resource::TagResourceError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::tag_resource::TagResourceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::untag_resource::UntagResourceError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_alarm_model::UpdateAlarmModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_alarm_model::UpdateAlarmModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_alarm_model::UpdateAlarmModelError> for Error {
    fn from(err: crate::operation::update_alarm_model::UpdateAlarmModelError) -> Self {
        match err {
            crate::operation::update_alarm_model::UpdateAlarmModelError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_alarm_model::UpdateAlarmModelError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_alarm_model::UpdateAlarmModelError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::update_alarm_model::UpdateAlarmModelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_alarm_model::UpdateAlarmModelError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::update_alarm_model::UpdateAlarmModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_alarm_model::UpdateAlarmModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_detector_model::UpdateDetectorModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_detector_model::UpdateDetectorModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_detector_model::UpdateDetectorModelError> for Error {
    fn from(err: crate::operation::update_detector_model::UpdateDetectorModelError) -> Self {
        match err {
            crate::operation::update_detector_model::UpdateDetectorModelError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::update_detector_model::UpdateDetectorModelError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::update_detector_model::UpdateDetectorModelError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::update_detector_model::UpdateDetectorModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_detector_model::UpdateDetectorModelError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::update_detector_model::UpdateDetectorModelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_detector_model::UpdateDetectorModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_input::UpdateInputError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_input::UpdateInputError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_input::UpdateInputError> for Error {
    fn from(err: crate::operation::update_input::UpdateInputError) -> Self {
        match err {
            crate::operation::update_input::UpdateInputError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_input::UpdateInputError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_input::UpdateInputError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::update_input::UpdateInputError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_input::UpdateInputError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::update_input::UpdateInputError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_input::UpdateInputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::InternalFailureException(inner) => inner.source(),
            Error::InvalidRequestException(inner) => inner.source(),
            Error::LimitExceededException(inner) => inner.source(),
            Error::ResourceAlreadyExistsException(inner) => inner.source(),
            Error::ResourceInUseException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceUnavailableException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::UnsupportedOperationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::InternalFailureException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceAlreadyExistsException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UnsupportedOperationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
