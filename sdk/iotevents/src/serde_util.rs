// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn input_configuration_correct_errors(
    mut builder: crate::types::builders::InputConfigurationBuilder,
) -> crate::types::builders::InputConfigurationBuilder {
    if builder.input_name.is_none() {
        builder.input_name = Some(Default::default())
    }
    if builder.input_arn.is_none() {
        builder.input_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_update_time.is_none() {
        builder.last_update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::InputStatus>().ok()
    }
    builder
}

pub(crate) fn logging_options_correct_errors(
    mut builder: crate::types::builders::LoggingOptionsBuilder,
) -> crate::types::builders::LoggingOptionsBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.level.is_none() {
        builder.level = "no value was set".parse::<crate::types::LoggingLevel>().ok()
    }
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn acknowledge_flow_correct_errors(
    mut builder: crate::types::builders::AcknowledgeFlowBuilder,
) -> crate::types::builders::AcknowledgeFlowBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn detector_model_definition_correct_errors(
    mut builder: crate::types::builders::DetectorModelDefinitionBuilder,
) -> crate::types::builders::DetectorModelDefinitionBuilder {
    if builder.states.is_none() {
        builder.states = Some(Default::default())
    }
    if builder.initial_state_name.is_none() {
        builder.initial_state_name = Some(Default::default())
    }
    builder
}

pub(crate) fn initialization_configuration_correct_errors(
    mut builder: crate::types::builders::InitializationConfigurationBuilder,
) -> crate::types::builders::InitializationConfigurationBuilder {
    if builder.disabled_on_initialization.is_none() {
        builder.disabled_on_initialization = Some(Default::default())
    }
    builder
}

pub(crate) fn input_definition_correct_errors(
    mut builder: crate::types::builders::InputDefinitionBuilder,
) -> crate::types::builders::InputDefinitionBuilder {
    if builder.attributes.is_none() {
        builder.attributes = Some(Default::default())
    }
    builder
}

pub(crate) fn simple_rule_correct_errors(mut builder: crate::types::builders::SimpleRuleBuilder) -> crate::types::builders::SimpleRuleBuilder {
    if builder.input_property.is_none() {
        builder.input_property = Some(Default::default())
    }
    if builder.comparison_operator.is_none() {
        builder.comparison_operator = "no value was set".parse::<crate::types::ComparisonOperator>().ok()
    }
    if builder.threshold.is_none() {
        builder.threshold = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn detector_debug_option_correct_errors(
    mut builder: crate::types::builders::DetectorDebugOptionBuilder,
) -> crate::types::builders::DetectorDebugOptionBuilder {
    if builder.detector_model_name.is_none() {
        builder.detector_model_name = Some(Default::default())
    }
    builder
}

pub(crate) fn notification_action_correct_errors(
    mut builder: crate::types::builders::NotificationActionBuilder,
) -> crate::types::builders::NotificationActionBuilder {
    if builder.action.is_none() {
        builder.action = {
            let builder = crate::types::builders::NotificationTargetActionsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn attribute_correct_errors(mut builder: crate::types::builders::AttributeBuilder) -> crate::types::builders::AttributeBuilder {
    if builder.json_path.is_none() {
        builder.json_path = Some(Default::default())
    }
    builder
}

pub(crate) fn dynamo_db_action_correct_errors(
    mut builder: crate::types::builders::DynamoDbActionBuilder,
) -> crate::types::builders::DynamoDbActionBuilder {
    if builder.hash_key_field.is_none() {
        builder.hash_key_field = Some(Default::default())
    }
    if builder.hash_key_value.is_none() {
        builder.hash_key_value = Some(Default::default())
    }
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    builder
}

pub(crate) fn dynamo_dbv2_action_correct_errors(
    mut builder: crate::types::builders::DynamoDBv2ActionBuilder,
) -> crate::types::builders::DynamoDBv2ActionBuilder {
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    builder
}

pub(crate) fn firehose_action_correct_errors(
    mut builder: crate::types::builders::FirehoseActionBuilder,
) -> crate::types::builders::FirehoseActionBuilder {
    if builder.delivery_stream_name.is_none() {
        builder.delivery_stream_name = Some(Default::default())
    }
    builder
}

pub(crate) fn iot_events_action_correct_errors(
    mut builder: crate::types::builders::IotEventsActionBuilder,
) -> crate::types::builders::IotEventsActionBuilder {
    if builder.input_name.is_none() {
        builder.input_name = Some(Default::default())
    }
    builder
}

pub(crate) fn iot_topic_publish_action_correct_errors(
    mut builder: crate::types::builders::IotTopicPublishActionBuilder,
) -> crate::types::builders::IotTopicPublishActionBuilder {
    if builder.mqtt_topic.is_none() {
        builder.mqtt_topic = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_action_correct_errors(mut builder: crate::types::builders::LambdaActionBuilder) -> crate::types::builders::LambdaActionBuilder {
    if builder.function_arn.is_none() {
        builder.function_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn sns_topic_publish_action_correct_errors(
    mut builder: crate::types::builders::SnsTopicPublishActionBuilder,
) -> crate::types::builders::SnsTopicPublishActionBuilder {
    if builder.target_arn.is_none() {
        builder.target_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn sqs_action_correct_errors(mut builder: crate::types::builders::SqsActionBuilder) -> crate::types::builders::SqsActionBuilder {
    if builder.queue_url.is_none() {
        builder.queue_url = Some(Default::default())
    }
    builder
}

pub(crate) fn state_correct_errors(mut builder: crate::types::builders::StateBuilder) -> crate::types::builders::StateBuilder {
    if builder.state_name.is_none() {
        builder.state_name = Some(Default::default())
    }
    builder
}

pub(crate) fn email_configuration_correct_errors(
    mut builder: crate::types::builders::EmailConfigurationBuilder,
) -> crate::types::builders::EmailConfigurationBuilder {
    if builder.from.is_none() {
        builder.from = Some(Default::default())
    }
    if builder.recipients.is_none() {
        builder.recipients = {
            let builder = crate::types::builders::EmailRecipientsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn payload_correct_errors(mut builder: crate::types::builders::PayloadBuilder) -> crate::types::builders::PayloadBuilder {
    if builder.content_expression.is_none() {
        builder.content_expression = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::PayloadType>().ok()
    }
    builder
}

pub(crate) fn sms_configuration_correct_errors(
    mut builder: crate::types::builders::SmsConfigurationBuilder,
) -> crate::types::builders::SmsConfigurationBuilder {
    if builder.recipients.is_none() {
        builder.recipients = Some(Default::default())
    }
    builder
}

pub(crate) fn asset_property_timestamp_correct_errors(
    mut builder: crate::types::builders::AssetPropertyTimestampBuilder,
) -> crate::types::builders::AssetPropertyTimestampBuilder {
    if builder.time_in_seconds.is_none() {
        builder.time_in_seconds = Some(Default::default())
    }
    builder
}

pub(crate) fn event_correct_errors(mut builder: crate::types::builders::EventBuilder) -> crate::types::builders::EventBuilder {
    if builder.event_name.is_none() {
        builder.event_name = Some(Default::default())
    }
    builder
}

pub(crate) fn transition_event_correct_errors(
    mut builder: crate::types::builders::TransitionEventBuilder,
) -> crate::types::builders::TransitionEventBuilder {
    if builder.event_name.is_none() {
        builder.event_name = Some(Default::default())
    }
    if builder.condition.is_none() {
        builder.condition = Some(Default::default())
    }
    if builder.next_state.is_none() {
        builder.next_state = Some(Default::default())
    }
    builder
}

pub(crate) fn sso_identity_correct_errors(mut builder: crate::types::builders::SsoIdentityBuilder) -> crate::types::builders::SsoIdentityBuilder {
    if builder.identity_store_id.is_none() {
        builder.identity_store_id = Some(Default::default())
    }
    builder
}

pub(crate) fn clear_timer_action_correct_errors(
    mut builder: crate::types::builders::ClearTimerActionBuilder,
) -> crate::types::builders::ClearTimerActionBuilder {
    if builder.timer_name.is_none() {
        builder.timer_name = Some(Default::default())
    }
    builder
}

pub(crate) fn reset_timer_action_correct_errors(
    mut builder: crate::types::builders::ResetTimerActionBuilder,
) -> crate::types::builders::ResetTimerActionBuilder {
    if builder.timer_name.is_none() {
        builder.timer_name = Some(Default::default())
    }
    builder
}

pub(crate) fn set_timer_action_correct_errors(
    mut builder: crate::types::builders::SetTimerActionBuilder,
) -> crate::types::builders::SetTimerActionBuilder {
    if builder.timer_name.is_none() {
        builder.timer_name = Some(Default::default())
    }
    builder
}

pub(crate) fn set_variable_action_correct_errors(
    mut builder: crate::types::builders::SetVariableActionBuilder,
) -> crate::types::builders::SetVariableActionBuilder {
    if builder.variable_name.is_none() {
        builder.variable_name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
