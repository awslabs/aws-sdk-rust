// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_alarm_model_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_alarm_model::CreateAlarmModelInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.alarm_capabilities {
        #[allow(unused_mut)]
        let mut object_2 = object.key("alarmCapabilities").start_object();
        crate::protocol_serde::shape_alarm_capabilities::ser_alarm_capabilities(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.alarm_event_actions {
        #[allow(unused_mut)]
        let mut object_4 = object.key("alarmEventActions").start_object();
        crate::protocol_serde::shape_alarm_event_actions::ser_alarm_event_actions(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.alarm_model_description {
        object.key("alarmModelDescription").string(var_5.as_str());
    }
    if let Some(var_6) = &input.alarm_model_name {
        object.key("alarmModelName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.alarm_notification {
        #[allow(unused_mut)]
        let mut object_8 = object.key("alarmNotification").start_object();
        crate::protocol_serde::shape_alarm_notification::ser_alarm_notification(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.alarm_rule {
        #[allow(unused_mut)]
        let mut object_10 = object.key("alarmRule").start_object();
        crate::protocol_serde::shape_alarm_rule::ser_alarm_rule(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.key {
        object.key("key").string(var_11.as_str());
    }
    if let Some(var_12) = &input.role_arn {
        object.key("roleArn").string(var_12.as_str());
    }
    if let Some(var_13) = &input.severity {
        object.key("severity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.tags {
        let mut array_15 = object.key("tags").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    Ok(())
}
