// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the input.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Input {
    /// <p>Information about the configuration of an input.</p>
    #[doc(hidden)]
    pub input_configuration: std::option::Option<crate::types::InputConfiguration>,
    /// <p>The definition of the input.</p>
    #[doc(hidden)]
    pub input_definition: std::option::Option<crate::types::InputDefinition>,
}
impl Input {
    /// <p>Information about the configuration of an input.</p>
    pub fn input_configuration(&self) -> std::option::Option<&crate::types::InputConfiguration> {
        self.input_configuration.as_ref()
    }
    /// <p>The definition of the input.</p>
    pub fn input_definition(&self) -> std::option::Option<&crate::types::InputDefinition> {
        self.input_definition.as_ref()
    }
}
impl Input {
    /// Creates a new builder-style object to manufacture [`Input`](crate::types::Input).
    pub fn builder() -> crate::types::builders::InputBuilder {
        crate::types::builders::InputBuilder::default()
    }
}

/// A builder for [`Input`](crate::types::Input).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InputBuilder {
    pub(crate) input_configuration: std::option::Option<crate::types::InputConfiguration>,
    pub(crate) input_definition: std::option::Option<crate::types::InputDefinition>,
}
impl InputBuilder {
    /// <p>Information about the configuration of an input.</p>
    pub fn input_configuration(mut self, input: crate::types::InputConfiguration) -> Self {
        self.input_configuration = Some(input);
        self
    }
    /// <p>Information about the configuration of an input.</p>
    pub fn set_input_configuration(
        mut self,
        input: std::option::Option<crate::types::InputConfiguration>,
    ) -> Self {
        self.input_configuration = input;
        self
    }
    /// <p>The definition of the input.</p>
    pub fn input_definition(mut self, input: crate::types::InputDefinition) -> Self {
        self.input_definition = Some(input);
        self
    }
    /// <p>The definition of the input.</p>
    pub fn set_input_definition(
        mut self,
        input: std::option::Option<crate::types::InputDefinition>,
    ) -> Self {
        self.input_definition = input;
        self
    }
    /// Consumes the builder and constructs a [`Input`](crate::types::Input).
    pub fn build(self) -> crate::types::Input {
        crate::types::Input {
            input_configuration: self.input_configuration,
            input_definition: self.input_definition,
        }
    }
}
