// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information required to publish the Amazon SNS message.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SnsTopicPublishAction {
    /// <p>The ARN of the Amazon SNS target where the message is sent.</p>
    pub target_arn: ::std::string::String,
    /// <p>You can configure the action payload when you send a message as an Amazon SNS push notification.</p>
    pub payload: ::std::option::Option<crate::types::Payload>,
}
impl SnsTopicPublishAction {
    /// <p>The ARN of the Amazon SNS target where the message is sent.</p>
    pub fn target_arn(&self) -> &str {
        use std::ops::Deref;
        self.target_arn.deref()
    }
    /// <p>You can configure the action payload when you send a message as an Amazon SNS push notification.</p>
    pub fn payload(&self) -> ::std::option::Option<&crate::types::Payload> {
        self.payload.as_ref()
    }
}
impl SnsTopicPublishAction {
    /// Creates a new builder-style object to manufacture [`SnsTopicPublishAction`](crate::types::SnsTopicPublishAction).
    pub fn builder() -> crate::types::builders::SnsTopicPublishActionBuilder {
        crate::types::builders::SnsTopicPublishActionBuilder::default()
    }
}

/// A builder for [`SnsTopicPublishAction`](crate::types::SnsTopicPublishAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SnsTopicPublishActionBuilder {
    pub(crate) target_arn: ::std::option::Option<::std::string::String>,
    pub(crate) payload: ::std::option::Option<crate::types::Payload>,
}
impl SnsTopicPublishActionBuilder {
    /// <p>The ARN of the Amazon SNS target where the message is sent.</p>
    /// This field is required.
    pub fn target_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Amazon SNS target where the message is sent.</p>
    pub fn set_target_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The ARN of the Amazon SNS target where the message is sent.</p>
    pub fn get_target_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_arn
    }
    /// <p>You can configure the action payload when you send a message as an Amazon SNS push notification.</p>
    pub fn payload(mut self, input: crate::types::Payload) -> Self {
        self.payload = ::std::option::Option::Some(input);
        self
    }
    /// <p>You can configure the action payload when you send a message as an Amazon SNS push notification.</p>
    pub fn set_payload(mut self, input: ::std::option::Option<crate::types::Payload>) -> Self {
        self.payload = input;
        self
    }
    /// <p>You can configure the action payload when you send a message as an Amazon SNS push notification.</p>
    pub fn get_payload(&self) -> &::std::option::Option<crate::types::Payload> {
        &self.payload
    }
    /// Consumes the builder and constructs a [`SnsTopicPublishAction`](crate::types::SnsTopicPublishAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`target_arn`](crate::types::builders::SnsTopicPublishActionBuilder::target_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::SnsTopicPublishAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SnsTopicPublishAction {
            target_arn: self.target_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_arn",
                    "target_arn was not specified but it is required when building SnsTopicPublishAction",
                )
            })?,
            payload: self.payload,
        })
    }
}
