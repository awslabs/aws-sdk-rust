// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains value information. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html">AssetPropertyValue</a> in the <i>AWS IoT SiteWise API Reference</i>.</p>
/// <p>You must use expressions for all parameters in <code>AssetPropertyValue</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p>
/// <p class="title"> <b>Examples</b> </p>
/// <ul>
/// <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>quality</code> parameter can be <code>'GOOD'</code>.</p> </li>
/// <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>quality</code> parameter can be <code>$input.TemperatureInput.sensorData.quality</code>.</p> </li>
/// </ul>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssetPropertyValue {
    /// <p>The value to send to an asset property.</p>
    #[doc(hidden)]
    pub value: std::option::Option<crate::types::AssetPropertyVariant>,
    /// <p>The timestamp associated with the asset property value. The default is the current event time.</p>
    #[doc(hidden)]
    pub timestamp: std::option::Option<crate::types::AssetPropertyTimestamp>,
    /// <p>The quality of the asset property value. The value must be <code>'GOOD'</code>, <code>'BAD'</code>, or <code>'UNCERTAIN'</code>.</p>
    #[doc(hidden)]
    pub quality: std::option::Option<std::string::String>,
}
impl AssetPropertyValue {
    /// <p>The value to send to an asset property.</p>
    pub fn value(&self) -> std::option::Option<&crate::types::AssetPropertyVariant> {
        self.value.as_ref()
    }
    /// <p>The timestamp associated with the asset property value. The default is the current event time.</p>
    pub fn timestamp(&self) -> std::option::Option<&crate::types::AssetPropertyTimestamp> {
        self.timestamp.as_ref()
    }
    /// <p>The quality of the asset property value. The value must be <code>'GOOD'</code>, <code>'BAD'</code>, or <code>'UNCERTAIN'</code>.</p>
    pub fn quality(&self) -> std::option::Option<&str> {
        self.quality.as_deref()
    }
}
impl AssetPropertyValue {
    /// Creates a new builder-style object to manufacture [`AssetPropertyValue`](crate::types::AssetPropertyValue).
    pub fn builder() -> crate::types::builders::AssetPropertyValueBuilder {
        crate::types::builders::AssetPropertyValueBuilder::default()
    }
}

/// A builder for [`AssetPropertyValue`](crate::types::AssetPropertyValue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssetPropertyValueBuilder {
    pub(crate) value: std::option::Option<crate::types::AssetPropertyVariant>,
    pub(crate) timestamp: std::option::Option<crate::types::AssetPropertyTimestamp>,
    pub(crate) quality: std::option::Option<std::string::String>,
}
impl AssetPropertyValueBuilder {
    /// <p>The value to send to an asset property.</p>
    pub fn value(mut self, input: crate::types::AssetPropertyVariant) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The value to send to an asset property.</p>
    pub fn set_value(
        mut self,
        input: std::option::Option<crate::types::AssetPropertyVariant>,
    ) -> Self {
        self.value = input;
        self
    }
    /// <p>The timestamp associated with the asset property value. The default is the current event time.</p>
    pub fn timestamp(mut self, input: crate::types::AssetPropertyTimestamp) -> Self {
        self.timestamp = Some(input);
        self
    }
    /// <p>The timestamp associated with the asset property value. The default is the current event time.</p>
    pub fn set_timestamp(
        mut self,
        input: std::option::Option<crate::types::AssetPropertyTimestamp>,
    ) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The quality of the asset property value. The value must be <code>'GOOD'</code>, <code>'BAD'</code>, or <code>'UNCERTAIN'</code>.</p>
    pub fn quality(mut self, input: impl Into<std::string::String>) -> Self {
        self.quality = Some(input.into());
        self
    }
    /// <p>The quality of the asset property value. The value must be <code>'GOOD'</code>, <code>'BAD'</code>, or <code>'UNCERTAIN'</code>.</p>
    pub fn set_quality(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.quality = input;
        self
    }
    /// Consumes the builder and constructs a [`AssetPropertyValue`](crate::types::AssetPropertyValue).
    pub fn build(self) -> crate::types::AssetPropertyValue {
        crate::types::AssetPropertyValue {
            value: self.value,
            timestamp: self.timestamp,
            quality: self.quality,
        }
    }
}
