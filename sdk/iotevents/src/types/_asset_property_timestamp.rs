// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains timestamp information. For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html">TimeInNanos</a> in the <i>AWS IoT SiteWise API Reference</i>.</p>
/// <p>You must use expressions for all parameters in <code>AssetPropertyTimestamp</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p>
/// <p class="title"> <b>Examples</b> </p>
/// <ul>
/// <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>timeInSeconds</code> parameter can be <code>'1586400675'</code>.</p> </li>
/// <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>offsetInNanos</code> parameter can be <code>$variable.time</code>.</p> </li>
/// <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>timeInSeconds</code> parameter uses a substitution template.</p> <p> <code>'${$input.TemperatureInput.sensorData.timestamp / 1000}'</code> </p> </li>
/// </ul>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetPropertyTimestamp {
    /// <p>The timestamp, in seconds, in the Unix epoch format. The valid range is between 1-31556889864403199.</p>
    pub time_in_seconds: ::std::string::String,
    /// <p>The nanosecond offset converted from <code>timeInSeconds</code>. The valid range is between 0-999999999.</p>
    pub offset_in_nanos: ::std::option::Option<::std::string::String>,
}
impl AssetPropertyTimestamp {
    /// <p>The timestamp, in seconds, in the Unix epoch format. The valid range is between 1-31556889864403199.</p>
    pub fn time_in_seconds(&self) -> &str {
        use std::ops::Deref;
        self.time_in_seconds.deref()
    }
    /// <p>The nanosecond offset converted from <code>timeInSeconds</code>. The valid range is between 0-999999999.</p>
    pub fn offset_in_nanos(&self) -> ::std::option::Option<&str> {
        self.offset_in_nanos.as_deref()
    }
}
impl AssetPropertyTimestamp {
    /// Creates a new builder-style object to manufacture [`AssetPropertyTimestamp`](crate::types::AssetPropertyTimestamp).
    pub fn builder() -> crate::types::builders::AssetPropertyTimestampBuilder {
        crate::types::builders::AssetPropertyTimestampBuilder::default()
    }
}

/// A builder for [`AssetPropertyTimestamp`](crate::types::AssetPropertyTimestamp).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssetPropertyTimestampBuilder {
    pub(crate) time_in_seconds: ::std::option::Option<::std::string::String>,
    pub(crate) offset_in_nanos: ::std::option::Option<::std::string::String>,
}
impl AssetPropertyTimestampBuilder {
    /// <p>The timestamp, in seconds, in the Unix epoch format. The valid range is between 1-31556889864403199.</p>
    /// This field is required.
    pub fn time_in_seconds(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_in_seconds = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp, in seconds, in the Unix epoch format. The valid range is between 1-31556889864403199.</p>
    pub fn set_time_in_seconds(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_in_seconds = input;
        self
    }
    /// <p>The timestamp, in seconds, in the Unix epoch format. The valid range is between 1-31556889864403199.</p>
    pub fn get_time_in_seconds(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_in_seconds
    }
    /// <p>The nanosecond offset converted from <code>timeInSeconds</code>. The valid range is between 0-999999999.</p>
    pub fn offset_in_nanos(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.offset_in_nanos = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The nanosecond offset converted from <code>timeInSeconds</code>. The valid range is between 0-999999999.</p>
    pub fn set_offset_in_nanos(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.offset_in_nanos = input;
        self
    }
    /// <p>The nanosecond offset converted from <code>timeInSeconds</code>. The valid range is between 0-999999999.</p>
    pub fn get_offset_in_nanos(&self) -> &::std::option::Option<::std::string::String> {
        &self.offset_in_nanos
    }
    /// Consumes the builder and constructs a [`AssetPropertyTimestamp`](crate::types::AssetPropertyTimestamp).
    /// This method will fail if any of the following fields are not set:
    /// - [`time_in_seconds`](crate::types::builders::AssetPropertyTimestampBuilder::time_in_seconds)
    pub fn build(self) -> ::std::result::Result<crate::types::AssetPropertyTimestamp, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssetPropertyTimestamp {
            time_in_seconds: self.time_in_seconds.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "time_in_seconds",
                    "time_in_seconds was not specified but it is required when building AssetPropertyTimestamp",
                )
            })?,
            offset_in_nanos: self.offset_in_nanos,
        })
    }
}
