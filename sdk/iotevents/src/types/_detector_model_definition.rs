// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information that defines how a detector operates.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetectorModelDefinition {
    /// <p>Information about the states of the detector.</p>
    #[doc(hidden)]
    pub states: std::option::Option<std::vec::Vec<crate::types::State>>,
    /// <p>The state that is entered at the creation of each detector (instance).</p>
    #[doc(hidden)]
    pub initial_state_name: std::option::Option<std::string::String>,
}
impl DetectorModelDefinition {
    /// <p>Information about the states of the detector.</p>
    pub fn states(&self) -> std::option::Option<&[crate::types::State]> {
        self.states.as_deref()
    }
    /// <p>The state that is entered at the creation of each detector (instance).</p>
    pub fn initial_state_name(&self) -> std::option::Option<&str> {
        self.initial_state_name.as_deref()
    }
}
impl DetectorModelDefinition {
    /// Creates a new builder-style object to manufacture [`DetectorModelDefinition`](crate::types::DetectorModelDefinition).
    pub fn builder() -> crate::types::builders::DetectorModelDefinitionBuilder {
        crate::types::builders::DetectorModelDefinitionBuilder::default()
    }
}

/// A builder for [`DetectorModelDefinition`](crate::types::DetectorModelDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DetectorModelDefinitionBuilder {
    pub(crate) states: std::option::Option<std::vec::Vec<crate::types::State>>,
    pub(crate) initial_state_name: std::option::Option<std::string::String>,
}
impl DetectorModelDefinitionBuilder {
    /// Appends an item to `states`.
    ///
    /// To override the contents of this collection use [`set_states`](Self::set_states).
    ///
    /// <p>Information about the states of the detector.</p>
    pub fn states(mut self, input: crate::types::State) -> Self {
        let mut v = self.states.unwrap_or_default();
        v.push(input);
        self.states = Some(v);
        self
    }
    /// <p>Information about the states of the detector.</p>
    pub fn set_states(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::State>>,
    ) -> Self {
        self.states = input;
        self
    }
    /// <p>The state that is entered at the creation of each detector (instance).</p>
    pub fn initial_state_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.initial_state_name = Some(input.into());
        self
    }
    /// <p>The state that is entered at the creation of each detector (instance).</p>
    pub fn set_initial_state_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.initial_state_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DetectorModelDefinition`](crate::types::DetectorModelDefinition).
    pub fn build(self) -> crate::types::DetectorModelDefinition {
        crate::types::DetectorModelDefinition {
            states: self.states,
            initial_state_name: self.initial_state_name,
        }
    }
}
