// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Sends information about the detector model instance and the event that triggered the action to an Amazon SQS queue.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SqsAction {
    /// <p>The URL of the SQS queue where the data is written.</p>
    #[doc(hidden)]
    pub queue_url: std::option::Option<std::string::String>,
    /// <p>Set this to TRUE if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to FALSE.</p>
    #[doc(hidden)]
    pub use_base64: std::option::Option<bool>,
    /// <p>You can configure the action payload when you send a message to an Amazon SQS queue.</p>
    #[doc(hidden)]
    pub payload: std::option::Option<crate::types::Payload>,
}
impl SqsAction {
    /// <p>The URL of the SQS queue where the data is written.</p>
    pub fn queue_url(&self) -> std::option::Option<&str> {
        self.queue_url.as_deref()
    }
    /// <p>Set this to TRUE if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to FALSE.</p>
    pub fn use_base64(&self) -> std::option::Option<bool> {
        self.use_base64
    }
    /// <p>You can configure the action payload when you send a message to an Amazon SQS queue.</p>
    pub fn payload(&self) -> std::option::Option<&crate::types::Payload> {
        self.payload.as_ref()
    }
}
impl SqsAction {
    /// Creates a new builder-style object to manufacture [`SqsAction`](crate::types::SqsAction).
    pub fn builder() -> crate::types::builders::SqsActionBuilder {
        crate::types::builders::SqsActionBuilder::default()
    }
}

/// A builder for [`SqsAction`](crate::types::SqsAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SqsActionBuilder {
    pub(crate) queue_url: std::option::Option<std::string::String>,
    pub(crate) use_base64: std::option::Option<bool>,
    pub(crate) payload: std::option::Option<crate::types::Payload>,
}
impl SqsActionBuilder {
    /// <p>The URL of the SQS queue where the data is written.</p>
    pub fn queue_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.queue_url = Some(input.into());
        self
    }
    /// <p>The URL of the SQS queue where the data is written.</p>
    pub fn set_queue_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.queue_url = input;
        self
    }
    /// <p>Set this to TRUE if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to FALSE.</p>
    pub fn use_base64(mut self, input: bool) -> Self {
        self.use_base64 = Some(input);
        self
    }
    /// <p>Set this to TRUE if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to FALSE.</p>
    pub fn set_use_base64(mut self, input: std::option::Option<bool>) -> Self {
        self.use_base64 = input;
        self
    }
    /// <p>You can configure the action payload when you send a message to an Amazon SQS queue.</p>
    pub fn payload(mut self, input: crate::types::Payload) -> Self {
        self.payload = Some(input);
        self
    }
    /// <p>You can configure the action payload when you send a message to an Amazon SQS queue.</p>
    pub fn set_payload(mut self, input: std::option::Option<crate::types::Payload>) -> Self {
        self.payload = input;
        self
    }
    /// Consumes the builder and constructs a [`SqsAction`](crate::types::SqsAction).
    pub fn build(self) -> crate::types::SqsAction {
        crate::types::SqsAction {
            queue_url: self.queue_url,
            use_base64: self.use_base64,
            payload: self.payload,
        }
    }
}
