// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.</p>
/// <p>You must use expressions for all parameters in <code>IotSiteWiseAction</code>. The expressions accept literals, operators, functions, references, and substitutions templates.</p>
/// <p class="title"> <b>Examples</b> </p>
/// <ul>
/// <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>propertyAlias</code> parameter can be <code>'/company/windfarm/3/turbine/7/temperature'</code>.</p> </li>
/// <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>assetId</code> parameter can be <code>$input.TurbineInput.assetId1</code>.</p> </li>
/// <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>propertyAlias</code> parameter uses a substitution template. </p> <p> <code>'company/windfarm/${$input.TemperatureInput.sensorData.windfarmID}/turbine/ ${$input.TemperatureInput.sensorData.turbineID}/temperature'</code> </p> </li>
/// </ul>
/// <p>You must specify either <code>propertyAlias</code> or both <code>assetId</code> and <code>propertyId</code> to identify the target asset property in AWS IoT SiteWise.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IotSiteWiseAction {
    /// <p>A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier.</p>
    #[doc(hidden)]
    pub entry_id: std::option::Option<std::string::String>,
    /// <p>The ID of the asset that has the specified property.</p>
    #[doc(hidden)]
    pub asset_id: std::option::Option<std::string::String>,
    /// <p>The ID of the asset property.</p>
    #[doc(hidden)]
    pub property_id: std::option::Option<std::string::String>,
    /// <p>The alias of the asset property.</p>
    #[doc(hidden)]
    pub property_alias: std::option::Option<std::string::String>,
    /// <p>The value to send to the asset property. This value contains timestamp, quality, and value (TQV) information. </p>
    #[doc(hidden)]
    pub property_value: std::option::Option<crate::types::AssetPropertyValue>,
}
impl IotSiteWiseAction {
    /// <p>A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier.</p>
    pub fn entry_id(&self) -> std::option::Option<&str> {
        self.entry_id.as_deref()
    }
    /// <p>The ID of the asset that has the specified property.</p>
    pub fn asset_id(&self) -> std::option::Option<&str> {
        self.asset_id.as_deref()
    }
    /// <p>The ID of the asset property.</p>
    pub fn property_id(&self) -> std::option::Option<&str> {
        self.property_id.as_deref()
    }
    /// <p>The alias of the asset property.</p>
    pub fn property_alias(&self) -> std::option::Option<&str> {
        self.property_alias.as_deref()
    }
    /// <p>The value to send to the asset property. This value contains timestamp, quality, and value (TQV) information. </p>
    pub fn property_value(&self) -> std::option::Option<&crate::types::AssetPropertyValue> {
        self.property_value.as_ref()
    }
}
impl IotSiteWiseAction {
    /// Creates a new builder-style object to manufacture [`IotSiteWiseAction`](crate::types::IotSiteWiseAction).
    pub fn builder() -> crate::types::builders::IotSiteWiseActionBuilder {
        crate::types::builders::IotSiteWiseActionBuilder::default()
    }
}

/// A builder for [`IotSiteWiseAction`](crate::types::IotSiteWiseAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IotSiteWiseActionBuilder {
    pub(crate) entry_id: std::option::Option<std::string::String>,
    pub(crate) asset_id: std::option::Option<std::string::String>,
    pub(crate) property_id: std::option::Option<std::string::String>,
    pub(crate) property_alias: std::option::Option<std::string::String>,
    pub(crate) property_value: std::option::Option<crate::types::AssetPropertyValue>,
}
impl IotSiteWiseActionBuilder {
    /// <p>A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier.</p>
    pub fn entry_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.entry_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier.</p>
    pub fn set_entry_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entry_id = input;
        self
    }
    /// <p>The ID of the asset that has the specified property.</p>
    pub fn asset_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.asset_id = Some(input.into());
        self
    }
    /// <p>The ID of the asset that has the specified property.</p>
    pub fn set_asset_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>The ID of the asset property.</p>
    pub fn property_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.property_id = Some(input.into());
        self
    }
    /// <p>The ID of the asset property.</p>
    pub fn set_property_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.property_id = input;
        self
    }
    /// <p>The alias of the asset property.</p>
    pub fn property_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.property_alias = Some(input.into());
        self
    }
    /// <p>The alias of the asset property.</p>
    pub fn set_property_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.property_alias = input;
        self
    }
    /// <p>The value to send to the asset property. This value contains timestamp, quality, and value (TQV) information. </p>
    pub fn property_value(mut self, input: crate::types::AssetPropertyValue) -> Self {
        self.property_value = Some(input);
        self
    }
    /// <p>The value to send to the asset property. This value contains timestamp, quality, and value (TQV) information. </p>
    pub fn set_property_value(
        mut self,
        input: std::option::Option<crate::types::AssetPropertyValue>,
    ) -> Self {
        self.property_value = input;
        self
    }
    /// Consumes the builder and constructs a [`IotSiteWiseAction`](crate::types::IotSiteWiseAction).
    pub fn build(self) -> crate::types::IotSiteWiseAction {
        crate::types::IotSiteWiseAction {
            entry_id: self.entry_id,
            asset_id: self.asset_id,
            property_id: self.property_id,
            property_alias: self.property_alias,
            property_value: self.property_value,
        }
    }
}
