// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the result of the analysis.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AnalysisResult {
    /// <p>The type of the analysis result. Analyses fall into the following types based on the validators used to generate the analysis result:</p>
    /// <ul>
    /// <li> <p> <code>supported-actions</code> - You must specify AWS IoT Events supported actions that work with other AWS services in a supported AWS Region.</p> </li>
    /// <li> <p> <code>service-limits</code> - Resources or API operations can't exceed service quotas (also known as limits). Update your detector model or request a quota increase.</p> </li>
    /// <li> <p> <code>structure</code> - The detector model must follow a structure that AWS IoT Events supports. </p> </li>
    /// <li> <p> <code>expression-syntax</code> - Your expression must follow the required syntax.</p> </li>
    /// <li> <p> <code>data-type</code> - Data types referenced in the detector model must be compatible.</p> </li>
    /// <li> <p> <code>referenced-data</code> - You must define the data referenced in your detector model before you can use the data.</p> </li>
    /// <li> <p> <code>referenced-resource</code> - Resources that the detector model uses must be available.</p> </li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-analyze-api.html">Running detector model analyses</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The severity level of the analysis result. Based on the severity level, analysis results fall into three general categories:</p>
    /// <ul>
    /// <li> <p> <code>INFO</code> - An information result tells you about a significant field in your detector model. This type of result usually doesn't require immediate action.</p> </li>
    /// <li> <p> <code>WARNING</code> - A warning result draws special attention to fields that might cause issues for your detector model. We recommend that you review warnings and take necessary actions before you use your detector model in production environments. Otherwise, the detector model might not work as expected.</p> </li>
    /// <li> <p> <code>ERROR</code> - An error result notifies you about a problem found in your detector model. You must fix all errors before you can publish your detector model.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub level: std::option::Option<crate::types::AnalysisResultLevel>,
    /// <p>Contains additional information about the analysis result.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>Contains one or more locations that you can use to locate the fields in your detector model that the analysis result references.</p>
    #[doc(hidden)]
    pub locations: std::option::Option<std::vec::Vec<crate::types::AnalysisResultLocation>>,
}
impl AnalysisResult {
    /// <p>The type of the analysis result. Analyses fall into the following types based on the validators used to generate the analysis result:</p>
    /// <ul>
    /// <li> <p> <code>supported-actions</code> - You must specify AWS IoT Events supported actions that work with other AWS services in a supported AWS Region.</p> </li>
    /// <li> <p> <code>service-limits</code> - Resources or API operations can't exceed service quotas (also known as limits). Update your detector model or request a quota increase.</p> </li>
    /// <li> <p> <code>structure</code> - The detector model must follow a structure that AWS IoT Events supports. </p> </li>
    /// <li> <p> <code>expression-syntax</code> - Your expression must follow the required syntax.</p> </li>
    /// <li> <p> <code>data-type</code> - Data types referenced in the detector model must be compatible.</p> </li>
    /// <li> <p> <code>referenced-data</code> - You must define the data referenced in your detector model before you can use the data.</p> </li>
    /// <li> <p> <code>referenced-resource</code> - Resources that the detector model uses must be available.</p> </li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-analyze-api.html">Running detector model analyses</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The severity level of the analysis result. Based on the severity level, analysis results fall into three general categories:</p>
    /// <ul>
    /// <li> <p> <code>INFO</code> - An information result tells you about a significant field in your detector model. This type of result usually doesn't require immediate action.</p> </li>
    /// <li> <p> <code>WARNING</code> - A warning result draws special attention to fields that might cause issues for your detector model. We recommend that you review warnings and take necessary actions before you use your detector model in production environments. Otherwise, the detector model might not work as expected.</p> </li>
    /// <li> <p> <code>ERROR</code> - An error result notifies you about a problem found in your detector model. You must fix all errors before you can publish your detector model.</p> </li>
    /// </ul>
    pub fn level(&self) -> std::option::Option<&crate::types::AnalysisResultLevel> {
        self.level.as_ref()
    }
    /// <p>Contains additional information about the analysis result.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>Contains one or more locations that you can use to locate the fields in your detector model that the analysis result references.</p>
    pub fn locations(&self) -> std::option::Option<&[crate::types::AnalysisResultLocation]> {
        self.locations.as_deref()
    }
}
impl AnalysisResult {
    /// Creates a new builder-style object to manufacture [`AnalysisResult`](crate::types::AnalysisResult).
    pub fn builder() -> crate::types::builders::AnalysisResultBuilder {
        crate::types::builders::AnalysisResultBuilder::default()
    }
}

/// A builder for [`AnalysisResult`](crate::types::AnalysisResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AnalysisResultBuilder {
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) level: std::option::Option<crate::types::AnalysisResultLevel>,
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) locations: std::option::Option<std::vec::Vec<crate::types::AnalysisResultLocation>>,
}
impl AnalysisResultBuilder {
    /// <p>The type of the analysis result. Analyses fall into the following types based on the validators used to generate the analysis result:</p>
    /// <ul>
    /// <li> <p> <code>supported-actions</code> - You must specify AWS IoT Events supported actions that work with other AWS services in a supported AWS Region.</p> </li>
    /// <li> <p> <code>service-limits</code> - Resources or API operations can't exceed service quotas (also known as limits). Update your detector model or request a quota increase.</p> </li>
    /// <li> <p> <code>structure</code> - The detector model must follow a structure that AWS IoT Events supports. </p> </li>
    /// <li> <p> <code>expression-syntax</code> - Your expression must follow the required syntax.</p> </li>
    /// <li> <p> <code>data-type</code> - Data types referenced in the detector model must be compatible.</p> </li>
    /// <li> <p> <code>referenced-data</code> - You must define the data referenced in your detector model before you can use the data.</p> </li>
    /// <li> <p> <code>referenced-resource</code> - Resources that the detector model uses must be available.</p> </li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-analyze-api.html">Running detector model analyses</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of the analysis result. Analyses fall into the following types based on the validators used to generate the analysis result:</p>
    /// <ul>
    /// <li> <p> <code>supported-actions</code> - You must specify AWS IoT Events supported actions that work with other AWS services in a supported AWS Region.</p> </li>
    /// <li> <p> <code>service-limits</code> - Resources or API operations can't exceed service quotas (also known as limits). Update your detector model or request a quota increase.</p> </li>
    /// <li> <p> <code>structure</code> - The detector model must follow a structure that AWS IoT Events supports. </p> </li>
    /// <li> <p> <code>expression-syntax</code> - Your expression must follow the required syntax.</p> </li>
    /// <li> <p> <code>data-type</code> - Data types referenced in the detector model must be compatible.</p> </li>
    /// <li> <p> <code>referenced-data</code> - You must define the data referenced in your detector model before you can use the data.</p> </li>
    /// <li> <p> <code>referenced-resource</code> - Resources that the detector model uses must be available.</p> </li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-analyze-api.html">Running detector model analyses</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The severity level of the analysis result. Based on the severity level, analysis results fall into three general categories:</p>
    /// <ul>
    /// <li> <p> <code>INFO</code> - An information result tells you about a significant field in your detector model. This type of result usually doesn't require immediate action.</p> </li>
    /// <li> <p> <code>WARNING</code> - A warning result draws special attention to fields that might cause issues for your detector model. We recommend that you review warnings and take necessary actions before you use your detector model in production environments. Otherwise, the detector model might not work as expected.</p> </li>
    /// <li> <p> <code>ERROR</code> - An error result notifies you about a problem found in your detector model. You must fix all errors before you can publish your detector model.</p> </li>
    /// </ul>
    pub fn level(mut self, input: crate::types::AnalysisResultLevel) -> Self {
        self.level = Some(input);
        self
    }
    /// <p>The severity level of the analysis result. Based on the severity level, analysis results fall into three general categories:</p>
    /// <ul>
    /// <li> <p> <code>INFO</code> - An information result tells you about a significant field in your detector model. This type of result usually doesn't require immediate action.</p> </li>
    /// <li> <p> <code>WARNING</code> - A warning result draws special attention to fields that might cause issues for your detector model. We recommend that you review warnings and take necessary actions before you use your detector model in production environments. Otherwise, the detector model might not work as expected.</p> </li>
    /// <li> <p> <code>ERROR</code> - An error result notifies you about a problem found in your detector model. You must fix all errors before you can publish your detector model.</p> </li>
    /// </ul>
    pub fn set_level(
        mut self,
        input: std::option::Option<crate::types::AnalysisResultLevel>,
    ) -> Self {
        self.level = input;
        self
    }
    /// <p>Contains additional information about the analysis result.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>Contains additional information about the analysis result.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Appends an item to `locations`.
    ///
    /// To override the contents of this collection use [`set_locations`](Self::set_locations).
    ///
    /// <p>Contains one or more locations that you can use to locate the fields in your detector model that the analysis result references.</p>
    pub fn locations(mut self, input: crate::types::AnalysisResultLocation) -> Self {
        let mut v = self.locations.unwrap_or_default();
        v.push(input);
        self.locations = Some(v);
        self
    }
    /// <p>Contains one or more locations that you can use to locate the fields in your detector model that the analysis result references.</p>
    pub fn set_locations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AnalysisResultLocation>>,
    ) -> Self {
        self.locations = input;
        self
    }
    /// Consumes the builder and constructs a [`AnalysisResult`](crate::types::AnalysisResult).
    pub fn build(self) -> crate::types::AnalysisResult {
        crate::types::AnalysisResult {
            r#type: self.r#type,
            level: self.level,
            message: self.message,
            locations: self.locations,
        }
    }
}
