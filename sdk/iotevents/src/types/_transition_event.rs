// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the actions performed and the next state entered when a <code>condition</code> evaluates to TRUE.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TransitionEvent {
    /// <p>The name of the transition event.</p>
    pub event_name: ::std::string::String,
    /// <p>Required. A Boolean expression that when TRUE causes the actions to be performed and the <code>nextState</code> to be entered.</p>
    pub condition: ::std::string::String,
    /// <p>The actions to be performed.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::Action>>,
    /// <p>The next state to enter.</p>
    pub next_state: ::std::string::String,
}
impl TransitionEvent {
    /// <p>The name of the transition event.</p>
    pub fn event_name(&self) -> &str {
        use std::ops::Deref;
        self.event_name.deref()
    }
    /// <p>Required. A Boolean expression that when TRUE causes the actions to be performed and the <code>nextState</code> to be entered.</p>
    pub fn condition(&self) -> &str {
        use std::ops::Deref;
        self.condition.deref()
    }
    /// <p>The actions to be performed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::Action] {
        self.actions.as_deref().unwrap_or_default()
    }
    /// <p>The next state to enter.</p>
    pub fn next_state(&self) -> &str {
        use std::ops::Deref;
        self.next_state.deref()
    }
}
impl TransitionEvent {
    /// Creates a new builder-style object to manufacture [`TransitionEvent`](crate::types::TransitionEvent).
    pub fn builder() -> crate::types::builders::TransitionEventBuilder {
        crate::types::builders::TransitionEventBuilder::default()
    }
}

/// A builder for [`TransitionEvent`](crate::types::TransitionEvent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TransitionEventBuilder {
    pub(crate) event_name: ::std::option::Option<::std::string::String>,
    pub(crate) condition: ::std::option::Option<::std::string::String>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::Action>>,
    pub(crate) next_state: ::std::option::Option<::std::string::String>,
}
impl TransitionEventBuilder {
    /// <p>The name of the transition event.</p>
    /// This field is required.
    pub fn event_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the transition event.</p>
    pub fn set_event_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_name = input;
        self
    }
    /// <p>The name of the transition event.</p>
    pub fn get_event_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_name
    }
    /// <p>Required. A Boolean expression that when TRUE causes the actions to be performed and the <code>nextState</code> to be entered.</p>
    /// This field is required.
    pub fn condition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.condition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Required. A Boolean expression that when TRUE causes the actions to be performed and the <code>nextState</code> to be entered.</p>
    pub fn set_condition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.condition = input;
        self
    }
    /// <p>Required. A Boolean expression that when TRUE causes the actions to be performed and the <code>nextState</code> to be entered.</p>
    pub fn get_condition(&self) -> &::std::option::Option<::std::string::String> {
        &self.condition
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The actions to be performed.</p>
    pub fn actions(mut self, input: crate::types::Action) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The actions to be performed.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Action>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The actions to be performed.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Action>> {
        &self.actions
    }
    /// <p>The next state to enter.</p>
    /// This field is required.
    pub fn next_state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The next state to enter.</p>
    pub fn set_next_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_state = input;
        self
    }
    /// <p>The next state to enter.</p>
    pub fn get_next_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_state
    }
    /// Consumes the builder and constructs a [`TransitionEvent`](crate::types::TransitionEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`event_name`](crate::types::builders::TransitionEventBuilder::event_name)
    /// - [`condition`](crate::types::builders::TransitionEventBuilder::condition)
    /// - [`next_state`](crate::types::builders::TransitionEventBuilder::next_state)
    pub fn build(self) -> ::std::result::Result<crate::types::TransitionEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TransitionEvent {
            event_name: self.event_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_name",
                    "event_name was not specified but it is required when building TransitionEvent",
                )
            })?,
            condition: self.condition.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "condition",
                    "condition was not specified but it is required when building TransitionEvent",
                )
            })?,
            actions: self.actions,
            next_state: self.next_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "next_state",
                    "next_state was not specified but it is required when building TransitionEvent",
                )
            })?,
        })
    }
}
