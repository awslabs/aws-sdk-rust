// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about how the detector model is configured.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetectorModelConfiguration {
    /// <p>The name of the detector model.</p>
    #[doc(hidden)]
    pub detector_model_name: std::option::Option<std::string::String>,
    /// <p>The version of the detector model.</p>
    #[doc(hidden)]
    pub detector_model_version: std::option::Option<std::string::String>,
    /// <p>A brief description of the detector model.</p>
    #[doc(hidden)]
    pub detector_model_description: std::option::Option<std::string::String>,
    /// <p>The ARN of the detector model.</p>
    #[doc(hidden)]
    pub detector_model_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the role that grants permission to AWS IoT Events to perform its operations.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The time the detector model was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time the detector model was last updated.</p>
    #[doc(hidden)]
    pub last_update_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the detector model.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::DetectorModelVersionStatus>,
    /// <p>The value used to identify a detector instance. When a device or system sends input, a new detector instance with a unique key value is created. AWS IoT Events can continue to route input to its corresponding detector instance based on this identifying information. </p>
    /// <p>This parameter uses a JSON-path expression to select the attribute-value pair in the message payload that is used for identification. To route the message to the correct detector instance, the device must send a message payload that contains the same attribute-value.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>Information about the order in which events are evaluated and how actions are executed. </p>
    #[doc(hidden)]
    pub evaluation_method: std::option::Option<crate::types::EvaluationMethod>,
}
impl DetectorModelConfiguration {
    /// <p>The name of the detector model.</p>
    pub fn detector_model_name(&self) -> std::option::Option<&str> {
        self.detector_model_name.as_deref()
    }
    /// <p>The version of the detector model.</p>
    pub fn detector_model_version(&self) -> std::option::Option<&str> {
        self.detector_model_version.as_deref()
    }
    /// <p>A brief description of the detector model.</p>
    pub fn detector_model_description(&self) -> std::option::Option<&str> {
        self.detector_model_description.as_deref()
    }
    /// <p>The ARN of the detector model.</p>
    pub fn detector_model_arn(&self) -> std::option::Option<&str> {
        self.detector_model_arn.as_deref()
    }
    /// <p>The ARN of the role that grants permission to AWS IoT Events to perform its operations.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The time the detector model was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time the detector model was last updated.</p>
    pub fn last_update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
    /// <p>The status of the detector model.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::DetectorModelVersionStatus> {
        self.status.as_ref()
    }
    /// <p>The value used to identify a detector instance. When a device or system sends input, a new detector instance with a unique key value is created. AWS IoT Events can continue to route input to its corresponding detector instance based on this identifying information. </p>
    /// <p>This parameter uses a JSON-path expression to select the attribute-value pair in the message payload that is used for identification. To route the message to the correct detector instance, the device must send a message payload that contains the same attribute-value.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>Information about the order in which events are evaluated and how actions are executed. </p>
    pub fn evaluation_method(&self) -> std::option::Option<&crate::types::EvaluationMethod> {
        self.evaluation_method.as_ref()
    }
}
impl DetectorModelConfiguration {
    /// Creates a new builder-style object to manufacture [`DetectorModelConfiguration`](crate::types::DetectorModelConfiguration).
    pub fn builder() -> crate::types::builders::DetectorModelConfigurationBuilder {
        crate::types::builders::DetectorModelConfigurationBuilder::default()
    }
}

/// A builder for [`DetectorModelConfiguration`](crate::types::DetectorModelConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DetectorModelConfigurationBuilder {
    pub(crate) detector_model_name: std::option::Option<std::string::String>,
    pub(crate) detector_model_version: std::option::Option<std::string::String>,
    pub(crate) detector_model_description: std::option::Option<std::string::String>,
    pub(crate) detector_model_arn: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_update_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::DetectorModelVersionStatus>,
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) evaluation_method: std::option::Option<crate::types::EvaluationMethod>,
}
impl DetectorModelConfigurationBuilder {
    /// <p>The name of the detector model.</p>
    pub fn detector_model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_model_name = Some(input.into());
        self
    }
    /// <p>The name of the detector model.</p>
    pub fn set_detector_model_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.detector_model_name = input;
        self
    }
    /// <p>The version of the detector model.</p>
    pub fn detector_model_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_model_version = Some(input.into());
        self
    }
    /// <p>The version of the detector model.</p>
    pub fn set_detector_model_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.detector_model_version = input;
        self
    }
    /// <p>A brief description of the detector model.</p>
    pub fn detector_model_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_model_description = Some(input.into());
        self
    }
    /// <p>A brief description of the detector model.</p>
    pub fn set_detector_model_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.detector_model_description = input;
        self
    }
    /// <p>The ARN of the detector model.</p>
    pub fn detector_model_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.detector_model_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the detector model.</p>
    pub fn set_detector_model_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.detector_model_arn = input;
        self
    }
    /// <p>The ARN of the role that grants permission to AWS IoT Events to perform its operations.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the role that grants permission to AWS IoT Events to perform its operations.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The time the detector model was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time the detector model was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time the detector model was last updated.</p>
    pub fn last_update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_update_time = Some(input);
        self
    }
    /// <p>The time the detector model was last updated.</p>
    pub fn set_last_update_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>The status of the detector model.</p>
    pub fn status(mut self, input: crate::types::DetectorModelVersionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the detector model.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::DetectorModelVersionStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The value used to identify a detector instance. When a device or system sends input, a new detector instance with a unique key value is created. AWS IoT Events can continue to route input to its corresponding detector instance based on this identifying information. </p>
    /// <p>This parameter uses a JSON-path expression to select the attribute-value pair in the message payload that is used for identification. To route the message to the correct detector instance, the device must send a message payload that contains the same attribute-value.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The value used to identify a detector instance. When a device or system sends input, a new detector instance with a unique key value is created. AWS IoT Events can continue to route input to its corresponding detector instance based on this identifying information. </p>
    /// <p>This parameter uses a JSON-path expression to select the attribute-value pair in the message payload that is used for identification. To route the message to the correct detector instance, the device must send a message payload that contains the same attribute-value.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>Information about the order in which events are evaluated and how actions are executed. </p>
    pub fn evaluation_method(mut self, input: crate::types::EvaluationMethod) -> Self {
        self.evaluation_method = Some(input);
        self
    }
    /// <p>Information about the order in which events are evaluated and how actions are executed. </p>
    pub fn set_evaluation_method(
        mut self,
        input: std::option::Option<crate::types::EvaluationMethod>,
    ) -> Self {
        self.evaluation_method = input;
        self
    }
    /// Consumes the builder and constructs a [`DetectorModelConfiguration`](crate::types::DetectorModelConfiguration).
    pub fn build(self) -> crate::types::DetectorModelConfiguration {
        crate::types::DetectorModelConfiguration {
            detector_model_name: self.detector_model_name,
            detector_model_version: self.detector_model_version,
            detector_model_description: self.detector_model_description,
            detector_model_arn: self.detector_model_arn,
            role_arn: self.role_arn,
            creation_time: self.creation_time,
            last_update_time: self.last_update_time,
            status: self.status,
            key: self.key,
            evaluation_method: self.evaluation_method,
        }
    }
}
