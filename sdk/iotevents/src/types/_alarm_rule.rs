// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines when your alarm is invoked.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AlarmRule {
    /// <p>A rule that compares an input property value to a threshold value with a comparison operator.</p>
    #[doc(hidden)]
    pub simple_rule: std::option::Option<crate::types::SimpleRule>,
}
impl AlarmRule {
    /// <p>A rule that compares an input property value to a threshold value with a comparison operator.</p>
    pub fn simple_rule(&self) -> std::option::Option<&crate::types::SimpleRule> {
        self.simple_rule.as_ref()
    }
}
impl AlarmRule {
    /// Creates a new builder-style object to manufacture [`AlarmRule`](crate::types::AlarmRule).
    pub fn builder() -> crate::types::builders::AlarmRuleBuilder {
        crate::types::builders::AlarmRuleBuilder::default()
    }
}

/// A builder for [`AlarmRule`](crate::types::AlarmRule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AlarmRuleBuilder {
    pub(crate) simple_rule: std::option::Option<crate::types::SimpleRule>,
}
impl AlarmRuleBuilder {
    /// <p>A rule that compares an input property value to a threshold value with a comparison operator.</p>
    pub fn simple_rule(mut self, input: crate::types::SimpleRule) -> Self {
        self.simple_rule = Some(input);
        self
    }
    /// <p>A rule that compares an input property value to a threshold value with a comparison operator.</p>
    pub fn set_simple_rule(mut self, input: std::option::Option<crate::types::SimpleRule>) -> Self {
        self.simple_rule = input;
        self
    }
    /// Consumes the builder and constructs a [`AlarmRule`](crate::types::AlarmRule).
    pub fn build(self) -> crate::types::AlarmRule {
        crate::types::AlarmRule {
            simple_rule: self.simple_rule,
        }
    }
}
