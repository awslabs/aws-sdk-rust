// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using <code>BatchPutMessage</code>. Each such message contains a JSON payload. Those attributes (and their paired values) specified here are available for use in the <code>condition</code> expressions used by detectors. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Attribute {
    /// <p>An expression that specifies an attribute-value pair in a JSON structure. Use this to specify an attribute from the JSON payload that is made available by the input. Inputs are derived from messages sent to AWS IoT Events (<code>BatchPutMessage</code>). Each such message contains a JSON payload. The attribute (and its paired value) specified here are available for use in the <code>condition</code> expressions used by detectors. </p>
    /// <p>Syntax: <code>
    /// <field-name>
    /// .
    /// <field-name>
    /// ...
    /// </field-name>
    /// </field-name></code> </p>
    pub json_path: ::std::string::String,
}
impl Attribute {
    /// <p>An expression that specifies an attribute-value pair in a JSON structure. Use this to specify an attribute from the JSON payload that is made available by the input. Inputs are derived from messages sent to AWS IoT Events (<code>BatchPutMessage</code>). Each such message contains a JSON payload. The attribute (and its paired value) specified here are available for use in the <code>condition</code> expressions used by detectors. </p>
    /// <p>Syntax: <code>
    /// <field-name>
    /// .
    /// <field-name>
    /// ...
    /// </field-name>
    /// </field-name></code> </p>
    pub fn json_path(&self) -> &str {
        use std::ops::Deref;
        self.json_path.deref()
    }
}
impl Attribute {
    /// Creates a new builder-style object to manufacture [`Attribute`](crate::types::Attribute).
    pub fn builder() -> crate::types::builders::AttributeBuilder {
        crate::types::builders::AttributeBuilder::default()
    }
}

/// A builder for [`Attribute`](crate::types::Attribute).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AttributeBuilder {
    pub(crate) json_path: ::std::option::Option<::std::string::String>,
}
impl AttributeBuilder {
    /// <p>An expression that specifies an attribute-value pair in a JSON structure. Use this to specify an attribute from the JSON payload that is made available by the input. Inputs are derived from messages sent to AWS IoT Events (<code>BatchPutMessage</code>). Each such message contains a JSON payload. The attribute (and its paired value) specified here are available for use in the <code>condition</code> expressions used by detectors. </p>
    /// <p>Syntax: <code>
    /// <field-name>
    /// .
    /// <field-name>
    /// ...
    /// </field-name>
    /// </field-name></code> </p>
    /// This field is required.
    pub fn json_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.json_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An expression that specifies an attribute-value pair in a JSON structure. Use this to specify an attribute from the JSON payload that is made available by the input. Inputs are derived from messages sent to AWS IoT Events (<code>BatchPutMessage</code>). Each such message contains a JSON payload. The attribute (and its paired value) specified here are available for use in the <code>condition</code> expressions used by detectors. </p>
    /// <p>Syntax: <code>
    /// <field-name>
    /// .
    /// <field-name>
    /// ...
    /// </field-name>
    /// </field-name></code> </p>
    pub fn set_json_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.json_path = input;
        self
    }
    /// <p>An expression that specifies an attribute-value pair in a JSON structure. Use this to specify an attribute from the JSON payload that is made available by the input. Inputs are derived from messages sent to AWS IoT Events (<code>BatchPutMessage</code>). Each such message contains a JSON payload. The attribute (and its paired value) specified here are available for use in the <code>condition</code> expressions used by detectors. </p>
    /// <p>Syntax: <code>
    /// <field-name>
    /// .
    /// <field-name>
    /// ...
    /// </field-name>
    /// </field-name></code> </p>
    pub fn get_json_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.json_path
    }
    /// Consumes the builder and constructs a [`Attribute`](crate::types::Attribute).
    /// This method will fail if any of the following fields are not set:
    /// - [`json_path`](crate::types::builders::AttributeBuilder::json_path)
    pub fn build(self) -> ::std::result::Result<crate::types::Attribute, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Attribute {
            json_path: self.json_path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "json_path",
                    "json_path was not specified but it is required when building Attribute",
                )
            })?,
        })
    }
}
