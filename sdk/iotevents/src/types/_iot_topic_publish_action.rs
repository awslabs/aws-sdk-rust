// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information required to publish the MQTT message through the AWS IoT message broker.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IotTopicPublishAction {
    /// <p>The MQTT topic of the message. You can use a string expression that includes variables (<code>$variable.
    /// <variable-name></variable-name></code>) and input values (<code>$input.
    /// <input-name>
    /// .
    /// <path-to-datum></path-to-datum>
    /// </input-name></code>) as the topic string.</p>
    #[doc(hidden)]
    pub mqtt_topic: std::option::Option<std::string::String>,
    /// <p>You can configure the action payload when you publish a message to an AWS IoT Core topic.</p>
    #[doc(hidden)]
    pub payload: std::option::Option<crate::types::Payload>,
}
impl IotTopicPublishAction {
    /// <p>The MQTT topic of the message. You can use a string expression that includes variables (<code>$variable.
    /// <variable-name></variable-name></code>) and input values (<code>$input.
    /// <input-name>
    /// .
    /// <path-to-datum></path-to-datum>
    /// </input-name></code>) as the topic string.</p>
    pub fn mqtt_topic(&self) -> std::option::Option<&str> {
        self.mqtt_topic.as_deref()
    }
    /// <p>You can configure the action payload when you publish a message to an AWS IoT Core topic.</p>
    pub fn payload(&self) -> std::option::Option<&crate::types::Payload> {
        self.payload.as_ref()
    }
}
impl IotTopicPublishAction {
    /// Creates a new builder-style object to manufacture [`IotTopicPublishAction`](crate::types::IotTopicPublishAction).
    pub fn builder() -> crate::types::builders::IotTopicPublishActionBuilder {
        crate::types::builders::IotTopicPublishActionBuilder::default()
    }
}

/// A builder for [`IotTopicPublishAction`](crate::types::IotTopicPublishAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IotTopicPublishActionBuilder {
    pub(crate) mqtt_topic: std::option::Option<std::string::String>,
    pub(crate) payload: std::option::Option<crate::types::Payload>,
}
impl IotTopicPublishActionBuilder {
    /// <p>The MQTT topic of the message. You can use a string expression that includes variables (<code>$variable.
    /// <variable-name></variable-name></code>) and input values (<code>$input.
    /// <input-name>
    /// .
    /// <path-to-datum></path-to-datum>
    /// </input-name></code>) as the topic string.</p>
    pub fn mqtt_topic(mut self, input: impl Into<std::string::String>) -> Self {
        self.mqtt_topic = Some(input.into());
        self
    }
    /// <p>The MQTT topic of the message. You can use a string expression that includes variables (<code>$variable.
    /// <variable-name></variable-name></code>) and input values (<code>$input.
    /// <input-name>
    /// .
    /// <path-to-datum></path-to-datum>
    /// </input-name></code>) as the topic string.</p>
    pub fn set_mqtt_topic(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mqtt_topic = input;
        self
    }
    /// <p>You can configure the action payload when you publish a message to an AWS IoT Core topic.</p>
    pub fn payload(mut self, input: crate::types::Payload) -> Self {
        self.payload = Some(input);
        self
    }
    /// <p>You can configure the action payload when you publish a message to an AWS IoT Core topic.</p>
    pub fn set_payload(mut self, input: std::option::Option<crate::types::Payload>) -> Self {
        self.payload = input;
        self
    }
    /// Consumes the builder and constructs a [`IotTopicPublishAction`](crate::types::IotTopicPublishAction).
    pub fn build(self) -> crate::types::IotTopicPublishAction {
        crate::types::IotTopicPublishAction {
            mqtt_topic: self.mqtt_topic,
            payload: self.payload,
        }
    }
}
