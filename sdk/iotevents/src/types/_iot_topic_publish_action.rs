// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information required to publish the MQTT message through the AWS IoT message broker.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IotTopicPublishAction {
    /// <p>The MQTT topic of the message. You can use a string expression that includes variables (<code>$variable.
    /// <variable-name></variable-name></code>) and input values (<code>$input.
    /// <input-name>
    /// .
    /// <path-to-datum></path-to-datum>
    /// </input-name></code>) as the topic string.</p>
    pub mqtt_topic: ::std::string::String,
    /// <p>You can configure the action payload when you publish a message to an AWS IoT Core topic.</p>
    pub payload: ::std::option::Option<crate::types::Payload>,
}
impl IotTopicPublishAction {
    /// <p>The MQTT topic of the message. You can use a string expression that includes variables (<code>$variable.
    /// <variable-name></variable-name></code>) and input values (<code>$input.
    /// <input-name>
    /// .
    /// <path-to-datum></path-to-datum>
    /// </input-name></code>) as the topic string.</p>
    pub fn mqtt_topic(&self) -> &str {
        use std::ops::Deref;
        self.mqtt_topic.deref()
    }
    /// <p>You can configure the action payload when you publish a message to an AWS IoT Core topic.</p>
    pub fn payload(&self) -> ::std::option::Option<&crate::types::Payload> {
        self.payload.as_ref()
    }
}
impl IotTopicPublishAction {
    /// Creates a new builder-style object to manufacture [`IotTopicPublishAction`](crate::types::IotTopicPublishAction).
    pub fn builder() -> crate::types::builders::IotTopicPublishActionBuilder {
        crate::types::builders::IotTopicPublishActionBuilder::default()
    }
}

/// A builder for [`IotTopicPublishAction`](crate::types::IotTopicPublishAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IotTopicPublishActionBuilder {
    pub(crate) mqtt_topic: ::std::option::Option<::std::string::String>,
    pub(crate) payload: ::std::option::Option<crate::types::Payload>,
}
impl IotTopicPublishActionBuilder {
    /// <p>The MQTT topic of the message. You can use a string expression that includes variables (<code>$variable.
    /// <variable-name></variable-name></code>) and input values (<code>$input.
    /// <input-name>
    /// .
    /// <path-to-datum></path-to-datum>
    /// </input-name></code>) as the topic string.</p>
    /// This field is required.
    pub fn mqtt_topic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mqtt_topic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MQTT topic of the message. You can use a string expression that includes variables (<code>$variable.
    /// <variable-name></variable-name></code>) and input values (<code>$input.
    /// <input-name>
    /// .
    /// <path-to-datum></path-to-datum>
    /// </input-name></code>) as the topic string.</p>
    pub fn set_mqtt_topic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mqtt_topic = input;
        self
    }
    /// <p>The MQTT topic of the message. You can use a string expression that includes variables (<code>$variable.
    /// <variable-name></variable-name></code>) and input values (<code>$input.
    /// <input-name>
    /// .
    /// <path-to-datum></path-to-datum>
    /// </input-name></code>) as the topic string.</p>
    pub fn get_mqtt_topic(&self) -> &::std::option::Option<::std::string::String> {
        &self.mqtt_topic
    }
    /// <p>You can configure the action payload when you publish a message to an AWS IoT Core topic.</p>
    pub fn payload(mut self, input: crate::types::Payload) -> Self {
        self.payload = ::std::option::Option::Some(input);
        self
    }
    /// <p>You can configure the action payload when you publish a message to an AWS IoT Core topic.</p>
    pub fn set_payload(mut self, input: ::std::option::Option<crate::types::Payload>) -> Self {
        self.payload = input;
        self
    }
    /// <p>You can configure the action payload when you publish a message to an AWS IoT Core topic.</p>
    pub fn get_payload(&self) -> &::std::option::Option<crate::types::Payload> {
        &self.payload
    }
    /// Consumes the builder and constructs a [`IotTopicPublishAction`](crate::types::IotTopicPublishAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`mqtt_topic`](crate::types::builders::IotTopicPublishActionBuilder::mqtt_topic)
    pub fn build(self) -> ::std::result::Result<crate::types::IotTopicPublishAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IotTopicPublishAction {
            mqtt_topic: self.mqtt_topic.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mqtt_topic",
                    "mqtt_topic was not specified but it is required when building IotTopicPublishAction",
                )
            })?,
            payload: self.payload,
        })
    }
}
