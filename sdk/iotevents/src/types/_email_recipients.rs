// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the information of one or more recipients who receive the emails.</p> <important>
/// <p>You must <a href="https://docs.aws.amazon.com/singlesignon/latest/userguide/addusers.html">add the users that receive emails to your AWS SSO store</a>.</p>
/// </important>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EmailRecipients {
    /// <p>Specifies one or more recipients who receive the email.</p>
    #[doc(hidden)]
    pub to: std::option::Option<std::vec::Vec<crate::types::RecipientDetail>>,
}
impl EmailRecipients {
    /// <p>Specifies one or more recipients who receive the email.</p>
    pub fn to(&self) -> std::option::Option<&[crate::types::RecipientDetail]> {
        self.to.as_deref()
    }
}
impl EmailRecipients {
    /// Creates a new builder-style object to manufacture [`EmailRecipients`](crate::types::EmailRecipients).
    pub fn builder() -> crate::types::builders::EmailRecipientsBuilder {
        crate::types::builders::EmailRecipientsBuilder::default()
    }
}

/// A builder for [`EmailRecipients`](crate::types::EmailRecipients).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EmailRecipientsBuilder {
    pub(crate) to: std::option::Option<std::vec::Vec<crate::types::RecipientDetail>>,
}
impl EmailRecipientsBuilder {
    /// Appends an item to `to`.
    ///
    /// To override the contents of this collection use [`set_to`](Self::set_to).
    ///
    /// <p>Specifies one or more recipients who receive the email.</p>
    pub fn to(mut self, input: crate::types::RecipientDetail) -> Self {
        let mut v = self.to.unwrap_or_default();
        v.push(input);
        self.to = Some(v);
        self
    }
    /// <p>Specifies one or more recipients who receive the email.</p>
    pub fn set_to(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RecipientDetail>>,
    ) -> Self {
        self.to = input;
        self
    }
    /// Consumes the builder and constructs a [`EmailRecipients`](crate::types::EmailRecipients).
    pub fn build(self) -> crate::types::EmailRecipients {
        crate::types::EmailRecipients { to: self.to }
    }
}
