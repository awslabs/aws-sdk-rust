// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the variable and its new value.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SetVariableAction {
    /// <p>The name of the variable.</p>
    pub variable_name: ::std::string::String,
    /// <p>The new value of the variable.</p>
    pub value: ::std::string::String,
}
impl SetVariableAction {
    /// <p>The name of the variable.</p>
    pub fn variable_name(&self) -> &str {
        use std::ops::Deref;
        self.variable_name.deref()
    }
    /// <p>The new value of the variable.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
}
impl SetVariableAction {
    /// Creates a new builder-style object to manufacture [`SetVariableAction`](crate::types::SetVariableAction).
    pub fn builder() -> crate::types::builders::SetVariableActionBuilder {
        crate::types::builders::SetVariableActionBuilder::default()
    }
}

/// A builder for [`SetVariableAction`](crate::types::SetVariableAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SetVariableActionBuilder {
    pub(crate) variable_name: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl SetVariableActionBuilder {
    /// <p>The name of the variable.</p>
    /// This field is required.
    pub fn variable_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.variable_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the variable.</p>
    pub fn set_variable_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.variable_name = input;
        self
    }
    /// <p>The name of the variable.</p>
    pub fn get_variable_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.variable_name
    }
    /// <p>The new value of the variable.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new value of the variable.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The new value of the variable.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`SetVariableAction`](crate::types::SetVariableAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`variable_name`](crate::types::builders::SetVariableActionBuilder::variable_name)
    /// - [`value`](crate::types::builders::SetVariableActionBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::SetVariableAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SetVariableAction {
            variable_name: self.variable_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "variable_name",
                    "variable_name was not specified but it is required when building SetVariableAction",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building SetVariableAction",
                )
            })?,
        })
    }
}
