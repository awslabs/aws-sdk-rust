// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateInputInput {
    /// <p>The name you want to give to the input.</p>
    #[doc(hidden)]
    pub input_name: std::option::Option<std::string::String>,
    /// <p>A brief description of the input.</p>
    #[doc(hidden)]
    pub input_description: std::option::Option<std::string::String>,
    /// <p>The definition of the input.</p>
    #[doc(hidden)]
    pub input_definition: std::option::Option<crate::types::InputDefinition>,
    /// <p>Metadata that can be used to manage the input.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateInputInput {
    /// <p>The name you want to give to the input.</p>
    pub fn input_name(&self) -> std::option::Option<&str> {
        self.input_name.as_deref()
    }
    /// <p>A brief description of the input.</p>
    pub fn input_description(&self) -> std::option::Option<&str> {
        self.input_description.as_deref()
    }
    /// <p>The definition of the input.</p>
    pub fn input_definition(&self) -> std::option::Option<&crate::types::InputDefinition> {
        self.input_definition.as_ref()
    }
    /// <p>Metadata that can be used to manage the input.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateInputInput {
    /// Creates a new builder-style object to manufacture [`CreateInputInput`](crate::operation::create_input::CreateInputInput).
    pub fn builder() -> crate::operation::create_input::builders::CreateInputInputBuilder {
        crate::operation::create_input::builders::CreateInputInputBuilder::default()
    }
}

/// A builder for [`CreateInputInput`](crate::operation::create_input::CreateInputInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateInputInputBuilder {
    pub(crate) input_name: std::option::Option<std::string::String>,
    pub(crate) input_description: std::option::Option<std::string::String>,
    pub(crate) input_definition: std::option::Option<crate::types::InputDefinition>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateInputInputBuilder {
    /// <p>The name you want to give to the input.</p>
    pub fn input_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.input_name = Some(input.into());
        self
    }
    /// <p>The name you want to give to the input.</p>
    pub fn set_input_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.input_name = input;
        self
    }
    /// <p>A brief description of the input.</p>
    pub fn input_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.input_description = Some(input.into());
        self
    }
    /// <p>A brief description of the input.</p>
    pub fn set_input_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.input_description = input;
        self
    }
    /// <p>The definition of the input.</p>
    pub fn input_definition(mut self, input: crate::types::InputDefinition) -> Self {
        self.input_definition = Some(input);
        self
    }
    /// <p>The definition of the input.</p>
    pub fn set_input_definition(
        mut self,
        input: std::option::Option<crate::types::InputDefinition>,
    ) -> Self {
        self.input_definition = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata that can be used to manage the input.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>Metadata that can be used to manage the input.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateInputInput`](crate::operation::create_input::CreateInputInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_input::CreateInputInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_input::CreateInputInput {
            input_name: self.input_name,
            input_description: self.input_description,
            input_definition: self.input_definition,
            tags: self.tags,
        })
    }
}
