// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateInputInput {
    /// <p>The name you want to give to the input.</p>
    pub input_name: ::std::option::Option<::std::string::String>,
    /// <p>A brief description of the input.</p>
    pub input_description: ::std::option::Option<::std::string::String>,
    /// <p>The definition of the input.</p>
    pub input_definition: ::std::option::Option<crate::types::InputDefinition>,
    /// <p>Metadata that can be used to manage the input.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateInputInput {
    /// <p>The name you want to give to the input.</p>
    pub fn input_name(&self) -> ::std::option::Option<&str> {
        self.input_name.as_deref()
    }
    /// <p>A brief description of the input.</p>
    pub fn input_description(&self) -> ::std::option::Option<&str> {
        self.input_description.as_deref()
    }
    /// <p>The definition of the input.</p>
    pub fn input_definition(&self) -> ::std::option::Option<&crate::types::InputDefinition> {
        self.input_definition.as_ref()
    }
    /// <p>Metadata that can be used to manage the input.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateInputInput {
    /// Creates a new builder-style object to manufacture [`CreateInputInput`](crate::operation::create_input::CreateInputInput).
    pub fn builder() -> crate::operation::create_input::builders::CreateInputInputBuilder {
        crate::operation::create_input::builders::CreateInputInputBuilder::default()
    }
}

/// A builder for [`CreateInputInput`](crate::operation::create_input::CreateInputInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateInputInputBuilder {
    pub(crate) input_name: ::std::option::Option<::std::string::String>,
    pub(crate) input_description: ::std::option::Option<::std::string::String>,
    pub(crate) input_definition: ::std::option::Option<crate::types::InputDefinition>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateInputInputBuilder {
    /// <p>The name you want to give to the input.</p>
    /// This field is required.
    pub fn input_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name you want to give to the input.</p>
    pub fn set_input_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_name = input;
        self
    }
    /// <p>The name you want to give to the input.</p>
    pub fn get_input_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_name
    }
    /// <p>A brief description of the input.</p>
    pub fn input_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A brief description of the input.</p>
    pub fn set_input_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_description = input;
        self
    }
    /// <p>A brief description of the input.</p>
    pub fn get_input_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_description
    }
    /// <p>The definition of the input.</p>
    /// This field is required.
    pub fn input_definition(mut self, input: crate::types::InputDefinition) -> Self {
        self.input_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The definition of the input.</p>
    pub fn set_input_definition(mut self, input: ::std::option::Option<crate::types::InputDefinition>) -> Self {
        self.input_definition = input;
        self
    }
    /// <p>The definition of the input.</p>
    pub fn get_input_definition(&self) -> &::std::option::Option<crate::types::InputDefinition> {
        &self.input_definition
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Metadata that can be used to manage the input.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Metadata that can be used to manage the input.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Metadata that can be used to manage the input.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateInputInput`](crate::operation::create_input::CreateInputInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_input::CreateInputInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_input::CreateInputInput {
            input_name: self.input_name,
            input_description: self.input_description,
            input_definition: self.input_definition,
            tags: self.tags,
        })
    }
}
