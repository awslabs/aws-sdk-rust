// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAlarmModelInput {
    /// <p>A unique name that helps you identify the alarm model. You can't change this name after you create the alarm model.</p>
    #[doc(hidden)]
    pub alarm_model_name: std::option::Option<std::string::String>,
    /// <p>A description that tells you what the alarm model detects.</p>
    #[doc(hidden)]
    pub alarm_model_description: std::option::Option<std::string::String>,
    /// <p>The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>A list of key-value pairs that contain metadata for the alarm model. The tags help you manage the alarm model. For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/tagging-iotevents.html">Tagging your AWS IoT Events resources</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
    /// <p>You can create up to 50 tags for one alarm model.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>An input attribute used as a key to create an alarm. AWS IoT Events routes <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html">inputs</a> associated with this key to the alarm.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>A non-negative integer that reflects the severity level of the alarm.</p>
    #[doc(hidden)]
    pub severity: std::option::Option<i32>,
    /// <p>Defines when your alarm is invoked.</p>
    #[doc(hidden)]
    pub alarm_rule: std::option::Option<crate::types::AlarmRule>,
    /// <p>Contains information about one or more notification actions.</p>
    #[doc(hidden)]
    pub alarm_notification: std::option::Option<crate::types::AlarmNotification>,
    /// <p>Contains information about one or more alarm actions.</p>
    #[doc(hidden)]
    pub alarm_event_actions: std::option::Option<crate::types::AlarmEventActions>,
    /// <p>Contains the configuration information of alarm state changes.</p>
    #[doc(hidden)]
    pub alarm_capabilities: std::option::Option<crate::types::AlarmCapabilities>,
}
impl CreateAlarmModelInput {
    /// <p>A unique name that helps you identify the alarm model. You can't change this name after you create the alarm model.</p>
    pub fn alarm_model_name(&self) -> std::option::Option<&str> {
        self.alarm_model_name.as_deref()
    }
    /// <p>A description that tells you what the alarm model detects.</p>
    pub fn alarm_model_description(&self) -> std::option::Option<&str> {
        self.alarm_model_description.as_deref()
    }
    /// <p>The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>A list of key-value pairs that contain metadata for the alarm model. The tags help you manage the alarm model. For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/tagging-iotevents.html">Tagging your AWS IoT Events resources</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
    /// <p>You can create up to 50 tags for one alarm model.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>An input attribute used as a key to create an alarm. AWS IoT Events routes <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html">inputs</a> associated with this key to the alarm.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>A non-negative integer that reflects the severity level of the alarm.</p>
    pub fn severity(&self) -> std::option::Option<i32> {
        self.severity
    }
    /// <p>Defines when your alarm is invoked.</p>
    pub fn alarm_rule(&self) -> std::option::Option<&crate::types::AlarmRule> {
        self.alarm_rule.as_ref()
    }
    /// <p>Contains information about one or more notification actions.</p>
    pub fn alarm_notification(&self) -> std::option::Option<&crate::types::AlarmNotification> {
        self.alarm_notification.as_ref()
    }
    /// <p>Contains information about one or more alarm actions.</p>
    pub fn alarm_event_actions(&self) -> std::option::Option<&crate::types::AlarmEventActions> {
        self.alarm_event_actions.as_ref()
    }
    /// <p>Contains the configuration information of alarm state changes.</p>
    pub fn alarm_capabilities(&self) -> std::option::Option<&crate::types::AlarmCapabilities> {
        self.alarm_capabilities.as_ref()
    }
}
impl CreateAlarmModelInput {
    /// Creates a new builder-style object to manufacture [`CreateAlarmModelInput`](crate::operation::create_alarm_model::CreateAlarmModelInput).
    pub fn builder() -> crate::operation::create_alarm_model::builders::CreateAlarmModelInputBuilder
    {
        crate::operation::create_alarm_model::builders::CreateAlarmModelInputBuilder::default()
    }
}

/// A builder for [`CreateAlarmModelInput`](crate::operation::create_alarm_model::CreateAlarmModelInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateAlarmModelInputBuilder {
    pub(crate) alarm_model_name: std::option::Option<std::string::String>,
    pub(crate) alarm_model_description: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) severity: std::option::Option<i32>,
    pub(crate) alarm_rule: std::option::Option<crate::types::AlarmRule>,
    pub(crate) alarm_notification: std::option::Option<crate::types::AlarmNotification>,
    pub(crate) alarm_event_actions: std::option::Option<crate::types::AlarmEventActions>,
    pub(crate) alarm_capabilities: std::option::Option<crate::types::AlarmCapabilities>,
}
impl CreateAlarmModelInputBuilder {
    /// <p>A unique name that helps you identify the alarm model. You can't change this name after you create the alarm model.</p>
    pub fn alarm_model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.alarm_model_name = Some(input.into());
        self
    }
    /// <p>A unique name that helps you identify the alarm model. You can't change this name after you create the alarm model.</p>
    pub fn set_alarm_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alarm_model_name = input;
        self
    }
    /// <p>A description that tells you what the alarm model detects.</p>
    pub fn alarm_model_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.alarm_model_description = Some(input.into());
        self
    }
    /// <p>A description that tells you what the alarm model detects.</p>
    pub fn set_alarm_model_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.alarm_model_description = input;
        self
    }
    /// <p>The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of key-value pairs that contain metadata for the alarm model. The tags help you manage the alarm model. For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/tagging-iotevents.html">Tagging your AWS IoT Events resources</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
    /// <p>You can create up to 50 tags for one alarm model.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of key-value pairs that contain metadata for the alarm model. The tags help you manage the alarm model. For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/tagging-iotevents.html">Tagging your AWS IoT Events resources</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
    /// <p>You can create up to 50 tags for one alarm model.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>An input attribute used as a key to create an alarm. AWS IoT Events routes <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html">inputs</a> associated with this key to the alarm.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>An input attribute used as a key to create an alarm. AWS IoT Events routes <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html">inputs</a> associated with this key to the alarm.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>A non-negative integer that reflects the severity level of the alarm.</p>
    pub fn severity(mut self, input: i32) -> Self {
        self.severity = Some(input);
        self
    }
    /// <p>A non-negative integer that reflects the severity level of the alarm.</p>
    pub fn set_severity(mut self, input: std::option::Option<i32>) -> Self {
        self.severity = input;
        self
    }
    /// <p>Defines when your alarm is invoked.</p>
    pub fn alarm_rule(mut self, input: crate::types::AlarmRule) -> Self {
        self.alarm_rule = Some(input);
        self
    }
    /// <p>Defines when your alarm is invoked.</p>
    pub fn set_alarm_rule(mut self, input: std::option::Option<crate::types::AlarmRule>) -> Self {
        self.alarm_rule = input;
        self
    }
    /// <p>Contains information about one or more notification actions.</p>
    pub fn alarm_notification(mut self, input: crate::types::AlarmNotification) -> Self {
        self.alarm_notification = Some(input);
        self
    }
    /// <p>Contains information about one or more notification actions.</p>
    pub fn set_alarm_notification(
        mut self,
        input: std::option::Option<crate::types::AlarmNotification>,
    ) -> Self {
        self.alarm_notification = input;
        self
    }
    /// <p>Contains information about one or more alarm actions.</p>
    pub fn alarm_event_actions(mut self, input: crate::types::AlarmEventActions) -> Self {
        self.alarm_event_actions = Some(input);
        self
    }
    /// <p>Contains information about one or more alarm actions.</p>
    pub fn set_alarm_event_actions(
        mut self,
        input: std::option::Option<crate::types::AlarmEventActions>,
    ) -> Self {
        self.alarm_event_actions = input;
        self
    }
    /// <p>Contains the configuration information of alarm state changes.</p>
    pub fn alarm_capabilities(mut self, input: crate::types::AlarmCapabilities) -> Self {
        self.alarm_capabilities = Some(input);
        self
    }
    /// <p>Contains the configuration information of alarm state changes.</p>
    pub fn set_alarm_capabilities(
        mut self,
        input: std::option::Option<crate::types::AlarmCapabilities>,
    ) -> Self {
        self.alarm_capabilities = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateAlarmModelInput`](crate::operation::create_alarm_model::CreateAlarmModelInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_alarm_model::CreateAlarmModelInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_alarm_model::CreateAlarmModelInput {
                alarm_model_name: self.alarm_model_name,
                alarm_model_description: self.alarm_model_description,
                role_arn: self.role_arn,
                tags: self.tags,
                key: self.key,
                severity: self.severity,
                alarm_rule: self.alarm_rule,
                alarm_notification: self.alarm_notification,
                alarm_event_actions: self.alarm_event_actions,
                alarm_capabilities: self.alarm_capabilities,
            },
        )
    }
}
