// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_alarm_model::_create_alarm_model_output::CreateAlarmModelOutputBuilder;

pub use crate::operation::create_alarm_model::_create_alarm_model_input::CreateAlarmModelInputBuilder;

impl crate::operation::create_alarm_model::builders::CreateAlarmModelInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_alarm_model::CreateAlarmModelOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_alarm_model::CreateAlarmModelError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_alarm_model();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateAlarmModel`.
///
/// <p>Creates an alarm model to monitor an AWS IoT Events input attribute. You can use the alarm to get notified when the value is outside a specified range. For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/create-alarms.html">Create an alarm model</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateAlarmModelFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_alarm_model::builders::CreateAlarmModelInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_alarm_model::CreateAlarmModelOutput,
        crate::operation::create_alarm_model::CreateAlarmModelError,
    > for CreateAlarmModelFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_alarm_model::CreateAlarmModelOutput,
            crate::operation::create_alarm_model::CreateAlarmModelError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateAlarmModelFluentBuilder {
    /// Creates a new `CreateAlarmModel`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateAlarmModel as a reference.
    pub fn as_input(&self) -> &crate::operation::create_alarm_model::builders::CreateAlarmModelInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_alarm_model::CreateAlarmModelOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_alarm_model::CreateAlarmModelError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_alarm_model::CreateAlarmModel::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_alarm_model::CreateAlarmModel::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_alarm_model::CreateAlarmModelOutput,
        crate::operation::create_alarm_model::CreateAlarmModelError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A unique name that helps you identify the alarm model. You can't change this name after you create the alarm model.</p>
    pub fn alarm_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.alarm_model_name(input.into());
        self
    }
    /// <p>A unique name that helps you identify the alarm model. You can't change this name after you create the alarm model.</p>
    pub fn set_alarm_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_alarm_model_name(input);
        self
    }
    /// <p>A unique name that helps you identify the alarm model. You can't change this name after you create the alarm model.</p>
    pub fn get_alarm_model_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_alarm_model_name()
    }
    /// <p>A description that tells you what the alarm model detects.</p>
    pub fn alarm_model_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.alarm_model_description(input.into());
        self
    }
    /// <p>A description that tells you what the alarm model detects.</p>
    pub fn set_alarm_model_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_alarm_model_description(input);
        self
    }
    /// <p>A description that tells you what the alarm model detects.</p>
    pub fn get_alarm_model_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_alarm_model_description()
    }
    /// <p>The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_role_arn()
    }
    ///
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of key-value pairs that contain metadata for the alarm model. The tags help you manage the alarm model. For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/tagging-iotevents.html">Tagging your AWS IoT Events resources</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
    /// <p>You can create up to 50 tags for one alarm model.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of key-value pairs that contain metadata for the alarm model. The tags help you manage the alarm model. For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/tagging-iotevents.html">Tagging your AWS IoT Events resources</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
    /// <p>You can create up to 50 tags for one alarm model.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A list of key-value pairs that contain metadata for the alarm model. The tags help you manage the alarm model. For more information, see <a href="https://docs.aws.amazon.com/iotevents/latest/developerguide/tagging-iotevents.html">Tagging your AWS IoT Events resources</a> in the <i>AWS IoT Events Developer Guide</i>.</p>
    /// <p>You can create up to 50 tags for one alarm model.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
    /// <p>An input attribute used as a key to create an alarm. AWS IoT Events routes <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html">inputs</a> associated with this key to the alarm.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.key(input.into());
        self
    }
    /// <p>An input attribute used as a key to create an alarm. AWS IoT Events routes <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html">inputs</a> associated with this key to the alarm.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_key(input);
        self
    }
    /// <p>An input attribute used as a key to create an alarm. AWS IoT Events routes <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html">inputs</a> associated with this key to the alarm.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_key()
    }
    /// <p>A non-negative integer that reflects the severity level of the alarm.</p>
    pub fn severity(mut self, input: i32) -> Self {
        self.inner = self.inner.severity(input);
        self
    }
    /// <p>A non-negative integer that reflects the severity level of the alarm.</p>
    pub fn set_severity(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_severity(input);
        self
    }
    /// <p>A non-negative integer that reflects the severity level of the alarm.</p>
    pub fn get_severity(&self) -> &::std::option::Option<i32> {
        self.inner.get_severity()
    }
    /// <p>Defines when your alarm is invoked.</p>
    pub fn alarm_rule(mut self, input: crate::types::AlarmRule) -> Self {
        self.inner = self.inner.alarm_rule(input);
        self
    }
    /// <p>Defines when your alarm is invoked.</p>
    pub fn set_alarm_rule(mut self, input: ::std::option::Option<crate::types::AlarmRule>) -> Self {
        self.inner = self.inner.set_alarm_rule(input);
        self
    }
    /// <p>Defines when your alarm is invoked.</p>
    pub fn get_alarm_rule(&self) -> &::std::option::Option<crate::types::AlarmRule> {
        self.inner.get_alarm_rule()
    }
    /// <p>Contains information about one or more notification actions.</p>
    pub fn alarm_notification(mut self, input: crate::types::AlarmNotification) -> Self {
        self.inner = self.inner.alarm_notification(input);
        self
    }
    /// <p>Contains information about one or more notification actions.</p>
    pub fn set_alarm_notification(mut self, input: ::std::option::Option<crate::types::AlarmNotification>) -> Self {
        self.inner = self.inner.set_alarm_notification(input);
        self
    }
    /// <p>Contains information about one or more notification actions.</p>
    pub fn get_alarm_notification(&self) -> &::std::option::Option<crate::types::AlarmNotification> {
        self.inner.get_alarm_notification()
    }
    /// <p>Contains information about one or more alarm actions.</p>
    pub fn alarm_event_actions(mut self, input: crate::types::AlarmEventActions) -> Self {
        self.inner = self.inner.alarm_event_actions(input);
        self
    }
    /// <p>Contains information about one or more alarm actions.</p>
    pub fn set_alarm_event_actions(mut self, input: ::std::option::Option<crate::types::AlarmEventActions>) -> Self {
        self.inner = self.inner.set_alarm_event_actions(input);
        self
    }
    /// <p>Contains information about one or more alarm actions.</p>
    pub fn get_alarm_event_actions(&self) -> &::std::option::Option<crate::types::AlarmEventActions> {
        self.inner.get_alarm_event_actions()
    }
    /// <p>Contains the configuration information of alarm state changes.</p>
    pub fn alarm_capabilities(mut self, input: crate::types::AlarmCapabilities) -> Self {
        self.inner = self.inner.alarm_capabilities(input);
        self
    }
    /// <p>Contains the configuration information of alarm state changes.</p>
    pub fn set_alarm_capabilities(mut self, input: ::std::option::Option<crate::types::AlarmCapabilities>) -> Self {
        self.inner = self.inner.set_alarm_capabilities(input);
        self
    }
    /// <p>Contains the configuration information of alarm state changes.</p>
    pub fn get_alarm_capabilities(&self) -> &::std::option::Option<crate::types::AlarmCapabilities> {
        self.inner.get_alarm_capabilities()
    }
}
