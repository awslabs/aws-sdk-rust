// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAlarmModelOutput {
    /// <p>The time the alarm model was created, in the Unix epoch format.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ARN of the alarm model. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    #[doc(hidden)]
    pub alarm_model_arn: std::option::Option<std::string::String>,
    /// <p>The version of the alarm model.</p>
    #[doc(hidden)]
    pub alarm_model_version: std::option::Option<std::string::String>,
    /// <p>The time the alarm model was last updated, in the Unix epoch format.</p>
    #[doc(hidden)]
    pub last_update_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the alarm model. The status can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> - The alarm model is active and it's ready to evaluate data.</p> </li>
    /// <li> <p> <code>ACTIVATING</code> - AWS IoT Events is activating your alarm model. Activating an alarm model can take up to a few minutes.</p> </li>
    /// <li> <p> <code>INACTIVE</code> - The alarm model is inactive, so it isn't ready to evaluate data. Check your alarm model information and update the alarm model.</p> </li>
    /// <li> <p> <code>FAILED</code> - You couldn't create or update the alarm model. Check your alarm model information and try again.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::AlarmModelVersionStatus>,
    /// <p> Contains information about the status of the alarm model. </p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The name of the alarm model.</p>
    #[doc(hidden)]
    pub alarm_model_name: std::option::Option<std::string::String>,
    /// <p>The description of the alarm model.</p>
    #[doc(hidden)]
    pub alarm_model_description: std::option::Option<std::string::String>,
    /// <p>The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>An input attribute used as a key to create an alarm. AWS IoT Events routes <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html">inputs</a> associated with this key to the alarm.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>A non-negative integer that reflects the severity level of the alarm.</p>
    #[doc(hidden)]
    pub severity: std::option::Option<i32>,
    /// <p>Defines when your alarm is invoked.</p>
    #[doc(hidden)]
    pub alarm_rule: std::option::Option<crate::types::AlarmRule>,
    /// <p>Contains information about one or more notification actions.</p>
    #[doc(hidden)]
    pub alarm_notification: std::option::Option<crate::types::AlarmNotification>,
    /// <p>Contains information about one or more alarm actions.</p>
    #[doc(hidden)]
    pub alarm_event_actions: std::option::Option<crate::types::AlarmEventActions>,
    /// <p>Contains the configuration information of alarm state changes.</p>
    #[doc(hidden)]
    pub alarm_capabilities: std::option::Option<crate::types::AlarmCapabilities>,
    _request_id: Option<String>,
}
impl DescribeAlarmModelOutput {
    /// <p>The time the alarm model was created, in the Unix epoch format.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The ARN of the alarm model. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn alarm_model_arn(&self) -> std::option::Option<&str> {
        self.alarm_model_arn.as_deref()
    }
    /// <p>The version of the alarm model.</p>
    pub fn alarm_model_version(&self) -> std::option::Option<&str> {
        self.alarm_model_version.as_deref()
    }
    /// <p>The time the alarm model was last updated, in the Unix epoch format.</p>
    pub fn last_update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
    /// <p>The status of the alarm model. The status can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> - The alarm model is active and it's ready to evaluate data.</p> </li>
    /// <li> <p> <code>ACTIVATING</code> - AWS IoT Events is activating your alarm model. Activating an alarm model can take up to a few minutes.</p> </li>
    /// <li> <p> <code>INACTIVE</code> - The alarm model is inactive, so it isn't ready to evaluate data. Check your alarm model information and update the alarm model.</p> </li>
    /// <li> <p> <code>FAILED</code> - You couldn't create or update the alarm model. Check your alarm model information and try again.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::AlarmModelVersionStatus> {
        self.status.as_ref()
    }
    /// <p> Contains information about the status of the alarm model. </p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The name of the alarm model.</p>
    pub fn alarm_model_name(&self) -> std::option::Option<&str> {
        self.alarm_model_name.as_deref()
    }
    /// <p>The description of the alarm model.</p>
    pub fn alarm_model_description(&self) -> std::option::Option<&str> {
        self.alarm_model_description.as_deref()
    }
    /// <p>The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>An input attribute used as a key to create an alarm. AWS IoT Events routes <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html">inputs</a> associated with this key to the alarm.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>A non-negative integer that reflects the severity level of the alarm.</p>
    pub fn severity(&self) -> std::option::Option<i32> {
        self.severity
    }
    /// <p>Defines when your alarm is invoked.</p>
    pub fn alarm_rule(&self) -> std::option::Option<&crate::types::AlarmRule> {
        self.alarm_rule.as_ref()
    }
    /// <p>Contains information about one or more notification actions.</p>
    pub fn alarm_notification(&self) -> std::option::Option<&crate::types::AlarmNotification> {
        self.alarm_notification.as_ref()
    }
    /// <p>Contains information about one or more alarm actions.</p>
    pub fn alarm_event_actions(&self) -> std::option::Option<&crate::types::AlarmEventActions> {
        self.alarm_event_actions.as_ref()
    }
    /// <p>Contains the configuration information of alarm state changes.</p>
    pub fn alarm_capabilities(&self) -> std::option::Option<&crate::types::AlarmCapabilities> {
        self.alarm_capabilities.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeAlarmModelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAlarmModelOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAlarmModelOutput`](crate::operation::describe_alarm_model::DescribeAlarmModelOutput).
    pub fn builder(
    ) -> crate::operation::describe_alarm_model::builders::DescribeAlarmModelOutputBuilder {
        crate::operation::describe_alarm_model::builders::DescribeAlarmModelOutputBuilder::default()
    }
}

/// A builder for [`DescribeAlarmModelOutput`](crate::operation::describe_alarm_model::DescribeAlarmModelOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeAlarmModelOutputBuilder {
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) alarm_model_arn: std::option::Option<std::string::String>,
    pub(crate) alarm_model_version: std::option::Option<std::string::String>,
    pub(crate) last_update_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::AlarmModelVersionStatus>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) alarm_model_name: std::option::Option<std::string::String>,
    pub(crate) alarm_model_description: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) severity: std::option::Option<i32>,
    pub(crate) alarm_rule: std::option::Option<crate::types::AlarmRule>,
    pub(crate) alarm_notification: std::option::Option<crate::types::AlarmNotification>,
    pub(crate) alarm_event_actions: std::option::Option<crate::types::AlarmEventActions>,
    pub(crate) alarm_capabilities: std::option::Option<crate::types::AlarmCapabilities>,
    _request_id: Option<String>,
}
impl DescribeAlarmModelOutputBuilder {
    /// <p>The time the alarm model was created, in the Unix epoch format.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time the alarm model was created, in the Unix epoch format.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The ARN of the alarm model. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn alarm_model_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.alarm_model_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the alarm model. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn set_alarm_model_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alarm_model_arn = input;
        self
    }
    /// <p>The version of the alarm model.</p>
    pub fn alarm_model_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.alarm_model_version = Some(input.into());
        self
    }
    /// <p>The version of the alarm model.</p>
    pub fn set_alarm_model_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.alarm_model_version = input;
        self
    }
    /// <p>The time the alarm model was last updated, in the Unix epoch format.</p>
    pub fn last_update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_update_time = Some(input);
        self
    }
    /// <p>The time the alarm model was last updated, in the Unix epoch format.</p>
    pub fn set_last_update_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>The status of the alarm model. The status can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> - The alarm model is active and it's ready to evaluate data.</p> </li>
    /// <li> <p> <code>ACTIVATING</code> - AWS IoT Events is activating your alarm model. Activating an alarm model can take up to a few minutes.</p> </li>
    /// <li> <p> <code>INACTIVE</code> - The alarm model is inactive, so it isn't ready to evaluate data. Check your alarm model information and update the alarm model.</p> </li>
    /// <li> <p> <code>FAILED</code> - You couldn't create or update the alarm model. Check your alarm model information and try again.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::AlarmModelVersionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the alarm model. The status can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> - The alarm model is active and it's ready to evaluate data.</p> </li>
    /// <li> <p> <code>ACTIVATING</code> - AWS IoT Events is activating your alarm model. Activating an alarm model can take up to a few minutes.</p> </li>
    /// <li> <p> <code>INACTIVE</code> - The alarm model is inactive, so it isn't ready to evaluate data. Check your alarm model information and update the alarm model.</p> </li>
    /// <li> <p> <code>FAILED</code> - You couldn't create or update the alarm model. Check your alarm model information and try again.</p> </li>
    /// </ul>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::AlarmModelVersionStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p> Contains information about the status of the alarm model. </p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p> Contains information about the status of the alarm model. </p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The name of the alarm model.</p>
    pub fn alarm_model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.alarm_model_name = Some(input.into());
        self
    }
    /// <p>The name of the alarm model.</p>
    pub fn set_alarm_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alarm_model_name = input;
        self
    }
    /// <p>The description of the alarm model.</p>
    pub fn alarm_model_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.alarm_model_description = Some(input.into());
        self
    }
    /// <p>The description of the alarm model.</p>
    pub fn set_alarm_model_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.alarm_model_description = input;
        self
    }
    /// <p>The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>An input attribute used as a key to create an alarm. AWS IoT Events routes <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html">inputs</a> associated with this key to the alarm.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>An input attribute used as a key to create an alarm. AWS IoT Events routes <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html">inputs</a> associated with this key to the alarm.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>A non-negative integer that reflects the severity level of the alarm.</p>
    pub fn severity(mut self, input: i32) -> Self {
        self.severity = Some(input);
        self
    }
    /// <p>A non-negative integer that reflects the severity level of the alarm.</p>
    pub fn set_severity(mut self, input: std::option::Option<i32>) -> Self {
        self.severity = input;
        self
    }
    /// <p>Defines when your alarm is invoked.</p>
    pub fn alarm_rule(mut self, input: crate::types::AlarmRule) -> Self {
        self.alarm_rule = Some(input);
        self
    }
    /// <p>Defines when your alarm is invoked.</p>
    pub fn set_alarm_rule(mut self, input: std::option::Option<crate::types::AlarmRule>) -> Self {
        self.alarm_rule = input;
        self
    }
    /// <p>Contains information about one or more notification actions.</p>
    pub fn alarm_notification(mut self, input: crate::types::AlarmNotification) -> Self {
        self.alarm_notification = Some(input);
        self
    }
    /// <p>Contains information about one or more notification actions.</p>
    pub fn set_alarm_notification(
        mut self,
        input: std::option::Option<crate::types::AlarmNotification>,
    ) -> Self {
        self.alarm_notification = input;
        self
    }
    /// <p>Contains information about one or more alarm actions.</p>
    pub fn alarm_event_actions(mut self, input: crate::types::AlarmEventActions) -> Self {
        self.alarm_event_actions = Some(input);
        self
    }
    /// <p>Contains information about one or more alarm actions.</p>
    pub fn set_alarm_event_actions(
        mut self,
        input: std::option::Option<crate::types::AlarmEventActions>,
    ) -> Self {
        self.alarm_event_actions = input;
        self
    }
    /// <p>Contains the configuration information of alarm state changes.</p>
    pub fn alarm_capabilities(mut self, input: crate::types::AlarmCapabilities) -> Self {
        self.alarm_capabilities = Some(input);
        self
    }
    /// <p>Contains the configuration information of alarm state changes.</p>
    pub fn set_alarm_capabilities(
        mut self,
        input: std::option::Option<crate::types::AlarmCapabilities>,
    ) -> Self {
        self.alarm_capabilities = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAlarmModelOutput`](crate::operation::describe_alarm_model::DescribeAlarmModelOutput).
    pub fn build(self) -> crate::operation::describe_alarm_model::DescribeAlarmModelOutput {
        crate::operation::describe_alarm_model::DescribeAlarmModelOutput {
            creation_time: self.creation_time,
            alarm_model_arn: self.alarm_model_arn,
            alarm_model_version: self.alarm_model_version,
            last_update_time: self.last_update_time,
            status: self.status,
            status_message: self.status_message,
            alarm_model_name: self.alarm_model_name,
            alarm_model_description: self.alarm_model_description,
            role_arn: self.role_arn,
            key: self.key,
            severity: self.severity,
            alarm_rule: self.alarm_rule,
            alarm_notification: self.alarm_notification,
            alarm_event_actions: self.alarm_event_actions,
            alarm_capabilities: self.alarm_capabilities,
            _request_id: self._request_id,
        }
    }
}
